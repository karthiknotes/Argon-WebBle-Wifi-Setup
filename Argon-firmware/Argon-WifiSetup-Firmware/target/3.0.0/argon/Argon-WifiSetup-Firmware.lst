
c:/Projects/Argon-WebBLE-Wifi-Setup/Argon-firmware/Argon-WifiSetup-Firmware/target/3.0.0/argon/Argon-WifiSetup-Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002db4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6dd0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e6a8  000d6dd4  0001e6a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000000e0  2003e710  2003e710  0002e710  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6e3c  000d6e3c  00026e3c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6e64  000d6e64  00026e64  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00122b37  00000000  00000000  00026e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00010b0b  00000000  00000000  0014999f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002eec1  00000000  00000000  0015a4aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002670  00000000  00000000  0018936b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000085d8  00000000  00000000  0018b9db  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00031cbd  00000000  00000000  00193fb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002f692  00000000  00000000  001c5c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011fa85  00000000  00000000  001f5302  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006c78  00000000  00000000  00314d88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fb8d 	bl	d674c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fbaf 	bl	d679c <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e6a8 	.word	0x2003e6a8
   d4048:	000d6dd4 	.word	0x000d6dd4
   d404c:	2003e710 	.word	0x2003e710
   d4050:	2003e710 	.word	0x2003e710
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f001 ff87 	bl	d5f70 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d6da0 	.word	0x000d6da0
   d407c:	000d6dc4 	.word	0x000d6dc4

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b922 	b.w	d42c8 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f93f 	bl	d4308 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f001 bf31 	b.w	d5ef4 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 bc0d 	b.w	d48b0 <malloc>

000d4096 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d4096:	f000 bc13 	b.w	d48c0 <free>

000d409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409a:	7800      	ldrb	r0, [r0, #0]
   d409c:	fab0 f080 	clz	r0, r0
   d40a0:	0940      	lsrs	r0, r0, #5
   d40a2:	4770      	bx	lr

000d40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a4:	2301      	movs	r3, #1
   d40a6:	7003      	strb	r3, [r0, #0]
   d40a8:	4770      	bx	lr

000d40aa <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40aa:	b510      	push	{r4, lr}
   d40ac:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d40ae:	6800      	ldr	r0, [r0, #0]
   d40b0:	b108      	cbz	r0, d40b6 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40b2:	f000 fc05 	bl	d48c0 <free>
class SystemClass {
   d40b6:	4620      	mov	r0, r4
   d40b8:	bd10      	pop	{r4, pc}

000d40ba <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40ba:	b40e      	push	{r1, r2, r3}
   d40bc:	b503      	push	{r0, r1, lr}
   d40be:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d40c0:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d40c2:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d40c6:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d40c8:	f001 fe91 	bl	d5dee <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d40cc:	b002      	add	sp, #8
   d40ce:	f85d eb04 	ldr.w	lr, [sp], #4
   d40d2:	b003      	add	sp, #12
   d40d4:	4770      	bx	lr
	...

000d40d8 <_ZL13onSetWifiSSIDPKhjRKN8particle13BlePeerDeviceEPv>:
BleCharacteristic setWifiPassCharacteristic("setWifiPass", BleCharacteristicProperty::WRITE_WO_RSP, BleUuid("fdcf0003-3fed-4ed2-84e6-04bbb9ae04d4"), serviceUuid, onSetWifiPass, NULL);
String setSSID;


static void onSetWifiSSID(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context)
{
   d40d8:	b510      	push	{r4, lr}
    char buf[100];
    if (len > sizeof(buf)) {
   d40da:	2964      	cmp	r1, #100	; 0x64
{
   d40dc:	b09a      	sub	sp, #104	; 0x68
   d40de:	460c      	mov	r4, r1
    if (len > sizeof(buf)) {
   d40e0:	d906      	bls.n	d40f0 <_ZL13onSetWifiSSIDPKhjRKN8particle13BlePeerDeviceEPv+0x18>
        Serial.println("SSID is too long");
   d40e2:	f002 f84b 	bl	d617c <_Z16_fetch_usbserialv>
   d40e6:	490d      	ldr	r1, [pc, #52]	; (d411c <_ZL13onSetWifiSSIDPKhjRKN8particle13BlePeerDeviceEPv+0x44>)
   d40e8:	f001 fe59 	bl	d5d9e <_ZN5Print7printlnEPKc>
    }
    strncpy(buf, (char*)data, len);
    buf[len] = 0;
    Serial.printf("Set wifi SSID: %s\n", buf);
    setSSID = buf;
}
   d40ec:	b01a      	add	sp, #104	; 0x68
   d40ee:	bd10      	pop	{r4, pc}
    strncpy(buf, (char*)data, len);
   d40f0:	460a      	mov	r2, r1
   d40f2:	4601      	mov	r1, r0
   d40f4:	a801      	add	r0, sp, #4
   d40f6:	f002 fb8f 	bl	d6818 <strncpy>
    buf[len] = 0;
   d40fa:	ab1a      	add	r3, sp, #104	; 0x68
   d40fc:	441c      	add	r4, r3
   d40fe:	2300      	movs	r3, #0
   d4100:	f804 3c64 	strb.w	r3, [r4, #-100]
    Serial.printf("Set wifi SSID: %s\n", buf);
   d4104:	f002 f83a 	bl	d617c <_Z16_fetch_usbserialv>
   d4108:	4905      	ldr	r1, [pc, #20]	; (d4120 <_ZL13onSetWifiSSIDPKhjRKN8particle13BlePeerDeviceEPv+0x48>)
   d410a:	aa01      	add	r2, sp, #4
   d410c:	f7ff ffd5 	bl	d40ba <_ZN5Print6printfEPKcz>
    setSSID = buf;
   d4110:	a901      	add	r1, sp, #4
   d4112:	4804      	ldr	r0, [pc, #16]	; (d4124 <_ZL13onSetWifiSSIDPKhjRKN8particle13BlePeerDeviceEPv+0x4c>)
   d4114:	f000 fccb 	bl	d4aae <_ZN6StringaSEPKc>
   d4118:	e7e8      	b.n	d40ec <_ZL13onSetWifiSSIDPKhjRKN8particle13BlePeerDeviceEPv+0x14>
   d411a:	bf00      	nop
   d411c:	000d686c 	.word	0x000d686c
   d4120:	000d687d 	.word	0x000d687d
   d4124:	2003e73c 	.word	0x2003e73c

000d4128 <_ZL13onSetWifiPassPKhjRKN8particle13BlePeerDeviceEPv>:

static void onSetWifiPass(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context)
{
   d4128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if Wiring_WiFi
    char buf[100];
    if (len > sizeof(buf)) {
   d412c:	2964      	cmp	r1, #100	; 0x64
{
   d412e:	b0ac      	sub	sp, #176	; 0xb0
   d4130:	460c      	mov	r4, r1
    if (len > sizeof(buf)) {
   d4132:	d907      	bls.n	d4144 <_ZL13onSetWifiPassPKhjRKN8particle13BlePeerDeviceEPv+0x1c>
        Serial.println("Password is too long");
   d4134:	f002 f822 	bl	d617c <_Z16_fetch_usbserialv>
   d4138:	492c      	ldr	r1, [pc, #176]	; (d41ec <_ZL13onSetWifiPassPKhjRKN8particle13BlePeerDeviceEPv+0xc4>)
        WiFi.disconnect();
        if (!WiFi.clearCredentials()) {
            Serial.println("Failed to clear Wifi credentials");
        }
        if (!WiFi.setCredentials(setSSID.c_str(), buf)) {
            Serial.println("Failed to set Wifi credentials");
   d413a:	f001 fe30 	bl	d5d9e <_ZN5Print7printlnEPKc>
            Serial.println("WiFi credentials set");
            System.reset();
        }
    }
#endif
}
   d413e:	b02c      	add	sp, #176	; 0xb0
   d4140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    strncpy(buf, (char*)data, len);
   d4144:	ad13      	add	r5, sp, #76	; 0x4c
   d4146:	460a      	mov	r2, r1
   d4148:	4601      	mov	r1, r0
   d414a:	4628      	mov	r0, r5
   d414c:	f002 fb64 	bl	d6818 <strncpy>
    buf[len] = 0;
   d4150:	ab2c      	add	r3, sp, #176	; 0xb0
   d4152:	441c      	add	r4, r3
   d4154:	2600      	movs	r6, #0
   d4156:	f804 6c64 	strb.w	r6, [r4, #-100]
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d415a:	4c25      	ldr	r4, [pc, #148]	; (d41f0 <_ZL13onSetWifiPassPKhjRKN8particle13BlePeerDeviceEPv+0xc8>)
    Serial.printf("Set wifi pass: %s\n", buf);
   d415c:	f002 f80e 	bl	d617c <_Z16_fetch_usbserialv>
   d4160:	4924      	ldr	r1, [pc, #144]	; (d41f4 <_ZL13onSetWifiPassPKhjRKN8particle13BlePeerDeviceEPv+0xcc>)
   d4162:	462a      	mov	r2, r5
   d4164:	f7ff ffa9 	bl	d40ba <_ZN5Print6printfEPKcz>
   d4168:	6860      	ldr	r0, [r4, #4]
   d416a:	4632      	mov	r2, r6
   d416c:	2102      	movs	r1, #2
   d416e:	f000 fb27 	bl	d47c0 <network_disconnect>
    bool hasCredentials(void) {
        return network_has_credentials(*this, 0, NULL);
    }

    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
   d4172:	6860      	ldr	r0, [r4, #4]
   d4174:	4633      	mov	r3, r6
   d4176:	4632      	mov	r2, r6
   d4178:	4631      	mov	r1, r6
   d417a:	f000 fb59 	bl	d4830 <network_clear_credentials>
   d417e:	46a0      	mov	r8, r4
        if (!WiFi.clearCredentials()) {
   d4180:	b920      	cbnz	r0, d418c <_ZL13onSetWifiPassPKhjRKN8particle13BlePeerDeviceEPv+0x64>
            Serial.println("Failed to clear Wifi credentials");
   d4182:	f001 fffb 	bl	d617c <_Z16_fetch_usbserialv>
   d4186:	491c      	ldr	r1, [pc, #112]	; (d41f8 <_ZL13onSetWifiPassPKhjRKN8particle13BlePeerDeviceEPv+0xd0>)
   d4188:	f001 fe09 	bl	d5d9e <_ZN5Print7printlnEPKc>
        if (!WiFi.setCredentials(setSSID.c_str(), buf)) {
   d418c:	4b1b      	ldr	r3, [pc, #108]	; (d41fc <_ZL13onSetWifiPassPKhjRKN8particle13BlePeerDeviceEPv+0xd4>)
   d418e:	681e      	ldr	r6, [r3, #0]
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   d4190:	b30e      	cbz	r6, d41d6 <_ZL13onSetWifiPassPKhjRKN8particle13BlePeerDeviceEPv+0xae>
   d4192:	4630      	mov	r0, r6
   d4194:	f002 fb38 	bl	d6808 <strlen>
   d4198:	4604      	mov	r4, r0
   d419a:	4628      	mov	r0, r5
   d419c:	f002 fb34 	bl	d6808 <strlen>
        memset(&creds, 0, sizeof(creds));
   d41a0:	2238      	movs	r2, #56	; 0x38
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   d41a2:	4607      	mov	r7, r0
        memset(&creds, 0, sizeof(creds));
   d41a4:	2100      	movs	r1, #0
   d41a6:	a805      	add	r0, sp, #20
   d41a8:	f002 faf8 	bl	d679c <memset>
        creds.size = sizeof(creds);
   d41ac:	234c      	movs	r3, #76	; 0x4c
        creds.ssid = ssid;
   d41ae:	e9cd 3600 	strd	r3, r6, [sp]
        creds.security = WLanSecurityType(security);
   d41b2:	2303      	movs	r3, #3
   d41b4:	f8ad 3014 	strh.w	r3, [sp, #20]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   d41b8:	2300      	movs	r3, #0
   d41ba:	f8d8 0004 	ldr.w	r0, [r8, #4]
        creds.password_len = passwordLen;
   d41be:	9704      	str	r7, [sp, #16]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   d41c0:	466a      	mov	r2, sp
   d41c2:	4619      	mov	r1, r3
        creds.password = password;
   d41c4:	e9cd 4502 	strd	r4, r5, [sp, #8]
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   d41c8:	f000 fb2a 	bl	d4820 <network_set_credentials>
   d41cc:	b128      	cbz	r0, d41da <_ZL13onSetWifiPassPKhjRKN8particle13BlePeerDeviceEPv+0xb2>
            Serial.println("Failed to set Wifi credentials");
   d41ce:	f001 ffd5 	bl	d617c <_Z16_fetch_usbserialv>
   d41d2:	490b      	ldr	r1, [pc, #44]	; (d4200 <_ZL13onSetWifiPassPKhjRKN8particle13BlePeerDeviceEPv+0xd8>)
   d41d4:	e7b1      	b.n	d413a <_ZL13onSetWifiPassPKhjRKN8particle13BlePeerDeviceEPv+0x12>
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   d41d6:	4634      	mov	r4, r6
   d41d8:	e7df      	b.n	d419a <_ZL13onSetWifiPassPKhjRKN8particle13BlePeerDeviceEPv+0x72>
            Serial.println("WiFi credentials set");
   d41da:	f001 ffcf 	bl	d617c <_Z16_fetch_usbserialv>
   d41de:	4909      	ldr	r1, [pc, #36]	; (d4204 <_ZL13onSetWifiPassPKhjRKN8particle13BlePeerDeviceEPv+0xdc>)
   d41e0:	f001 fddd 	bl	d5d9e <_ZN5Print7printlnEPKc>
            System.reset();
   d41e4:	f000 fbe2 	bl	d49ac <_ZN11SystemClass5resetEv>
   d41e8:	e7a9      	b.n	d413e <_ZL13onSetWifiPassPKhjRKN8particle13BlePeerDeviceEPv+0x16>
   d41ea:	bf00      	nop
   d41ec:	000d6890 	.word	0x000d6890
   d41f0:	2003e7dc 	.word	0x2003e7dc
   d41f4:	000d68a5 	.word	0x000d68a5
   d41f8:	000d68b8 	.word	0x000d68b8
   d41fc:	2003e73c 	.word	0x2003e73c
   d4200:	000d68d9 	.word	0x000d68d9
   d4204:	000d68f8 	.word	0x000d68f8

000d4208 <_Z12configureBLEv>:

void configureBLE()
{
   d4208:	b510      	push	{r4, lr}
   d420a:	b096      	sub	sp, #88	; 0x58
    BLE.addCharacteristic(connectedCharacteristic);
   d420c:	f001 f854 	bl	d52b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4210:	4a29      	ldr	r2, [pc, #164]	; (d42b8 <_Z12configureBLEv+0xb0>)
   d4212:	4601      	mov	r1, r0
   d4214:	a80d      	add	r0, sp, #52	; 0x34
   d4216:	f001 fc6f 	bl	d5af8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d421a:	a80d      	add	r0, sp, #52	; 0x34
   d421c:	f001 f913 	bl	d5446 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(setWifiSSIDCharacteristic);
   d4220:	f001 f84a 	bl	d52b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4224:	4a25      	ldr	r2, [pc, #148]	; (d42bc <_Z12configureBLEv+0xb4>)
   d4226:	4601      	mov	r1, r0
   d4228:	a80d      	add	r0, sp, #52	; 0x34
   d422a:	f001 fc65 	bl	d5af8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d422e:	a80d      	add	r0, sp, #52	; 0x34
   d4230:	f001 f909 	bl	d5446 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(setWifiPassCharacteristic);
   d4234:	f001 f840 	bl	d52b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4238:	4a21      	ldr	r2, [pc, #132]	; (d42c0 <_Z12configureBLEv+0xb8>)
   d423a:	4601      	mov	r1, r0
   d423c:	a80d      	add	r0, sp, #52	; 0x34
   d423e:	f001 fc5b 	bl	d5af8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4242:	a80d      	add	r0, sp, #52	; 0x34
   d4244:	f001 f8ff 	bl	d5446 <_ZN8particle17BleCharacteristicD1Ev>
    BleAdvertisingData advData;
   d4248:	a80d      	add	r0, sp, #52	; 0x34
   d424a:	f000 fec6 	bl	d4fda <_ZN8particle18BleAdvertisingDataC1Ev>
    // Advertise our private service only
    advData.appendServiceUUID(serviceUuid);
   d424e:	491d      	ldr	r1, [pc, #116]	; (d42c4 <_Z12configureBLEv+0xbc>)
   d4250:	a803      	add	r0, sp, #12
   d4252:	f000 fdc5 	bl	d4de0 <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d4256:	a903      	add	r1, sp, #12
   d4258:	a808      	add	r0, sp, #32
   d425a:	f000 fdc1 	bl	d4de0 <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d425e:	a808      	add	r0, sp, #32
   d4260:	f000 fe04 	bl	d4e6c <_ZNK8particle7BleUuid4typeEv>
   d4264:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   d4266:	a808      	add	r0, sp, #32
        if (tempUUID.type() == BleUuidType::SHORT) {
   d4268:	b9ec      	cbnz	r4, d42a6 <_Z12configureBLEv+0x9e>
            uint16_t uuid16 = tempUUID.shorted();
   d426a:	f000 fe1e 	bl	d4eaa <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d426e:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   d4270:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d4274:	2302      	movs	r3, #2
   d4276:	f10d 020a 	add.w	r2, sp, #10
   d427a:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d427c:	a80d      	add	r0, sp, #52	; 0x34
   d427e:	f000 fea1 	bl	d4fc4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    // Continuously advertise when not connected
    BLE.advertise(&advData);
   d4282:	f001 f819 	bl	d52b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4286:	a90d      	add	r1, sp, #52	; 0x34
   d4288:	2200      	movs	r2, #0
   d428a:	f001 f87c 	bl	d5386 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d428e:	f000 faff 	bl	d4890 <spark_cloud_flag_connected>
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   d4292:	2300      	movs	r3, #0
    connectedCharacteristic.setValue(Particle.connected());
   d4294:	f88d 0020 	strb.w	r0, [sp, #32]
   d4298:	2201      	movs	r2, #1
   d429a:	a908      	add	r1, sp, #32
   d429c:	4806      	ldr	r0, [pc, #24]	; (d42b8 <_Z12configureBLEv+0xb0>)
   d429e:	f000 ff03 	bl	d50a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
}
   d42a2:	b016      	add	sp, #88	; 0x58
   d42a4:	bd10      	pop	{r4, pc}
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d42a6:	f000 fe05 	bl	d4eb4 <_ZNK8particle7BleUuid8rawBytesEv>
   d42aa:	2300      	movs	r3, #0
   d42ac:	9300      	str	r3, [sp, #0]
   d42ae:	4602      	mov	r2, r0
   d42b0:	2310      	movs	r3, #16
   d42b2:	2107      	movs	r1, #7
   d42b4:	e7e2      	b.n	d427c <_Z12configureBLEv+0x74>
   d42b6:	bf00      	nop
   d42b8:	2003e734 	.word	0x2003e734
   d42bc:	2003e754 	.word	0x2003e754
   d42c0:	2003e74c 	.word	0x2003e74c
   d42c4:	2003e720 	.word	0x2003e720

000d42c8 <setup>:


void setup()
{
   d42c8:	b508      	push	{r3, lr}
    Serial.begin(115200);
   d42ca:	f001 ff57 	bl	d617c <_Z16_fetch_usbserialv>
   d42ce:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d42d2:	f001 ff47 	bl	d6164 <_ZN9USBSerial5beginEl>
    delay(1000);
   d42d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d42da:	f001 fdd1 	bl	d5e80 <delay>
    Serial.println("BLE WiFi Setup running");
   d42de:	f001 ff4d 	bl	d617c <_Z16_fetch_usbserialv>
   d42e2:	4907      	ldr	r1, [pc, #28]	; (d4300 <setup+0x38>)
   d42e4:	f001 fd5b 	bl	d5d9e <_ZN5Print7printlnEPKc>
    configureBLE();
   d42e8:	f7ff ff8e 	bl	d4208 <_Z12configureBLEv>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d42ec:	f000 fac8 	bl	d4880 <spark_cloud_flag_connect>
    Particle.connect();
    Serial.println("Particle connected");
   d42f0:	f001 ff44 	bl	d617c <_Z16_fetch_usbserialv>
}
   d42f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.println("Particle connected");
   d42f8:	4902      	ldr	r1, [pc, #8]	; (d4304 <setup+0x3c>)
   d42fa:	f001 bd50 	b.w	d5d9e <_ZN5Print7printlnEPKc>
   d42fe:	bf00      	nop
   d4300:	000d690d 	.word	0x000d690d
   d4304:	000d6924 	.word	0x000d6924

000d4308 <loop>:

void loop()
{

}
   d4308:	4770      	bx	lr

000d430a <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d430a:	b5f0      	push	{r4, r5, r6, r7, lr}
   d430c:	4616      	mov	r6, r2
   d430e:	b091      	sub	sp, #68	; 0x44
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d4310:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d4312:	e9c0 2200 	strd	r2, r2, [r0]
   d4316:	4604      	mov	r4, r0
   d4318:	460d      	mov	r5, r1
        BleUuid sUuid(svcUuid);
   d431a:	af0b      	add	r7, sp, #44	; 0x2c
        BleUuid cUuid(charUuid);
   d431c:	4619      	mov	r1, r3
   d431e:	a806      	add	r0, sp, #24
   d4320:	f000 fd5e 	bl	d4de0 <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   d4324:	9916      	ldr	r1, [sp, #88]	; 0x58
   d4326:	4638      	mov	r0, r7
   d4328:	f000 fd5a 	bl	d4de0 <_ZN8particle7BleUuidC1ERKS0_>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d432c:	7833      	ldrb	r3, [r6, #0]
   d432e:	f88d 3014 	strb.w	r3, [sp, #20]
        construct(desc, properties, cUuid, sUuid, callback, context);
   d4332:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d4334:	9302      	str	r3, [sp, #8]
   d4336:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d4338:	4620      	mov	r0, r4
   d433a:	e9cd 7300 	strd	r7, r3, [sp]
   d433e:	aa05      	add	r2, sp, #20
   d4340:	ab06      	add	r3, sp, #24
   d4342:	4629      	mov	r1, r5
   d4344:	f001 fab6 	bl	d58b4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   d4348:	4620      	mov	r0, r4
   d434a:	b011      	add	sp, #68	; 0x44
   d434c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d4350 <_GLOBAL__sub_I_SystemMode>:
   d4350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
SYSTEM_THREAD(ENABLED);
   d4354:	2100      	movs	r1, #0
}
   d4356:	b090      	sub	sp, #64	; 0x40
              error_(SYSTEM_ERROR_NONE) {
   d4358:	4d3c      	ldr	r5, [pc, #240]	; (d444c <_GLOBAL__sub_I_SystemMode+0xfc>)
SYSTEM_MODE(SEMI_AUTOMATIC);
   d435a:	4e3d      	ldr	r6, [pc, #244]	; (d4450 <_GLOBAL__sub_I_SystemMode+0x100>)
const BleUuid serviceUuid("5c1b9a0d-b5be-4a40-8f7a-66b36d0a5176");
   d435c:	4f3d      	ldr	r7, [pc, #244]	; (d4454 <_GLOBAL__sub_I_SystemMode+0x104>)
BleCharacteristic connectedCharacteristic("connected", BleCharacteristicProperty::NOTIFY | BleCharacteristicProperty::READ, BleUuid("fdcf0001-3fed-4ed2-84e6-04bbb9ae04d4"), serviceUuid);
   d435e:	f8df 9134 	ldr.w	r9, [pc, #308]	; d4494 <_GLOBAL__sub_I_SystemMode+0x144>
   d4362:	f8df 8134 	ldr.w	r8, [pc, #308]	; d4498 <_GLOBAL__sub_I_SystemMode+0x148>
BleCharacteristic setWifiSSIDCharacteristic("setWifiSSID", BleCharacteristicProperty::WRITE_WO_RSP, BleUuid("fdcf0002-3fed-4ed2-84e6-04bbb9ae04d4"), serviceUuid, onSetWifiSSID, NULL);
   d4366:	f8df a134 	ldr.w	sl, [pc, #308]	; d449c <_GLOBAL__sub_I_SystemMode+0x14c>
SYSTEM_THREAD(ENABLED);
   d436a:	2001      	movs	r0, #1
   d436c:	f000 f9f2 	bl	d4754 <system_thread_set_state>
   d4370:	2400      	movs	r4, #0
    SleepResult() {}
   d4372:	4b39      	ldr	r3, [pc, #228]	; (d4458 <_GLOBAL__sub_I_SystemMode+0x108>)
   d4374:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   d4376:	602c      	str	r4, [r5, #0]
   d4378:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d437a:	71ac      	strb	r4, [r5, #6]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d437c:	2002      	movs	r0, #2
   d437e:	f000 f9d9 	bl	d4734 <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC);
   d4382:	4632      	mov	r2, r6
   d4384:	4935      	ldr	r1, [pc, #212]	; (d445c <_GLOBAL__sub_I_SystemMode+0x10c>)
   d4386:	4628      	mov	r0, r5
   d4388:	f002 f8a8 	bl	d64dc <__aeabi_atexit>
const BleUuid serviceUuid("5c1b9a0d-b5be-4a40-8f7a-66b36d0a5176");
   d438c:	4934      	ldr	r1, [pc, #208]	; (d4460 <_GLOBAL__sub_I_SystemMode+0x110>)
   d438e:	4638      	mov	r0, r7
   d4390:	f000 fe0c 	bl	d4fac <_ZN8particle7BleUuidC1EPKc>
BleCharacteristic connectedCharacteristic("connected", BleCharacteristicProperty::NOTIFY | BleCharacteristicProperty::READ, BleUuid("fdcf0001-3fed-4ed2-84e6-04bbb9ae04d4"), serviceUuid);
   d4394:	ad0b      	add	r5, sp, #44	; 0x2c
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(ValueType value)
        : value_(value) {
   d4396:	2312      	movs	r3, #18
   d4398:	4932      	ldr	r1, [pc, #200]	; (d4464 <_GLOBAL__sub_I_SystemMode+0x114>)
   d439a:	f88d 3014 	strb.w	r3, [sp, #20]
   d439e:	a806      	add	r0, sp, #24
   d43a0:	f000 fe04 	bl	d4fac <_ZN8particle7BleUuidC1EPKc>
   d43a4:	4639      	mov	r1, r7
   d43a6:	4628      	mov	r0, r5
   d43a8:	f000 fd1a 	bl	d4de0 <_ZN8particle7BleUuidC1ERKS0_>
   d43ac:	ab06      	add	r3, sp, #24
   d43ae:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d43b2:	aa05      	add	r2, sp, #20
   d43b4:	492c      	ldr	r1, [pc, #176]	; (d4468 <_GLOBAL__sub_I_SystemMode+0x118>)
   d43b6:	9500      	str	r5, [sp, #0]
   d43b8:	4648      	mov	r0, r9
   d43ba:	f7ff ffa6 	bl	d430a <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d43be:	4632      	mov	r2, r6
   d43c0:	4641      	mov	r1, r8
   d43c2:	4648      	mov	r0, r9
   d43c4:	f002 f88a 	bl	d64dc <__aeabi_atexit>
    value_ = static_cast<ValueType>(value);
   d43c8:	f04f 0904 	mov.w	r9, #4
BleCharacteristic setWifiSSIDCharacteristic("setWifiSSID", BleCharacteristicProperty::WRITE_WO_RSP, BleUuid("fdcf0002-3fed-4ed2-84e6-04bbb9ae04d4"), serviceUuid, onSetWifiSSID, NULL);
   d43cc:	4927      	ldr	r1, [pc, #156]	; (d446c <_GLOBAL__sub_I_SystemMode+0x11c>)
   d43ce:	f88d 9014 	strb.w	r9, [sp, #20]
   d43d2:	a806      	add	r0, sp, #24
   d43d4:	f000 fdea 	bl	d4fac <_ZN8particle7BleUuidC1EPKc>
   d43d8:	4639      	mov	r1, r7
   d43da:	4628      	mov	r0, r5
   d43dc:	f000 fd00 	bl	d4de0 <_ZN8particle7BleUuidC1ERKS0_>
   d43e0:	4b23      	ldr	r3, [pc, #140]	; (d4470 <_GLOBAL__sub_I_SystemMode+0x120>)
   d43e2:	9402      	str	r4, [sp, #8]
   d43e4:	e9cd 5300 	strd	r5, r3, [sp]
   d43e8:	aa05      	add	r2, sp, #20
   d43ea:	ab06      	add	r3, sp, #24
   d43ec:	4921      	ldr	r1, [pc, #132]	; (d4474 <_GLOBAL__sub_I_SystemMode+0x124>)
   d43ee:	4650      	mov	r0, sl
   d43f0:	f7ff ff8b 	bl	d430a <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d43f4:	4632      	mov	r2, r6
   d43f6:	4641      	mov	r1, r8
   d43f8:	4650      	mov	r0, sl
   d43fa:	f002 f86f 	bl	d64dc <__aeabi_atexit>
BleCharacteristic setWifiPassCharacteristic("setWifiPass", BleCharacteristicProperty::WRITE_WO_RSP, BleUuid("fdcf0003-3fed-4ed2-84e6-04bbb9ae04d4"), serviceUuid, onSetWifiPass, NULL);
   d43fe:	491e      	ldr	r1, [pc, #120]	; (d4478 <_GLOBAL__sub_I_SystemMode+0x128>)
   d4400:	f88d 9014 	strb.w	r9, [sp, #20]
   d4404:	a806      	add	r0, sp, #24
   d4406:	f000 fdd1 	bl	d4fac <_ZN8particle7BleUuidC1EPKc>
   d440a:	4639      	mov	r1, r7
   d440c:	4628      	mov	r0, r5
   d440e:	f000 fce7 	bl	d4de0 <_ZN8particle7BleUuidC1ERKS0_>
   d4412:	4f1a      	ldr	r7, [pc, #104]	; (d447c <_GLOBAL__sub_I_SystemMode+0x12c>)
   d4414:	4b1a      	ldr	r3, [pc, #104]	; (d4480 <_GLOBAL__sub_I_SystemMode+0x130>)
   d4416:	9402      	str	r4, [sp, #8]
   d4418:	e9cd 5300 	strd	r5, r3, [sp]
String setSSID;
   d441c:	4c19      	ldr	r4, [pc, #100]	; (d4484 <_GLOBAL__sub_I_SystemMode+0x134>)
BleCharacteristic setWifiPassCharacteristic("setWifiPass", BleCharacteristicProperty::WRITE_WO_RSP, BleUuid("fdcf0003-3fed-4ed2-84e6-04bbb9ae04d4"), serviceUuid, onSetWifiPass, NULL);
   d441e:	491a      	ldr	r1, [pc, #104]	; (d4488 <_GLOBAL__sub_I_SystemMode+0x138>)
   d4420:	ab06      	add	r3, sp, #24
   d4422:	aa05      	add	r2, sp, #20
   d4424:	4638      	mov	r0, r7
   d4426:	f7ff ff70 	bl	d430a <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d442a:	4632      	mov	r2, r6
   d442c:	4641      	mov	r1, r8
   d442e:	4638      	mov	r0, r7
   d4430:	f002 f854 	bl	d64dc <__aeabi_atexit>
String setSSID;
   d4434:	4915      	ldr	r1, [pc, #84]	; (d448c <_GLOBAL__sub_I_SystemMode+0x13c>)
   d4436:	4620      	mov	r0, r4
   d4438:	f000 fb25 	bl	d4a86 <_ZN6StringC1EPKc>
   d443c:	4914      	ldr	r1, [pc, #80]	; (d4490 <_GLOBAL__sub_I_SystemMode+0x140>)
   d443e:	4632      	mov	r2, r6
   d4440:	4620      	mov	r0, r4
   d4442:	f002 f84b 	bl	d64dc <__aeabi_atexit>
}
   d4446:	b010      	add	sp, #64	; 0x40
   d4448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d444c:	2003e714 	.word	0x2003e714
   d4450:	2003e710 	.word	0x2003e710
   d4454:	2003e720 	.word	0x2003e720
   d4458:	ffff0000 	.word	0xffff0000
   d445c:	000d40ab 	.word	0x000d40ab
   d4460:	000d6937 	.word	0x000d6937
   d4464:	000d695c 	.word	0x000d695c
   d4468:	000d692d 	.word	0x000d692d
   d446c:	000d6981 	.word	0x000d6981
   d4470:	000d40d9 	.word	0x000d40d9
   d4474:	000d69a6 	.word	0x000d69a6
   d4478:	000d69b2 	.word	0x000d69b2
   d447c:	2003e74c 	.word	0x2003e74c
   d4480:	000d4129 	.word	0x000d4129
   d4484:	2003e73c 	.word	0x2003e73c
   d4488:	000d69d7 	.word	0x000d69d7
   d448c:	000d688f 	.word	0x000d688f
   d4490:	000d49f1 	.word	0x000d49f1
   d4494:	2003e734 	.word	0x2003e734
   d4498:	000d5447 	.word	0x000d5447
   d449c:	2003e754 	.word	0x2003e754

000d44a0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d44a0:	b508      	push	{r3, lr}
   d44a2:	4b02      	ldr	r3, [pc, #8]	; (d44ac <netdb_freeaddrinfo+0xc>)
   d44a4:	681b      	ldr	r3, [r3, #0]
   d44a6:	689b      	ldr	r3, [r3, #8]
   d44a8:	9301      	str	r3, [sp, #4]
   d44aa:	bd08      	pop	{r3, pc}
   d44ac:	00030268 	.word	0x00030268

000d44b0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d44b0:	b508      	push	{r3, lr}
   d44b2:	4b02      	ldr	r3, [pc, #8]	; (d44bc <netdb_getaddrinfo+0xc>)
   d44b4:	681b      	ldr	r3, [r3, #0]
   d44b6:	68db      	ldr	r3, [r3, #12]
   d44b8:	9301      	str	r3, [sp, #4]
   d44ba:	bd08      	pop	{r3, pc}
   d44bc:	00030268 	.word	0x00030268

000d44c0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d44c0:	b508      	push	{r3, lr}
   d44c2:	4b02      	ldr	r3, [pc, #8]	; (d44cc <HAL_RNG_GetRandomNumber+0xc>)
   d44c4:	681b      	ldr	r3, [r3, #0]
   d44c6:	685b      	ldr	r3, [r3, #4]
   d44c8:	9301      	str	r3, [sp, #4]
   d44ca:	bd08      	pop	{r3, pc}
   d44cc:	00030218 	.word	0x00030218

000d44d0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d44d0:	b508      	push	{r3, lr}
   d44d2:	4b02      	ldr	r3, [pc, #8]	; (d44dc <HAL_Delay_Microseconds+0xc>)
   d44d4:	681b      	ldr	r3, [r3, #0]
   d44d6:	68db      	ldr	r3, [r3, #12]
   d44d8:	9301      	str	r3, [sp, #4]
   d44da:	bd08      	pop	{r3, pc}
   d44dc:	00030218 	.word	0x00030218

000d44e0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d44e0:	b508      	push	{r3, lr}
   d44e2:	4b02      	ldr	r3, [pc, #8]	; (d44ec <HAL_Timer_Get_Milli_Seconds+0xc>)
   d44e4:	681b      	ldr	r3, [r3, #0]
   d44e6:	695b      	ldr	r3, [r3, #20]
   d44e8:	9301      	str	r3, [sp, #4]
   d44ea:	bd08      	pop	{r3, pc}
   d44ec:	00030218 	.word	0x00030218

000d44f0 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d44f0:	b508      	push	{r3, lr}
   d44f2:	4b02      	ldr	r3, [pc, #8]	; (d44fc <hal_ble_stack_init+0xc>)
   d44f4:	681b      	ldr	r3, [r3, #0]
   d44f6:	689b      	ldr	r3, [r3, #8]
   d44f8:	9301      	str	r3, [sp, #4]
   d44fa:	bd08      	pop	{r3, pc}
   d44fc:	00030278 	.word	0x00030278

000d4500 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d4500:	b508      	push	{r3, lr}
   d4502:	4b02      	ldr	r3, [pc, #8]	; (d450c <hal_ble_gap_set_advertising_data+0xc>)
   d4504:	681b      	ldr	r3, [r3, #0]
   d4506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4508:	9301      	str	r3, [sp, #4]
   d450a:	bd08      	pop	{r3, pc}
   d450c:	00030278 	.word	0x00030278

000d4510 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d4510:	b508      	push	{r3, lr}
   d4512:	4b02      	ldr	r3, [pc, #8]	; (d451c <hal_ble_gap_set_scan_response_data+0xc>)
   d4514:	681b      	ldr	r3, [r3, #0]
   d4516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4518:	9301      	str	r3, [sp, #4]
   d451a:	bd08      	pop	{r3, pc}
   d451c:	00030278 	.word	0x00030278

000d4520 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d4520:	b508      	push	{r3, lr}
   d4522:	4b02      	ldr	r3, [pc, #8]	; (d452c <hal_ble_gap_start_advertising+0xc>)
   d4524:	681b      	ldr	r3, [r3, #0]
   d4526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d4528:	9301      	str	r3, [sp, #4]
   d452a:	bd08      	pop	{r3, pc}
   d452c:	00030278 	.word	0x00030278

000d4530 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d4530:	b508      	push	{r3, lr}
   d4532:	4b03      	ldr	r3, [pc, #12]	; (d4540 <hal_ble_gap_disconnect+0x10>)
   d4534:	681b      	ldr	r3, [r3, #0]
   d4536:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d453a:	9301      	str	r3, [sp, #4]
   d453c:	bd08      	pop	{r3, pc}
   d453e:	0000      	.short	0x0000
   d4540:	00030278 	.word	0x00030278

000d4544 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d4544:	b508      	push	{r3, lr}
   d4546:	4b03      	ldr	r3, [pc, #12]	; (d4554 <hal_ble_gatt_server_add_service+0x10>)
   d4548:	681b      	ldr	r3, [r3, #0]
   d454a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d454e:	9301      	str	r3, [sp, #4]
   d4550:	bd08      	pop	{r3, pc}
   d4552:	0000      	.short	0x0000
   d4554:	00030278 	.word	0x00030278

000d4558 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4558:	b508      	push	{r3, lr}
   d455a:	4b03      	ldr	r3, [pc, #12]	; (d4568 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d455c:	681b      	ldr	r3, [r3, #0]
   d455e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d4562:	9301      	str	r3, [sp, #4]
   d4564:	bd08      	pop	{r3, pc}
   d4566:	0000      	.short	0x0000
   d4568:	00030278 	.word	0x00030278

000d456c <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d456c:	b508      	push	{r3, lr}
   d456e:	4b03      	ldr	r3, [pc, #12]	; (d457c <hal_ble_gatt_client_write_with_response+0x10>)
   d4570:	681b      	ldr	r3, [r3, #0]
   d4572:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d4576:	9301      	str	r3, [sp, #4]
   d4578:	bd08      	pop	{r3, pc}
   d457a:	0000      	.short	0x0000
   d457c:	00030278 	.word	0x00030278

000d4580 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4580:	b508      	push	{r3, lr}
   d4582:	4b03      	ldr	r3, [pc, #12]	; (d4590 <hal_ble_gatt_client_write_without_response+0x10>)
   d4584:	681b      	ldr	r3, [r3, #0]
   d4586:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d458a:	9301      	str	r3, [sp, #4]
   d458c:	bd08      	pop	{r3, pc}
   d458e:	0000      	.short	0x0000
   d4590:	00030278 	.word	0x00030278

000d4594 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d4594:	b508      	push	{r3, lr}
   d4596:	4b03      	ldr	r3, [pc, #12]	; (d45a4 <hal_ble_gatt_server_add_characteristic+0x10>)
   d4598:	681b      	ldr	r3, [r3, #0]
   d459a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d459e:	9301      	str	r3, [sp, #4]
   d45a0:	bd08      	pop	{r3, pc}
   d45a2:	0000      	.short	0x0000
   d45a4:	00030278 	.word	0x00030278

000d45a8 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d45a8:	b508      	push	{r3, lr}
   d45aa:	4b03      	ldr	r3, [pc, #12]	; (d45b8 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d45ac:	681b      	ldr	r3, [r3, #0]
   d45ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d45b2:	9301      	str	r3, [sp, #4]
   d45b4:	bd08      	pop	{r3, pc}
   d45b6:	0000      	.short	0x0000
   d45b8:	00030278 	.word	0x00030278

000d45bc <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d45bc:	b508      	push	{r3, lr}
   d45be:	4b03      	ldr	r3, [pc, #12]	; (d45cc <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d45c0:	681b      	ldr	r3, [r3, #0]
   d45c2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d45c6:	9301      	str	r3, [sp, #4]
   d45c8:	bd08      	pop	{r3, pc}
   d45ca:	0000      	.short	0x0000
   d45cc:	00030278 	.word	0x00030278

000d45d0 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d45d0:	b508      	push	{r3, lr}
   d45d2:	4b03      	ldr	r3, [pc, #12]	; (d45e0 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d45d4:	681b      	ldr	r3, [r3, #0]
   d45d6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d45da:	9301      	str	r3, [sp, #4]
   d45dc:	bd08      	pop	{r3, pc}
   d45de:	0000      	.short	0x0000
   d45e0:	00030278 	.word	0x00030278

000d45e4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d45e4:	b508      	push	{r3, lr}
   d45e6:	4b02      	ldr	r3, [pc, #8]	; (d45f0 <os_mutex_recursive_create+0xc>)
   d45e8:	681b      	ldr	r3, [r3, #0]
   d45ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d45ec:	9301      	str	r3, [sp, #4]
   d45ee:	bd08      	pop	{r3, pc}
   d45f0:	00030248 	.word	0x00030248

000d45f4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d45f4:	b508      	push	{r3, lr}
   d45f6:	4b02      	ldr	r3, [pc, #8]	; (d4600 <os_mutex_recursive_destroy+0xc>)
   d45f8:	681b      	ldr	r3, [r3, #0]
   d45fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d45fc:	9301      	str	r3, [sp, #4]
   d45fe:	bd08      	pop	{r3, pc}
   d4600:	00030248 	.word	0x00030248

000d4604 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4604:	b508      	push	{r3, lr}
   d4606:	4b02      	ldr	r3, [pc, #8]	; (d4610 <os_mutex_recursive_lock+0xc>)
   d4608:	681b      	ldr	r3, [r3, #0]
   d460a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d460c:	9301      	str	r3, [sp, #4]
   d460e:	bd08      	pop	{r3, pc}
   d4610:	00030248 	.word	0x00030248

000d4614 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4614:	b508      	push	{r3, lr}
   d4616:	4b02      	ldr	r3, [pc, #8]	; (d4620 <os_mutex_recursive_unlock+0xc>)
   d4618:	681b      	ldr	r3, [r3, #0]
   d461a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d461c:	9301      	str	r3, [sp, #4]
   d461e:	bd08      	pop	{r3, pc}
   d4620:	00030248 	.word	0x00030248

000d4624 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4624:	b508      	push	{r3, lr}
   d4626:	4b02      	ldr	r3, [pc, #8]	; (d4630 <inet_inet_ntop+0xc>)
   d4628:	681b      	ldr	r3, [r3, #0]
   d462a:	695b      	ldr	r3, [r3, #20]
   d462c:	9301      	str	r3, [sp, #4]
   d462e:	bd08      	pop	{r3, pc}
   d4630:	00030264 	.word	0x00030264

000d4634 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4634:	b508      	push	{r3, lr}
   d4636:	4b02      	ldr	r3, [pc, #8]	; (d4640 <hal_usart_init+0xc>)
   d4638:	681b      	ldr	r3, [r3, #0]
   d463a:	681b      	ldr	r3, [r3, #0]
   d463c:	9301      	str	r3, [sp, #4]
   d463e:	bd08      	pop	{r3, pc}
   d4640:	0003023c 	.word	0x0003023c

000d4644 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4644:	b508      	push	{r3, lr}
   d4646:	4b02      	ldr	r3, [pc, #8]	; (d4650 <hal_usart_write+0xc>)
   d4648:	681b      	ldr	r3, [r3, #0]
   d464a:	68db      	ldr	r3, [r3, #12]
   d464c:	9301      	str	r3, [sp, #4]
   d464e:	bd08      	pop	{r3, pc}
   d4650:	0003023c 	.word	0x0003023c

000d4654 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4654:	b508      	push	{r3, lr}
   d4656:	4b02      	ldr	r3, [pc, #8]	; (d4660 <hal_usart_available+0xc>)
   d4658:	681b      	ldr	r3, [r3, #0]
   d465a:	691b      	ldr	r3, [r3, #16]
   d465c:	9301      	str	r3, [sp, #4]
   d465e:	bd08      	pop	{r3, pc}
   d4660:	0003023c 	.word	0x0003023c

000d4664 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4664:	b508      	push	{r3, lr}
   d4666:	4b02      	ldr	r3, [pc, #8]	; (d4670 <hal_usart_read+0xc>)
   d4668:	681b      	ldr	r3, [r3, #0]
   d466a:	695b      	ldr	r3, [r3, #20]
   d466c:	9301      	str	r3, [sp, #4]
   d466e:	bd08      	pop	{r3, pc}
   d4670:	0003023c 	.word	0x0003023c

000d4674 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4674:	b508      	push	{r3, lr}
   d4676:	4b02      	ldr	r3, [pc, #8]	; (d4680 <hal_usart_peek+0xc>)
   d4678:	681b      	ldr	r3, [r3, #0]
   d467a:	699b      	ldr	r3, [r3, #24]
   d467c:	9301      	str	r3, [sp, #4]
   d467e:	bd08      	pop	{r3, pc}
   d4680:	0003023c 	.word	0x0003023c

000d4684 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4684:	b508      	push	{r3, lr}
   d4686:	4b02      	ldr	r3, [pc, #8]	; (d4690 <hal_usart_flush+0xc>)
   d4688:	681b      	ldr	r3, [r3, #0]
   d468a:	69db      	ldr	r3, [r3, #28]
   d468c:	9301      	str	r3, [sp, #4]
   d468e:	bd08      	pop	{r3, pc}
   d4690:	0003023c 	.word	0x0003023c

000d4694 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4694:	b508      	push	{r3, lr}
   d4696:	4b02      	ldr	r3, [pc, #8]	; (d46a0 <hal_usart_available_data_for_write+0xc>)
   d4698:	681b      	ldr	r3, [r3, #0]
   d469a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d469c:	9301      	str	r3, [sp, #4]
   d469e:	bd08      	pop	{r3, pc}
   d46a0:	0003023c 	.word	0x0003023c

000d46a4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d46a4:	b508      	push	{r3, lr}
   d46a6:	4b02      	ldr	r3, [pc, #8]	; (d46b0 <HAL_USB_USART_Init+0xc>)
   d46a8:	681b      	ldr	r3, [r3, #0]
   d46aa:	681b      	ldr	r3, [r3, #0]
   d46ac:	9301      	str	r3, [sp, #4]
   d46ae:	bd08      	pop	{r3, pc}
   d46b0:	0003024c 	.word	0x0003024c

000d46b4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d46b4:	b508      	push	{r3, lr}
   d46b6:	4b02      	ldr	r3, [pc, #8]	; (d46c0 <HAL_USB_USART_Begin+0xc>)
   d46b8:	681b      	ldr	r3, [r3, #0]
   d46ba:	685b      	ldr	r3, [r3, #4]
   d46bc:	9301      	str	r3, [sp, #4]
   d46be:	bd08      	pop	{r3, pc}
   d46c0:	0003024c 	.word	0x0003024c

000d46c4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d46c4:	b508      	push	{r3, lr}
   d46c6:	4b02      	ldr	r3, [pc, #8]	; (d46d0 <HAL_USB_USART_Available_Data+0xc>)
   d46c8:	681b      	ldr	r3, [r3, #0]
   d46ca:	691b      	ldr	r3, [r3, #16]
   d46cc:	9301      	str	r3, [sp, #4]
   d46ce:	bd08      	pop	{r3, pc}
   d46d0:	0003024c 	.word	0x0003024c

000d46d4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d46d4:	b508      	push	{r3, lr}
   d46d6:	4b02      	ldr	r3, [pc, #8]	; (d46e0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d46d8:	681b      	ldr	r3, [r3, #0]
   d46da:	695b      	ldr	r3, [r3, #20]
   d46dc:	9301      	str	r3, [sp, #4]
   d46de:	bd08      	pop	{r3, pc}
   d46e0:	0003024c 	.word	0x0003024c

000d46e4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d46e4:	b508      	push	{r3, lr}
   d46e6:	4b02      	ldr	r3, [pc, #8]	; (d46f0 <HAL_USB_USART_Receive_Data+0xc>)
   d46e8:	681b      	ldr	r3, [r3, #0]
   d46ea:	699b      	ldr	r3, [r3, #24]
   d46ec:	9301      	str	r3, [sp, #4]
   d46ee:	bd08      	pop	{r3, pc}
   d46f0:	0003024c 	.word	0x0003024c

000d46f4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d46f4:	b508      	push	{r3, lr}
   d46f6:	4b02      	ldr	r3, [pc, #8]	; (d4700 <HAL_USB_USART_Send_Data+0xc>)
   d46f8:	681b      	ldr	r3, [r3, #0]
   d46fa:	69db      	ldr	r3, [r3, #28]
   d46fc:	9301      	str	r3, [sp, #4]
   d46fe:	bd08      	pop	{r3, pc}
   d4700:	0003024c 	.word	0x0003024c

000d4704 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4704:	b508      	push	{r3, lr}
   d4706:	4b02      	ldr	r3, [pc, #8]	; (d4710 <HAL_USB_USART_Flush_Data+0xc>)
   d4708:	681b      	ldr	r3, [r3, #0]
   d470a:	6a1b      	ldr	r3, [r3, #32]
   d470c:	9301      	str	r3, [sp, #4]
   d470e:	bd08      	pop	{r3, pc}
   d4710:	0003024c 	.word	0x0003024c

000d4714 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4714:	b508      	push	{r3, lr}
   d4716:	4b02      	ldr	r3, [pc, #8]	; (d4720 <panic_+0xc>)
   d4718:	681b      	ldr	r3, [r3, #0]
   d471a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d471c:	9301      	str	r3, [sp, #4]
   d471e:	bd08      	pop	{r3, pc}
   d4720:	00030260 	.word	0x00030260

000d4724 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4724:	b508      	push	{r3, lr}
   d4726:	4b02      	ldr	r3, [pc, #8]	; (d4730 <log_message+0xc>)
   d4728:	681b      	ldr	r3, [r3, #0]
   d472a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d472c:	9301      	str	r3, [sp, #4]
   d472e:	bd08      	pop	{r3, pc}
   d4730:	00030260 	.word	0x00030260

000d4734 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4734:	b508      	push	{r3, lr}
   d4736:	4b02      	ldr	r3, [pc, #8]	; (d4740 <set_system_mode+0xc>)
   d4738:	681b      	ldr	r3, [r3, #0]
   d473a:	685b      	ldr	r3, [r3, #4]
   d473c:	9301      	str	r3, [sp, #4]
   d473e:	bd08      	pop	{r3, pc}
   d4740:	00030220 	.word	0x00030220

000d4744 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4744:	b508      	push	{r3, lr}
   d4746:	4b02      	ldr	r3, [pc, #8]	; (d4750 <system_delay_ms+0xc>)
   d4748:	681b      	ldr	r3, [r3, #0]
   d474a:	695b      	ldr	r3, [r3, #20]
   d474c:	9301      	str	r3, [sp, #4]
   d474e:	bd08      	pop	{r3, pc}
   d4750:	00030220 	.word	0x00030220

000d4754 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d4754:	b508      	push	{r3, lr}
   d4756:	4b02      	ldr	r3, [pc, #8]	; (d4760 <system_thread_set_state+0xc>)
   d4758:	681b      	ldr	r3, [r3, #0]
   d475a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d475c:	9301      	str	r3, [sp, #4]
   d475e:	bd08      	pop	{r3, pc}
   d4760:	00030220 	.word	0x00030220

000d4764 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4764:	b508      	push	{r3, lr}
   d4766:	4b03      	ldr	r3, [pc, #12]	; (d4774 <system_ctrl_set_app_request_handler+0x10>)
   d4768:	681b      	ldr	r3, [r3, #0]
   d476a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d476e:	9301      	str	r3, [sp, #4]
   d4770:	bd08      	pop	{r3, pc}
   d4772:	0000      	.short	0x0000
   d4774:	00030220 	.word	0x00030220

000d4778 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4778:	b508      	push	{r3, lr}
   d477a:	4b03      	ldr	r3, [pc, #12]	; (d4788 <system_ctrl_set_result+0x10>)
   d477c:	681b      	ldr	r3, [r3, #0]
   d477e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4782:	9301      	str	r3, [sp, #4]
   d4784:	bd08      	pop	{r3, pc}
   d4786:	0000      	.short	0x0000
   d4788:	00030220 	.word	0x00030220

000d478c <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d478c:	b508      	push	{r3, lr}
   d478e:	4b03      	ldr	r3, [pc, #12]	; (d479c <system_reset+0x10>)
   d4790:	681b      	ldr	r3, [r3, #0]
   d4792:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d4796:	9301      	str	r3, [sp, #4]
   d4798:	bd08      	pop	{r3, pc}
   d479a:	0000      	.short	0x0000
   d479c:	00030220 	.word	0x00030220

000d47a0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d47a0:	b508      	push	{r3, lr}
   d47a2:	4b02      	ldr	r3, [pc, #8]	; (d47ac <network_connect+0xc>)
   d47a4:	681b      	ldr	r3, [r3, #0]
   d47a6:	685b      	ldr	r3, [r3, #4]
   d47a8:	9301      	str	r3, [sp, #4]
   d47aa:	bd08      	pop	{r3, pc}
   d47ac:	00030240 	.word	0x00030240

000d47b0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d47b0:	b508      	push	{r3, lr}
   d47b2:	4b02      	ldr	r3, [pc, #8]	; (d47bc <network_connecting+0xc>)
   d47b4:	681b      	ldr	r3, [r3, #0]
   d47b6:	689b      	ldr	r3, [r3, #8]
   d47b8:	9301      	str	r3, [sp, #4]
   d47ba:	bd08      	pop	{r3, pc}
   d47bc:	00030240 	.word	0x00030240

000d47c0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d47c0:	b508      	push	{r3, lr}
   d47c2:	4b02      	ldr	r3, [pc, #8]	; (d47cc <network_disconnect+0xc>)
   d47c4:	681b      	ldr	r3, [r3, #0]
   d47c6:	68db      	ldr	r3, [r3, #12]
   d47c8:	9301      	str	r3, [sp, #4]
   d47ca:	bd08      	pop	{r3, pc}
   d47cc:	00030240 	.word	0x00030240

000d47d0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d47d0:	b508      	push	{r3, lr}
   d47d2:	4b02      	ldr	r3, [pc, #8]	; (d47dc <network_ready+0xc>)
   d47d4:	681b      	ldr	r3, [r3, #0]
   d47d6:	691b      	ldr	r3, [r3, #16]
   d47d8:	9301      	str	r3, [sp, #4]
   d47da:	bd08      	pop	{r3, pc}
   d47dc:	00030240 	.word	0x00030240

000d47e0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d47e0:	b508      	push	{r3, lr}
   d47e2:	4b02      	ldr	r3, [pc, #8]	; (d47ec <network_on+0xc>)
   d47e4:	681b      	ldr	r3, [r3, #0]
   d47e6:	695b      	ldr	r3, [r3, #20]
   d47e8:	9301      	str	r3, [sp, #4]
   d47ea:	bd08      	pop	{r3, pc}
   d47ec:	00030240 	.word	0x00030240

000d47f0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d47f0:	b508      	push	{r3, lr}
   d47f2:	4b02      	ldr	r3, [pc, #8]	; (d47fc <network_off+0xc>)
   d47f4:	681b      	ldr	r3, [r3, #0]
   d47f6:	699b      	ldr	r3, [r3, #24]
   d47f8:	9301      	str	r3, [sp, #4]
   d47fa:	bd08      	pop	{r3, pc}
   d47fc:	00030240 	.word	0x00030240

000d4800 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4800:	b508      	push	{r3, lr}
   d4802:	4b02      	ldr	r3, [pc, #8]	; (d480c <network_listen+0xc>)
   d4804:	681b      	ldr	r3, [r3, #0]
   d4806:	69db      	ldr	r3, [r3, #28]
   d4808:	9301      	str	r3, [sp, #4]
   d480a:	bd08      	pop	{r3, pc}
   d480c:	00030240 	.word	0x00030240

000d4810 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4810:	b508      	push	{r3, lr}
   d4812:	4b02      	ldr	r3, [pc, #8]	; (d481c <network_listening+0xc>)
   d4814:	681b      	ldr	r3, [r3, #0]
   d4816:	6a1b      	ldr	r3, [r3, #32]
   d4818:	9301      	str	r3, [sp, #4]
   d481a:	bd08      	pop	{r3, pc}
   d481c:	00030240 	.word	0x00030240

000d4820 <network_set_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   d4820:	b508      	push	{r3, lr}
   d4822:	4b02      	ldr	r3, [pc, #8]	; (d482c <network_set_credentials+0xc>)
   d4824:	681b      	ldr	r3, [r3, #0]
   d4826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4828:	9301      	str	r3, [sp, #4]
   d482a:	bd08      	pop	{r3, pc}
   d482c:	00030240 	.word	0x00030240

000d4830 <network_clear_credentials>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
   d4830:	b508      	push	{r3, lr}
   d4832:	4b02      	ldr	r3, [pc, #8]	; (d483c <network_clear_credentials+0xc>)
   d4834:	681b      	ldr	r3, [r3, #0]
   d4836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4838:	9301      	str	r3, [sp, #4]
   d483a:	bd08      	pop	{r3, pc}
   d483c:	00030240 	.word	0x00030240

000d4840 <network_set_listen_timeout>:
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4840:	b508      	push	{r3, lr}
   d4842:	4b02      	ldr	r3, [pc, #8]	; (d484c <network_set_listen_timeout+0xc>)
   d4844:	681b      	ldr	r3, [r3, #0]
   d4846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4848:	9301      	str	r3, [sp, #4]
   d484a:	bd08      	pop	{r3, pc}
   d484c:	00030240 	.word	0x00030240

000d4850 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4850:	b508      	push	{r3, lr}
   d4852:	4b02      	ldr	r3, [pc, #8]	; (d485c <network_get_listen_timeout+0xc>)
   d4854:	681b      	ldr	r3, [r3, #0]
   d4856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4858:	9301      	str	r3, [sp, #4]
   d485a:	bd08      	pop	{r3, pc}
   d485c:	00030240 	.word	0x00030240

000d4860 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4860:	b508      	push	{r3, lr}
   d4862:	4b02      	ldr	r3, [pc, #8]	; (d486c <network_is_on+0xc>)
   d4864:	681b      	ldr	r3, [r3, #0]
   d4866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4868:	9301      	str	r3, [sp, #4]
   d486a:	bd08      	pop	{r3, pc}
   d486c:	00030240 	.word	0x00030240

000d4870 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4870:	b508      	push	{r3, lr}
   d4872:	4b02      	ldr	r3, [pc, #8]	; (d487c <network_is_off+0xc>)
   d4874:	681b      	ldr	r3, [r3, #0]
   d4876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4878:	9301      	str	r3, [sp, #4]
   d487a:	bd08      	pop	{r3, pc}
   d487c:	00030240 	.word	0x00030240

000d4880 <spark_cloud_flag_connect>:
DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d4880:	b508      	push	{r3, lr}
   d4882:	4b02      	ldr	r3, [pc, #8]	; (d488c <spark_cloud_flag_connect+0xc>)
   d4884:	681b      	ldr	r3, [r3, #0]
   d4886:	68db      	ldr	r3, [r3, #12]
   d4888:	9301      	str	r3, [sp, #4]
   d488a:	bd08      	pop	{r3, pc}
   d488c:	00030244 	.word	0x00030244

000d4890 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4890:	b508      	push	{r3, lr}
   d4892:	4b02      	ldr	r3, [pc, #8]	; (d489c <spark_cloud_flag_connected+0xc>)
   d4894:	681b      	ldr	r3, [r3, #0]
   d4896:	695b      	ldr	r3, [r3, #20]
   d4898:	9301      	str	r3, [sp, #4]
   d489a:	bd08      	pop	{r3, pc}
   d489c:	00030244 	.word	0x00030244

000d48a0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d48a0:	b508      	push	{r3, lr}
   d48a2:	4b02      	ldr	r3, [pc, #8]	; (d48ac <spark_set_random_seed_from_cloud_handler+0xc>)
   d48a4:	681b      	ldr	r3, [r3, #0]
   d48a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d48a8:	9301      	str	r3, [sp, #4]
   d48aa:	bd08      	pop	{r3, pc}
   d48ac:	00030244 	.word	0x00030244

000d48b0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d48b0:	b508      	push	{r3, lr}
   d48b2:	4b02      	ldr	r3, [pc, #8]	; (d48bc <malloc+0xc>)
   d48b4:	681b      	ldr	r3, [r3, #0]
   d48b6:	681b      	ldr	r3, [r3, #0]
   d48b8:	9301      	str	r3, [sp, #4]
   d48ba:	bd08      	pop	{r3, pc}
   d48bc:	0003021c 	.word	0x0003021c

000d48c0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d48c0:	b508      	push	{r3, lr}
   d48c2:	4b02      	ldr	r3, [pc, #8]	; (d48cc <free+0xc>)
   d48c4:	681b      	ldr	r3, [r3, #0]
   d48c6:	685b      	ldr	r3, [r3, #4]
   d48c8:	9301      	str	r3, [sp, #4]
   d48ca:	bd08      	pop	{r3, pc}
   d48cc:	0003021c 	.word	0x0003021c

000d48d0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d48d0:	b508      	push	{r3, lr}
   d48d2:	4b02      	ldr	r3, [pc, #8]	; (d48dc <realloc+0xc>)
   d48d4:	681b      	ldr	r3, [r3, #0]
   d48d6:	689b      	ldr	r3, [r3, #8]
   d48d8:	9301      	str	r3, [sp, #4]
   d48da:	bd08      	pop	{r3, pc}
   d48dc:	0003021c 	.word	0x0003021c

000d48e0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d48e0:	b508      	push	{r3, lr}
   d48e2:	4b02      	ldr	r3, [pc, #8]	; (d48ec <vsnprintf+0xc>)
   d48e4:	681b      	ldr	r3, [r3, #0]
   d48e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d48e8:	9301      	str	r3, [sp, #4]
   d48ea:	bd08      	pop	{r3, pc}
   d48ec:	0003021c 	.word	0x0003021c

000d48f0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d48f0:	b508      	push	{r3, lr}
   d48f2:	4b02      	ldr	r3, [pc, #8]	; (d48fc <abort+0xc>)
   d48f4:	681b      	ldr	r3, [r3, #0]
   d48f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d48f8:	9301      	str	r3, [sp, #4]
   d48fa:	bd08      	pop	{r3, pc}
   d48fc:	0003021c 	.word	0x0003021c

000d4900 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4900:	b508      	push	{r3, lr}
   d4902:	4b02      	ldr	r3, [pc, #8]	; (d490c <newlib_impure_ptr_callback+0xc>)
   d4904:	681b      	ldr	r3, [r3, #0]
   d4906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4908:	9301      	str	r3, [sp, #4]
   d490a:	bd08      	pop	{r3, pc}
   d490c:	0003021c 	.word	0x0003021c

000d4910 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4910:	2200      	movs	r2, #0
   d4912:	6840      	ldr	r0, [r0, #4]
   d4914:	4611      	mov	r1, r2
   d4916:	f7ff bf7b 	b.w	d4810 <network_listening>

000d491a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d491a:	2200      	movs	r2, #0
   d491c:	6840      	ldr	r0, [r0, #4]
   d491e:	4611      	mov	r1, r2
   d4920:	f7ff bf96 	b.w	d4850 <network_get_listen_timeout>

000d4924 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4924:	6840      	ldr	r0, [r0, #4]
   d4926:	2200      	movs	r2, #0
   d4928:	f7ff bf8a 	b.w	d4840 <network_set_listen_timeout>

000d492c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d492c:	6840      	ldr	r0, [r0, #4]
   d492e:	2200      	movs	r2, #0
   d4930:	f081 0101 	eor.w	r1, r1, #1
   d4934:	f7ff bf64 	b.w	d4800 <network_listen>

000d4938 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4938:	2300      	movs	r3, #0
   d493a:	6840      	ldr	r0, [r0, #4]
   d493c:	461a      	mov	r2, r3
   d493e:	4619      	mov	r1, r3
   d4940:	f7ff bf56 	b.w	d47f0 <network_off>

000d4944 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4944:	2300      	movs	r3, #0
   d4946:	6840      	ldr	r0, [r0, #4]
   d4948:	461a      	mov	r2, r3
   d494a:	4619      	mov	r1, r3
   d494c:	f7ff bf48 	b.w	d47e0 <network_on>

000d4950 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4950:	2200      	movs	r2, #0
   d4952:	6840      	ldr	r0, [r0, #4]
   d4954:	4611      	mov	r1, r2
   d4956:	f7ff bf3b 	b.w	d47d0 <network_ready>

000d495a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d495a:	2200      	movs	r2, #0
   d495c:	6840      	ldr	r0, [r0, #4]
   d495e:	4611      	mov	r1, r2
   d4960:	f7ff bf26 	b.w	d47b0 <network_connecting>

000d4964 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4964:	6840      	ldr	r0, [r0, #4]
   d4966:	2200      	movs	r2, #0
   d4968:	2102      	movs	r1, #2
   d496a:	f7ff bf29 	b.w	d47c0 <network_disconnect>

000d496e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d496e:	2300      	movs	r3, #0
   d4970:	6840      	ldr	r0, [r0, #4]
   d4972:	461a      	mov	r2, r3
   d4974:	f7ff bf14 	b.w	d47a0 <network_connect>

000d4978 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4978:	4b02      	ldr	r3, [pc, #8]	; (d4984 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d497a:	2203      	movs	r2, #3
   d497c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d497e:	4a02      	ldr	r2, [pc, #8]	; (d4988 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4980:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4982:	4770      	bx	lr
   d4984:	2003e75c 	.word	0x2003e75c
   d4988:	000d69ec 	.word	0x000d69ec

000d498c <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   d498c:	b507      	push	{r0, r1, r2, lr}
   d498e:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d4990:	2100      	movs	r1, #0
{
   d4992:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d4994:	9100      	str	r1, [sp, #0]
   d4996:	2001      	movs	r0, #1
   d4998:	218c      	movs	r1, #140	; 0x8c
   d499a:	f7ff fef7 	bl	d478c <system_reset>
}
   d499e:	b003      	add	sp, #12
   d49a0:	f85d fb04 	ldr.w	pc, [sp], #4

000d49a4 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   d49a4:	4601      	mov	r1, r0
    reset(0, flags);
   d49a6:	2000      	movs	r0, #0
   d49a8:	f7ff bff0 	b.w	d498c <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000d49ac <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   d49ac:	2000      	movs	r0, #0
   d49ae:	f7ff bff9 	b.w	d49a4 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000d49b4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d49b4:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d49b6:	4b09      	ldr	r3, [pc, #36]	; (d49dc <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d49b8:	4c09      	ldr	r4, [pc, #36]	; (d49e0 <_GLOBAL__sub_I_System+0x2c>)
   d49ba:	2202      	movs	r2, #2
   d49bc:	2000      	movs	r0, #0
   d49be:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d49c0:	4b08      	ldr	r3, [pc, #32]	; (d49e4 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d49c2:	6020      	str	r0, [r4, #0]
   d49c4:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d49c6:	71a0      	strb	r0, [r4, #6]
   d49c8:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d49ca:	f7ff feb3 	bl	d4734 <set_system_mode>
SystemClass System;
   d49ce:	4620      	mov	r0, r4
   d49d0:	4a05      	ldr	r2, [pc, #20]	; (d49e8 <_GLOBAL__sub_I_System+0x34>)
   d49d2:	4906      	ldr	r1, [pc, #24]	; (d49ec <_GLOBAL__sub_I_System+0x38>)
   d49d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d49d8:	f001 bd80 	b.w	d64dc <__aeabi_atexit>
   d49dc:	2003e770 	.word	0x2003e770
   d49e0:	2003e764 	.word	0x2003e764
   d49e4:	ffff0000 	.word	0xffff0000
   d49e8:	2003e710 	.word	0x2003e710
   d49ec:	000d40ab 	.word	0x000d40ab

000d49f0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d49f0:	b510      	push	{r4, lr}
   d49f2:	4604      	mov	r4, r0
{
	free(buffer);
   d49f4:	6800      	ldr	r0, [r0, #0]
   d49f6:	f7ff ff63 	bl	d48c0 <free>
}
   d49fa:	4620      	mov	r0, r4
   d49fc:	bd10      	pop	{r4, pc}

000d49fe <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d49fe:	b510      	push	{r4, lr}
   d4a00:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4a02:	6800      	ldr	r0, [r0, #0]
   d4a04:	b108      	cbz	r0, d4a0a <_ZN6String10invalidateEv+0xc>
   d4a06:	f7ff ff5b 	bl	d48c0 <free>
	buffer = NULL;
   d4a0a:	2300      	movs	r3, #0
	capacity = len = 0;
   d4a0c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d4a10:	6023      	str	r3, [r4, #0]
}
   d4a12:	bd10      	pop	{r4, pc}

000d4a14 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4a14:	b538      	push	{r3, r4, r5, lr}
   d4a16:	4604      	mov	r4, r0
   d4a18:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4a1a:	6800      	ldr	r0, [r0, #0]
   d4a1c:	3101      	adds	r1, #1
   d4a1e:	f7ff ff57 	bl	d48d0 <realloc>
	if (newbuffer) {
   d4a22:	b110      	cbz	r0, d4a2a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4a24:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d4a28:	2001      	movs	r0, #1
	}
	return 0;
}
   d4a2a:	bd38      	pop	{r3, r4, r5, pc}

000d4a2c <_ZN6String7reserveEj>:
{
   d4a2c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4a2e:	6803      	ldr	r3, [r0, #0]
{
   d4a30:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4a32:	b123      	cbz	r3, d4a3e <_ZN6String7reserveEj+0x12>
   d4a34:	6843      	ldr	r3, [r0, #4]
   d4a36:	428b      	cmp	r3, r1
   d4a38:	d301      	bcc.n	d4a3e <_ZN6String7reserveEj+0x12>
   d4a3a:	2001      	movs	r0, #1
}
   d4a3c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d4a3e:	4620      	mov	r0, r4
   d4a40:	f7ff ffe8 	bl	d4a14 <_ZN6String12changeBufferEj>
   d4a44:	2800      	cmp	r0, #0
   d4a46:	d0f9      	beq.n	d4a3c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d4a48:	68a3      	ldr	r3, [r4, #8]
   d4a4a:	2b00      	cmp	r3, #0
   d4a4c:	d1f5      	bne.n	d4a3a <_ZN6String7reserveEj+0xe>
   d4a4e:	6822      	ldr	r2, [r4, #0]
   d4a50:	7013      	strb	r3, [r2, #0]
   d4a52:	e7f2      	b.n	d4a3a <_ZN6String7reserveEj+0xe>

000d4a54 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4a54:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4a56:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d4a58:	4611      	mov	r1, r2
   d4a5a:	9201      	str	r2, [sp, #4]
{
   d4a5c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d4a5e:	f7ff ffe5 	bl	d4a2c <_ZN6String7reserveEj>
   d4a62:	9a01      	ldr	r2, [sp, #4]
   d4a64:	b928      	cbnz	r0, d4a72 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d4a66:	4620      	mov	r0, r4
   d4a68:	f7ff ffc9 	bl	d49fe <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d4a6c:	4620      	mov	r0, r4
   d4a6e:	b003      	add	sp, #12
   d4a70:	bd30      	pop	{r4, r5, pc}
	len = length;
   d4a72:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d4a74:	4629      	mov	r1, r5
   d4a76:	6820      	ldr	r0, [r4, #0]
   d4a78:	f001 fe68 	bl	d674c <memcpy>
	buffer[len] = 0;
   d4a7c:	6822      	ldr	r2, [r4, #0]
   d4a7e:	68a3      	ldr	r3, [r4, #8]
   d4a80:	2100      	movs	r1, #0
   d4a82:	54d1      	strb	r1, [r2, r3]
	return *this;
   d4a84:	e7f2      	b.n	d4a6c <_ZN6String4copyEPKcj+0x18>

000d4a86 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d4a86:	2300      	movs	r3, #0
String::String(const char *cstr)
   d4a88:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d4a8a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d4a8e:	4604      	mov	r4, r0
	len = 0;
   d4a90:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4a92:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d4a94:	b141      	cbz	r1, d4aa8 <_ZN6StringC1EPKc+0x22>
   d4a96:	4608      	mov	r0, r1
   d4a98:	9101      	str	r1, [sp, #4]
   d4a9a:	f001 feb5 	bl	d6808 <strlen>
   d4a9e:	9901      	ldr	r1, [sp, #4]
   d4aa0:	4602      	mov	r2, r0
   d4aa2:	4620      	mov	r0, r4
   d4aa4:	f7ff ffd6 	bl	d4a54 <_ZN6String4copyEPKcj>
}
   d4aa8:	4620      	mov	r0, r4
   d4aaa:	b002      	add	sp, #8
   d4aac:	bd10      	pop	{r4, pc}

000d4aae <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d4aae:	b513      	push	{r0, r1, r4, lr}
   d4ab0:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d4ab2:	b159      	cbz	r1, d4acc <_ZN6StringaSEPKc+0x1e>
   d4ab4:	4608      	mov	r0, r1
   d4ab6:	9101      	str	r1, [sp, #4]
   d4ab8:	f001 fea6 	bl	d6808 <strlen>
   d4abc:	9901      	ldr	r1, [sp, #4]
   d4abe:	4602      	mov	r2, r0
   d4ac0:	4620      	mov	r0, r4
   d4ac2:	f7ff ffc7 	bl	d4a54 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d4ac6:	4620      	mov	r0, r4
   d4ac8:	b002      	add	sp, #8
   d4aca:	bd10      	pop	{r4, pc}
	else invalidate();
   d4acc:	f7ff ff97 	bl	d49fe <_ZN6String10invalidateEv>
   d4ad0:	e7f9      	b.n	d4ac6 <_ZN6StringaSEPKc+0x18>

000d4ad2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d4ad2:	4770      	bx	lr

000d4ad4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   d4ad4:	4770      	bx	lr

000d4ad6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   d4ad6:	4770      	bx	lr

000d4ad8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d4ad8:	4770      	bx	lr
	...

000d4adc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d4adc:	4b06      	ldr	r3, [pc, #24]	; (d4af8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d4ade:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d4ae0:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d4ae2:	f100 040c 	add.w	r4, r0, #12
	    ||
   d4ae6:	d005      	beq.n	d4af4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d4ae8:	4608      	mov	r0, r1
   d4aea:	f001 fd01 	bl	d64f0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d4aee:	2800      	cmp	r0, #0
	return nullptr;
   d4af0:	bf08      	it	eq
   d4af2:	2400      	moveq	r4, #0
      }
   d4af4:	4620      	mov	r0, r4
   d4af6:	bd10      	pop	{r4, pc}
   d4af8:	000d6b68 	.word	0x000d6b68

000d4afc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d4afc:	4b06      	ldr	r3, [pc, #24]	; (d4b18 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d4afe:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d4b00:	b510      	push	{r4, lr}
   d4b02:	f100 040c 	add.w	r4, r0, #12
	    ||
   d4b06:	d005      	beq.n	d4b14 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d4b08:	4608      	mov	r0, r1
   d4b0a:	f001 fcf1 	bl	d64f0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d4b0e:	2800      	cmp	r0, #0
	return nullptr;
   d4b10:	bf08      	it	eq
   d4b12:	2400      	moveq	r4, #0
      }
   d4b14:	4620      	mov	r0, r4
   d4b16:	bd10      	pop	{r4, pc}
   d4b18:	000d6b68 	.word	0x000d6b68

000d4b1c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d4b1c:	4b06      	ldr	r3, [pc, #24]	; (d4b38 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d4b1e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d4b20:	b510      	push	{r4, lr}
   d4b22:	f100 040c 	add.w	r4, r0, #12
	    ||
   d4b26:	d005      	beq.n	d4b34 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d4b28:	4608      	mov	r0, r1
   d4b2a:	f001 fce1 	bl	d64f0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d4b2e:	2800      	cmp	r0, #0
	return nullptr;
   d4b30:	bf08      	it	eq
   d4b32:	2400      	moveq	r4, #0
      }
   d4b34:	4620      	mov	r0, r4
   d4b36:	bd10      	pop	{r4, pc}
   d4b38:	000d6b68 	.word	0x000d6b68

000d4b3c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d4b3c:	b510      	push	{r4, lr}
   d4b3e:	2168      	movs	r1, #104	; 0x68
   d4b40:	4604      	mov	r4, r0
   d4b42:	f001 fcd0 	bl	d64e6 <_ZdlPvj>
   d4b46:	4620      	mov	r0, r4
   d4b48:	bd10      	pop	{r4, pc}

000d4b4a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d4b4a:	b510      	push	{r4, lr}
   d4b4c:	2128      	movs	r1, #40	; 0x28
   d4b4e:	4604      	mov	r4, r0
   d4b50:	f001 fcc9 	bl	d64e6 <_ZdlPvj>
   d4b54:	4620      	mov	r0, r4
   d4b56:	bd10      	pop	{r4, pc}

000d4b58 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d4b58:	b510      	push	{r4, lr}
   d4b5a:	2130      	movs	r1, #48	; 0x30
   d4b5c:	4604      	mov	r4, r0
   d4b5e:	f001 fcc2 	bl	d64e6 <_ZdlPvj>
   d4b62:	4620      	mov	r0, r4
   d4b64:	bd10      	pop	{r4, pc}

000d4b66 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d4b66:	f7ff ba96 	b.w	d4096 <_ZdlPv>

000d4b6a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d4b6a:	f7ff ba94 	b.w	d4096 <_ZdlPv>

000d4b6e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d4b6e:	f7ff ba92 	b.w	d4096 <_ZdlPv>

000d4b72 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4b72:	b510      	push	{r4, lr}
          _M_dispose();
   d4b74:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4b76:	4604      	mov	r4, r0
          _M_dispose();
   d4b78:	689b      	ldr	r3, [r3, #8]
   d4b7a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4b7c:	68a3      	ldr	r3, [r4, #8]
   d4b7e:	3b01      	subs	r3, #1
   d4b80:	60a3      	str	r3, [r4, #8]
   d4b82:	b92b      	cbnz	r3, d4b90 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d4b84:	6823      	ldr	r3, [r4, #0]
   d4b86:	4620      	mov	r0, r4
   d4b88:	68db      	ldr	r3, [r3, #12]
    }
   d4b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d4b8e:	4718      	bx	r3
    }
   d4b90:	bd10      	pop	{r4, pc}

000d4b92 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4b92:	b510      	push	{r4, lr}
   d4b94:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4b96:	6800      	ldr	r0, [r0, #0]
   d4b98:	b108      	cbz	r0, d4b9e <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4b9a:	f7ff fd2b 	bl	d45f4 <os_mutex_recursive_destroy>
    }
   d4b9e:	4620      	mov	r0, r4
   d4ba0:	bd10      	pop	{r4, pc}
	...

000d4ba4 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>:
    WiringBleLock(WiringBleLock&& lock) :
            locked_(lock.locked_) {
        lock.locked_ = false;
    }

    void lock() {
   d4ba4:	b510      	push	{r4, lr}
        mutex_.lock();
   d4ba6:	4b04      	ldr	r3, [pc, #16]	; (d4bb8 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0+0x14>)
    void lock() {
   d4ba8:	4604      	mov	r4, r0
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d4baa:	6818      	ldr	r0, [r3, #0]
   d4bac:	f7ff fd2a 	bl	d4604 <os_mutex_recursive_lock>
        locked_ = true;
   d4bb0:	2301      	movs	r3, #1
   d4bb2:	7023      	strb	r3, [r4, #0]
    }
   d4bb4:	bd10      	pop	{r4, pc}
   d4bb6:	bf00      	nop
   d4bb8:	2003e77c 	.word	0x2003e77c

000d4bbc <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>:

    void unlock() {
   d4bbc:	b510      	push	{r4, lr}
        mutex_.unlock();
   d4bbe:	4b04      	ldr	r3, [pc, #16]	; (d4bd0 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0+0x14>)
    void unlock() {
   d4bc0:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d4bc2:	6818      	ldr	r0, [r3, #0]
   d4bc4:	f7ff fd26 	bl	d4614 <os_mutex_recursive_unlock>
        locked_ = false;
   d4bc8:	2300      	movs	r3, #0
   d4bca:	7023      	strb	r3, [r4, #0]
    }
   d4bcc:	bd10      	pop	{r4, pc}
   d4bce:	bf00      	nop
   d4bd0:	2003e77c 	.word	0x2003e77c

000d4bd4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d4bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d4bd6:	2500      	movs	r5, #0
   d4bd8:	1cec      	adds	r4, r5, #3
   d4bda:	428c      	cmp	r4, r1
   d4bdc:	d80d      	bhi.n	d4bfa <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d4bde:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   d4be0:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   d4be2:	5d87      	ldrb	r7, [r0, r6]
   d4be4:	4297      	cmp	r7, r2
   d4be6:	d105      	bne.n	d4bf4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d4be8:	4426      	add	r6, r4
   d4bea:	42b1      	cmp	r1, r6
   d4bec:	d305      	bcc.n	d4bfa <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   d4bee:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   d4bf0:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d4bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   d4bf4:	3401      	adds	r4, #1
   d4bf6:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d4bf8:	e7ee      	b.n	d4bd8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   d4bfa:	2000      	movs	r0, #0
   d4bfc:	e7f9      	b.n	d4bf2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>

000d4bfe <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d4bfe:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d4c02:	4604      	mov	r4, r0
   d4c04:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
   d4c08:	461e      	mov	r6, r3
   d4c0a:	4689      	mov	r9, r1
   d4c0c:	ab01      	add	r3, sp, #4
   d4c0e:	4690      	mov	r8, r2
   d4c10:	460a      	mov	r2, r1
   d4c12:	6a01      	ldr	r1, [r0, #32]
   d4c14:	f7ff ffde 	bl	d4bd4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (!force && adsLen > 0) {
   d4c18:	6a25      	ldr	r5, [r4, #32]
   d4c1a:	1cb3      	adds	r3, r6, #2
   d4c1c:	bb17      	cbnz	r7, d4c64 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
   d4c1e:	b308      	cbz	r0, d4c64 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d4c20:	195f      	adds	r7, r3, r5
   d4c22:	1a3f      	subs	r7, r7, r0
   d4c24:	2f1f      	cmp	r7, #31
   d4c26:	d819      	bhi.n	d4c5c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d4c28:	f8dd 9004 	ldr.w	r9, [sp, #4]
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d4c2c:	f109 0a02 	add.w	sl, r9, #2
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d4c30:	eba5 0209 	sub.w	r2, r5, r9
   d4c34:	1a12      	subs	r2, r2, r0
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d4c36:	eb00 0109 	add.w	r1, r0, r9
   d4c3a:	eb06 000a 	add.w	r0, r6, sl
   d4c3e:	b292      	uxth	r2, r2
   d4c40:	4421      	add	r1, r4
   d4c42:	4420      	add	r0, r4
   d4c44:	f001 fd90 	bl	d6768 <memmove>
            selfData_[offset] = len + 1;
   d4c48:	1c73      	adds	r3, r6, #1
   d4c4a:	f804 3009 	strb.w	r3, [r4, r9]
            memcpy(&selfData_[offset + 2], buf, len);
   d4c4e:	4632      	mov	r2, r6
   d4c50:	4641      	mov	r1, r8
   d4c52:	eb04 000a 	add.w	r0, r4, sl
   d4c56:	f001 fd79 	bl	d674c <memcpy>
            selfLen_ = staLen + len + 2;
   d4c5a:	6227      	str	r7, [r4, #32]
}
   d4c5c:	6a20      	ldr	r0, [r4, #32]
   d4c5e:	b002      	add	sp, #8
   d4c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d4c64:	442b      	add	r3, r5
   d4c66:	2b1f      	cmp	r3, #31
   d4c68:	d8f8      	bhi.n	d4c5c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
        selfData_[selfLen_++] = len + 1;
   d4c6a:	1c73      	adds	r3, r6, #1
   d4c6c:	5563      	strb	r3, [r4, r5]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d4c6e:	1ca8      	adds	r0, r5, #2
   d4c70:	4425      	add	r5, r4
   d4c72:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d4c74:	4632      	mov	r2, r6
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d4c76:	f885 9001 	strb.w	r9, [r5, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d4c7a:	4641      	mov	r1, r8
   d4c7c:	4420      	add	r0, r4
   d4c7e:	f001 fd65 	bl	d674c <memcpy>
        selfLen_ += len;
   d4c82:	6a23      	ldr	r3, [r4, #32]
   d4c84:	4433      	add	r3, r6
   d4c86:	6223      	str	r3, [r4, #32]
   d4c88:	e7e8      	b.n	d4c5c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
	...

000d4c8c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d4c8c:	4a02      	ldr	r2, [pc, #8]	; (d4c98 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   d4c8e:	2100      	movs	r1, #0
   d4c90:	200a      	movs	r0, #10
   d4c92:	f7ff bd3f 	b.w	d4714 <panic_>
   d4c96:	bf00      	nop
   d4c98:	000d44d1 	.word	0x000d44d1

000d4c9c <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4c9c:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4c9e:	b538      	push	{r3, r4, r5, lr}
   d4ca0:	4604      	mov	r4, r0
	  switch (__op)
   d4ca2:	d007      	beq.n	d4cb4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x18>
   d4ca4:	2a03      	cmp	r2, #3
   d4ca6:	d011      	beq.n	d4ccc <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x30>
   d4ca8:	2a01      	cmp	r2, #1
   d4caa:	d101      	bne.n	d4cb0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d4cac:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   d4cae:	6023      	str	r3, [r4, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4cb0:	2000      	movs	r0, #0
   d4cb2:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d4cb4:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   d4cb6:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d4cb8:	f7ff f9eb 	bl	d4092 <_Znwj>
   d4cbc:	4603      	mov	r3, r0
   d4cbe:	2800      	cmp	r0, #0
   d4cc0:	d0f5      	beq.n	d4cae <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x12>
   d4cc2:	e895 0003 	ldmia.w	r5, {r0, r1}
   d4cc6:	e883 0003 	stmia.w	r3, {r0, r1}
   d4cca:	e7f0      	b.n	d4cae <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
   d4ccc:	6800      	ldr	r0, [r0, #0]
   d4cce:	2800      	cmp	r0, #0
   d4cd0:	d0ee      	beq.n	d4cb0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>
   d4cd2:	2108      	movs	r1, #8
   d4cd4:	f001 fc07 	bl	d64e6 <_ZdlPvj>
   d4cd8:	e7ea      	b.n	d4cb0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>

000d4cda <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d4cda:	b430      	push	{r4, r5}
   d4cdc:	460d      	mov	r5, r1
   d4cde:	4611      	mov	r1, r2
   d4ce0:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   d4ce2:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d4ce4:	6809      	ldr	r1, [r1, #0]
   d4ce6:	6828      	ldr	r0, [r5, #0]
   d4ce8:	e9d3 4300 	ldrd	r4, r3, [r3]
   d4cec:	46a4      	mov	ip, r4
      {
	(*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
   d4cee:	bc30      	pop	{r4, r5}
   d4cf0:	4760      	bx	ip

000d4cf2 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d4cf2:	b510      	push	{r4, lr}
      if (_M_manager)
   d4cf4:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4cf6:	4604      	mov	r4, r0
      if (_M_manager)
   d4cf8:	b113      	cbz	r3, d4d00 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4cfa:	2203      	movs	r2, #3
   d4cfc:	4601      	mov	r1, r0
   d4cfe:	4798      	blx	r3
    }
   d4d00:	4620      	mov	r0, r4
   d4d02:	bd10      	pop	{r4, pc}

000d4d04 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d4d04:	b510      	push	{r4, lr}
   d4d06:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4d08:	3058      	adds	r0, #88	; 0x58
   d4d0a:	f7ff fff2 	bl	d4cf2 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   d4d0e:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   d4d12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4d16:	f7ff be6b 	b.w	d49f0 <_ZN6StringD1Ev>

000d4d1a <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d4d1a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d4d1e:	b2da      	uxtb	r2, r3
   d4d20:	2a09      	cmp	r2, #9
   d4d22:	d801      	bhi.n	d4d28 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d4d24:	4618      	mov	r0, r3
   d4d26:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d4d28:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d4d2c:	2b05      	cmp	r3, #5
   d4d2e:	d801      	bhi.n	d4d34 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d4d30:	3857      	subs	r0, #87	; 0x57
   d4d32:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d4d34:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d4d38:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d4d3a:	bf94      	ite	ls
   d4d3c:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d4d3e:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d4d42:	4770      	bx	lr

000d4d44 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   d4d44:	b510      	push	{r4, lr}
            locked_(false) {
   d4d46:	2300      	movs	r3, #0
    WiringBleLock() :
   d4d48:	4604      	mov	r4, r0
            locked_(false) {
   d4d4a:	7003      	strb	r3, [r0, #0]
        lock();
   d4d4c:	f7ff ff2a 	bl	d4ba4 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>
    }
   d4d50:	4620      	mov	r0, r4
   d4d52:	bd10      	pop	{r4, pc}

000d4d54 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   d4d54:	b510      	push	{r4, lr}
        if (locked_) {
   d4d56:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   d4d58:	4604      	mov	r4, r0
        if (locked_) {
   d4d5a:	b10b      	cbz	r3, d4d60 <_ZN8particle3ble13WiringBleLockD1Ev+0xc>
            unlock();
   d4d5c:	f7ff ff2e 	bl	d4bbc <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>
    }
   d4d60:	4620      	mov	r0, r4
   d4d62:	bd10      	pop	{r4, pc}

000d4d64 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   d4d64:	b082      	sub	sp, #8
   d4d66:	4603      	mov	r3, r0
    address_ = addr;
   d4d68:	6808      	ldr	r0, [r1, #0]
   d4d6a:	6849      	ldr	r1, [r1, #4]
   d4d6c:	466a      	mov	r2, sp
   d4d6e:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   d4d70:	466a      	mov	r2, sp
   d4d72:	ca03      	ldmia	r2!, {r0, r1}
   d4d74:	6018      	str	r0, [r3, #0]
}
   d4d76:	4618      	mov	r0, r3
    address_ = addr.address_;
   d4d78:	6059      	str	r1, [r3, #4]
}
   d4d7a:	b002      	add	sp, #8
   d4d7c:	4770      	bx	lr

000d4d7e <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   d4d7e:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d4d80:	7982      	ldrb	r2, [r0, #6]
   d4d82:	798b      	ldrb	r3, [r1, #6]
   d4d84:	429a      	cmp	r2, r3
   d4d86:	d106      	bne.n	d4d96 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d4d88:	2206      	movs	r2, #6
   d4d8a:	f001 fcd1 	bl	d6730 <memcmp>
   d4d8e:	fab0 f080 	clz	r0, r0
   d4d92:	0940      	lsrs	r0, r0, #5
}
   d4d94:	bd08      	pop	{r3, pc}
    return false;
   d4d96:	2000      	movs	r0, #0
   d4d98:	e7fc      	b.n	d4d94 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000d4d9a <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   d4d9a:	f04f 33ff 	mov.w	r3, #4294967295
   d4d9e:	6003      	str	r3, [r0, #0]
   d4da0:	8083      	strh	r3, [r0, #4]
}
   d4da2:	2000      	movs	r0, #0
   d4da4:	4770      	bx	lr

000d4da6 <_ZN8particle10BleAddressC1Ev>:
        : address_{} {
   d4da6:	2100      	movs	r1, #0
BleAddress::BleAddress()
   d4da8:	b508      	push	{r3, lr}
        : address_{} {
   d4daa:	6001      	str	r1, [r0, #0]
   d4dac:	6041      	str	r1, [r0, #4]
BleAddress::BleAddress()
   d4dae:	4602      	mov	r2, r0
    clear();
   d4db0:	f7ff fff3 	bl	d4d9a <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   d4db4:	7191      	strb	r1, [r2, #6]
}
   d4db6:	4610      	mov	r0, r2
   d4db8:	bd08      	pop	{r3, pc}
	...

000d4dbc <_ZN8particle7BleUuidC1Ev>:
        : type_(BleUuidType::LONG) {
   d4dbc:	2201      	movs	r2, #1
   d4dbe:	6102      	str	r2, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d4dc0:	4a06      	ldr	r2, [pc, #24]	; (d4ddc <_ZN8particle7BleUuidC1Ev+0x20>)
   d4dc2:	6811      	ldr	r1, [r2, #0]
   d4dc4:	6001      	str	r1, [r0, #0]
   d4dc6:	6851      	ldr	r1, [r2, #4]
   d4dc8:	6041      	str	r1, [r0, #4]
   d4dca:	8911      	ldrh	r1, [r2, #8]
   d4dcc:	7a92      	ldrb	r2, [r2, #10]
   d4dce:	7282      	strb	r2, [r0, #10]
   d4dd0:	2200      	movs	r2, #0
   d4dd2:	8101      	strh	r1, [r0, #8]
   d4dd4:	f8c0 200b 	str.w	r2, [r0, #11]
   d4dd8:	73c2      	strb	r2, [r0, #15]
}
   d4dda:	4770      	bx	lr
   d4ddc:	000d6b70 	.word	0x000d6b70

000d4de0 <_ZN8particle7BleUuidC1ERKS0_>:
BleUuid::BleUuid(const BleUuid& uuid)
   d4de0:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d4de2:	690b      	ldr	r3, [r1, #16]
   d4de4:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d4de6:	f101 0210 	add.w	r2, r1, #16
   d4dea:	4603      	mov	r3, r0
   d4dec:	f851 4b04 	ldr.w	r4, [r1], #4
   d4df0:	f843 4b04 	str.w	r4, [r3], #4
   d4df4:	4291      	cmp	r1, r2
   d4df6:	d1f9      	bne.n	d4dec <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d4df8:	bd10      	pop	{r4, pc}

000d4dfa <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d4dfa:	b510      	push	{r4, lr}
    if (uuid128) {
   d4dfc:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d4dfe:	4604      	mov	r4, r0
    if (uuid128) {
   d4e00:	b1b1      	cbz	r1, d4e30 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   d4e02:	2a01      	cmp	r2, #1
   d4e04:	f101 0210 	add.w	r2, r1, #16
   d4e08:	d10a      	bne.n	d4e20 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d4e0a:	4601      	mov	r1, r0
   d4e0c:	f853 0b04 	ldr.w	r0, [r3], #4
   d4e10:	f841 0b04 	str.w	r0, [r1], #4
   d4e14:	4293      	cmp	r3, r2
   d4e16:	d1f9      	bne.n	d4e0c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   d4e18:	2301      	movs	r3, #1
   d4e1a:	6123      	str	r3, [r4, #16]
}
   d4e1c:	4620      	mov	r0, r4
   d4e1e:	bd10      	pop	{r4, pc}
   d4e20:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   d4e22:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   d4e26:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d4e2a:	429a      	cmp	r2, r3
   d4e2c:	d1f9      	bne.n	d4e22 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   d4e2e:	e7f3      	b.n	d4e18 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d4e30:	2210      	movs	r2, #16
   d4e32:	f001 fcb3 	bl	d679c <memset>
   d4e36:	e7f1      	b.n	d4e1c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000d4e38 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d4e38:	b538      	push	{r3, r4, r5, lr}
   d4e3a:	4604      	mov	r4, r0
   d4e3c:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   d4e3e:	461a      	mov	r2, r3
   d4e40:	f7ff ffdb 	bl	d4dfa <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d4e44:	81a5      	strh	r5, [r4, #12]
}
   d4e46:	4620      	mov	r0, r4
   d4e48:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4e4c <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   d4e4c:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   d4e4e:	6902      	ldr	r2, [r0, #16]
   d4e50:	b922      	cbnz	r2, d4e5c <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   d4e52:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d4e54:	3800      	subs	r0, #0
   d4e56:	bf18      	it	ne
   d4e58:	2001      	movne	r0, #1
}
   d4e5a:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d4e5c:	4902      	ldr	r1, [pc, #8]	; (d4e68 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   d4e5e:	2210      	movs	r2, #16
   d4e60:	f001 fc66 	bl	d6730 <memcmp>
   d4e64:	e7f6      	b.n	d4e54 <_ZNK8particle7BleUuid7isValidEv+0x8>
   d4e66:	bf00      	nop
   d4e68:	000d6b90 	.word	0x000d6b90

000d4e6c <_ZNK8particle7BleUuid4typeEv>:
}
   d4e6c:	6900      	ldr	r0, [r0, #16]
   d4e6e:	4770      	bx	lr

000d4e70 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   d4e70:	b538      	push	{r3, r4, r5, lr}
   d4e72:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   d4e74:	2214      	movs	r2, #20
   d4e76:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   d4e78:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   d4e7a:	f001 fc8f 	bl	d679c <memset>
    if (type_ == BleUuidType::SHORT) {
   d4e7e:	6923      	ldr	r3, [r4, #16]
   d4e80:	b93b      	cbnz	r3, d4e92 <_ZN8particle7BleUuid7halUUIDEv+0x22>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d4e82:	7b62      	ldrb	r2, [r4, #13]
        uuid.type = BLE_UUID_TYPE_16BIT;
   d4e84:	742b      	strb	r3, [r5, #16]
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d4e86:	7b23      	ldrb	r3, [r4, #12]
   d4e88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4e8c:	802b      	strh	r3, [r5, #0]
}
   d4e8e:	4628      	mov	r0, r5
   d4e90:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   d4e92:	2301      	movs	r3, #1
   d4e94:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d4e96:	f104 0210 	add.w	r2, r4, #16
   d4e9a:	462b      	mov	r3, r5
   d4e9c:	f854 1b04 	ldr.w	r1, [r4], #4
   d4ea0:	f843 1b04 	str.w	r1, [r3], #4
   d4ea4:	4294      	cmp	r4, r2
   d4ea6:	d1f9      	bne.n	d4e9c <_ZN8particle7BleUuid7halUUIDEv+0x2c>
   d4ea8:	e7f1      	b.n	d4e8e <_ZN8particle7BleUuid7halUUIDEv+0x1e>

000d4eaa <_ZNK8particle7BleUuid7shortedEv>:
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d4eaa:	7b42      	ldrb	r2, [r0, #13]
   d4eac:	7b00      	ldrb	r0, [r0, #12]
}
   d4eae:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d4eb2:	4770      	bx	lr

000d4eb4 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   d4eb4:	4770      	bx	lr

000d4eb6 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   d4eb6:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d4eb8:	6902      	ldr	r2, [r0, #16]
   d4eba:	690b      	ldr	r3, [r1, #16]
   d4ebc:	429a      	cmp	r2, r3
   d4ebe:	d106      	bne.n	d4ece <_ZNK8particle7BleUuideqERKS0_+0x18>
   d4ec0:	2210      	movs	r2, #16
   d4ec2:	f001 fc35 	bl	d6730 <memcmp>
   d4ec6:	fab0 f080 	clz	r0, r0
   d4eca:	0940      	lsrs	r0, r0, #5
}
   d4ecc:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d4ece:	2000      	movs	r0, #0
   d4ed0:	e7fc      	b.n	d4ecc <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000d4ed4 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   d4ed4:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   d4ed6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   d4eda:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d4edc:	4b32      	ldr	r3, [pc, #200]	; (d4fa8 <_ZN8particle7BleUuid9constructEPKc+0xd4>)
   d4ede:	681a      	ldr	r2, [r3, #0]
   d4ee0:	6002      	str	r2, [r0, #0]
   d4ee2:	685a      	ldr	r2, [r3, #4]
   d4ee4:	6042      	str	r2, [r0, #4]
   d4ee6:	2500      	movs	r5, #0
   d4ee8:	891a      	ldrh	r2, [r3, #8]
   d4eea:	7a9b      	ldrb	r3, [r3, #10]
   d4eec:	8102      	strh	r2, [r0, #8]
void BleUuid::construct(const char* uuid) {
   d4eee:	4604      	mov	r4, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d4ef0:	7283      	strb	r3, [r0, #10]
   d4ef2:	f8c0 500b 	str.w	r5, [r0, #11]
   d4ef6:	73c5      	strb	r5, [r0, #15]
    if (uuid == nullptr) {
   d4ef8:	460e      	mov	r6, r1
   d4efa:	b321      	cbz	r1, d4f46 <_ZN8particle7BleUuid9constructEPKc+0x72>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d4efc:	2124      	movs	r1, #36	; 0x24
   d4efe:	4630      	mov	r0, r6
   d4f00:	f001 fc9d 	bl	d683e <strnlen>
   d4f04:	2804      	cmp	r0, #4
   d4f06:	d121      	bne.n	d4f4c <_ZN8particle7BleUuid9constructEPKc+0x78>
        char buf[2] = {};
   d4f08:	f8ad 5004 	strh.w	r5, [sp, #4]
   d4f0c:	af01      	add	r7, sp, #4
   d4f0e:	1cb5      	adds	r5, r6, #2
   d4f10:	3606      	adds	r6, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d4f12:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   d4f16:	f7ff ff00 	bl	d4d1a <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d4f1a:	f1b0 0800 	subs.w	r8, r0, #0
   d4f1e:	db10      	blt.n	d4f42 <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        const int l = hexToNibble(*src++);
   d4f20:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   d4f24:	f7ff fef9 	bl	d4d1a <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d4f28:	2800      	cmp	r0, #0
   d4f2a:	db0a      	blt.n	d4f42 <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d4f2c:	3502      	adds	r5, #2
   d4f2e:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   d4f32:	42ae      	cmp	r6, r5
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d4f34:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   d4f38:	d1eb      	bne.n	d4f12 <_ZN8particle7BleUuid9constructEPKc+0x3e>
            uuid128_[UUID16_LO] = buf[1];
   d4f3a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d4f3e:	ba5b      	rev16	r3, r3
   d4f40:	81a3      	strh	r3, [r4, #12]
        type_ = BleUuidType::SHORT;
   d4f42:	2300      	movs	r3, #0
   d4f44:	6123      	str	r3, [r4, #16]
}
   d4f46:	b002      	add	sp, #8
   d4f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   d4f4c:	2710      	movs	r7, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d4f4e:	2124      	movs	r1, #36	; 0x24
   d4f50:	4630      	mov	r0, r6
   d4f52:	f001 fc74 	bl	d683e <strnlen>
   d4f56:	42a8      	cmp	r0, r5
   d4f58:	d806      	bhi.n	d4f68 <_ZN8particle7BleUuid9constructEPKc+0x94>
   d4f5a:	4427      	add	r7, r4
        uuid128_[len - 1] = 0x00;
   d4f5c:	2300      	movs	r3, #0
    while (len > 0) {
   d4f5e:	42bc      	cmp	r4, r7
   d4f60:	d0f1      	beq.n	d4f46 <_ZN8particle7BleUuid9constructEPKc+0x72>
        uuid128_[len - 1] = 0x00;
   d4f62:	f807 3d01 	strb.w	r3, [r7, #-1]!
    while (len > 0) {
   d4f66:	e7fa      	b.n	d4f5e <_ZN8particle7BleUuid9constructEPKc+0x8a>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d4f68:	2f00      	cmp	r7, #0
   d4f6a:	d0ec      	beq.n	d4f46 <_ZN8particle7BleUuid9constructEPKc+0x72>
        int8_t hi = hexToNibble(uuid[i]);
   d4f6c:	5d70      	ldrb	r0, [r6, r5]
   d4f6e:	f7ff fed4 	bl	d4d1a <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d4f72:	0603      	lsls	r3, r0, #24
   d4f74:	d415      	bmi.n	d4fa2 <_ZN8particle7BleUuid9constructEPKc+0xce>
            uuid128_[len - 1] = hi << 4;
   d4f76:	0100      	lsls	r0, r0, #4
   d4f78:	3f01      	subs	r7, #1
   d4f7a:	fa5f f880 	uxtb.w	r8, r0
   d4f7e:	f804 8007 	strb.w	r8, [r4, r7]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d4f82:	2124      	movs	r1, #36	; 0x24
   d4f84:	4630      	mov	r0, r6
   d4f86:	f001 fc5a 	bl	d683e <strnlen>
   d4f8a:	3501      	adds	r5, #1
   d4f8c:	42a8      	cmp	r0, r5
   d4f8e:	d908      	bls.n	d4fa2 <_ZN8particle7BleUuid9constructEPKc+0xce>
                int8_t lo = hexToNibble(uuid[i]);
   d4f90:	5d70      	ldrb	r0, [r6, r5]
   d4f92:	f7ff fec2 	bl	d4d1a <_ZN8particle11hexToNibbleEc>
   d4f96:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d4f98:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d4f9a:	bfa4      	itt	ge
   d4f9c:	ea40 0008 	orrge.w	r0, r0, r8
   d4fa0:	55e0      	strbge	r0, [r4, r7]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d4fa2:	3501      	adds	r5, #1
   d4fa4:	e7d3      	b.n	d4f4e <_ZN8particle7BleUuid9constructEPKc+0x7a>
   d4fa6:	bf00      	nop
   d4fa8:	000d6b70 	.word	0x000d6b70

000d4fac <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   d4fac:	b513      	push	{r0, r1, r4, lr}
   d4fae:	4604      	mov	r4, r0
   d4fb0:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   d4fb2:	f7ff ff03 	bl	d4dbc <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d4fb6:	4620      	mov	r0, r4
   d4fb8:	9901      	ldr	r1, [sp, #4]
   d4fba:	f7ff ff8b 	bl	d4ed4 <_ZN8particle7BleUuid9constructEPKc>
}
   d4fbe:	4620      	mov	r0, r4
   d4fc0:	b002      	add	sp, #8
   d4fc2:	bd10      	pop	{r4, pc}

000d4fc4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d4fc4:	b430      	push	{r4, r5}
   d4fc6:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   d4fca:	b912      	cbnz	r2, d4fd2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0xe>
        return selfLen_;
   d4fcc:	6a00      	ldr	r0, [r0, #32]
}
   d4fce:	bc30      	pop	{r4, r5}
   d4fd0:	4770      	bx	lr
   d4fd2:	9502      	str	r5, [sp, #8]
   d4fd4:	bc30      	pop	{r4, r5}
   d4fd6:	f7ff be12 	b.w	d4bfe <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>

000d4fda <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   d4fda:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4fdc:	4604      	mov	r4, r0
          selfLen_(0) {
   d4fde:	4602      	mov	r2, r0
   d4fe0:	f100 011f 	add.w	r1, r0, #31
   d4fe4:	2300      	movs	r3, #0
   d4fe6:	f802 3b01 	strb.w	r3, [r2], #1
   d4fea:	4291      	cmp	r1, r2
   d4fec:	d1fb      	bne.n	d4fe6 <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
   d4fee:	6223      	str	r3, [r4, #32]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d4ff0:	9300      	str	r3, [sp, #0]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d4ff2:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d4ff4:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d4ff6:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d4ffa:	4619      	mov	r1, r3
   d4ffc:	f10d 020f 	add.w	r2, sp, #15
   d5000:	4620      	mov	r0, r4
   d5002:	f7ff ffdf 	bl	d4fc4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d5006:	4620      	mov	r0, r4
   d5008:	b004      	add	sp, #16
   d500a:	bd10      	pop	{r4, pc}

000d500c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d500c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (offset == nullptr) {
   d500e:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d5010:	460e      	mov	r6, r1
   d5012:	ab01      	add	r3, sp, #4
   d5014:	6a01      	ldr	r1, [r0, #32]
   d5016:	4604      	mov	r4, r0
   d5018:	f7ff fddc 	bl	d4bd4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   d501c:	4605      	mov	r5, r0
   d501e:	b178      	cbz	r0, d5040 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d5020:	9801      	ldr	r0, [sp, #4]
   d5022:	6a22      	ldr	r2, [r4, #32]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d5024:	1941      	adds	r1, r0, r5
        size_t moveLen = selfLen_ - offset - len;
   d5026:	1a12      	subs	r2, r2, r0
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d5028:	4421      	add	r1, r4
   d502a:	1b52      	subs	r2, r2, r5
   d502c:	4420      	add	r0, r4
   d502e:	f001 fb8d 	bl	d674c <memcpy>
        selfLen_ -= len;
   d5032:	6a20      	ldr	r0, [r4, #32]
   d5034:	1b40      	subs	r0, r0, r5
   d5036:	6220      	str	r0, [r4, #32]
        remove(type);
   d5038:	4631      	mov	r1, r6
   d503a:	4620      	mov	r0, r4
   d503c:	f7ff ffe6 	bl	d500c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   d5040:	b002      	add	sp, #8
   d5042:	bd70      	pop	{r4, r5, r6, pc}

000d5044 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   d5044:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   d5046:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d504a:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   d504c:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   d504e:	8043      	strh	r3, [r0, #2]
   d5050:	220e      	movs	r2, #14
   d5052:	4629      	mov	r1, r5
   d5054:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d5056:	7105      	strb	r5, [r0, #4]
   d5058:	3006      	adds	r0, #6
   d505a:	f001 fb9f 	bl	d679c <memset>
   d505e:	f104 0014 	add.w	r0, r4, #20
   d5062:	f7ff feab 	bl	d4dbc <_ZN8particle7BleUuidC1Ev>
   d5066:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d506a:	f7ff fea7 	bl	d4dbc <_ZN8particle7BleUuidC1Ev>
   d506e:	4904      	ldr	r1, [pc, #16]	; (d5080 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d5070:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d5074:	f7ff fd07 	bl	d4a86 <_ZN6StringC1EPKc>
    _Function_base() : _M_manager(nullptr) { }
   d5078:	6565      	str	r5, [r4, #84]	; 0x54
    }
   d507a:	4620      	mov	r0, r4
   d507c:	bd38      	pop	{r3, r4, r5, pc}
   d507e:	bf00      	nop
   d5080:	000d688f 	.word	0x000d688f

000d5084 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d5084:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5086:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   d508a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d508e:	4293      	cmp	r3, r2
   d5090:	4618      	mov	r0, r3
   d5092:	d006      	beq.n	d50a2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d5094:	6804      	ldr	r4, [r0, #0]
   d5096:	8824      	ldrh	r4, [r4, #0]
   d5098:	428c      	cmp	r4, r1
   d509a:	f103 0308 	add.w	r3, r3, #8
   d509e:	d1f6      	bne.n	d508e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   d50a0:	bd10      	pop	{r4, pc}
        return nullptr;
   d50a2:	2000      	movs	r0, #0
   d50a4:	e7fc      	b.n	d50a0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000d50a8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d50a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d50aa:	4606      	mov	r6, r0
   d50ac:	b085      	sub	sp, #20
   d50ae:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d50b0:	460d      	mov	r5, r1
   d50b2:	2900      	cmp	r1, #0
   d50b4:	d050      	beq.n	d5158 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   d50b6:	2a00      	cmp	r2, #0
   d50b8:	d04e      	beq.n	d5158 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
    void onDataReceived(void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance) {
        onDataReceived((callback && instance) ? std::bind(callback, instance, _1, _2, _3) :(BleOnDataReceivedStdFunction) nullptr);
    }

    BleCharacteristicImpl* impl() const {
        return impl_.get();
   d50ba:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   d50bc:	7823      	ldrb	r3, [r4, #0]
   d50be:	2af4      	cmp	r2, #244	; 0xf4
   d50c0:	bf28      	it	cs
   d50c2:	22f4      	movcs	r2, #244	; 0xf4
   d50c4:	b343      	cbz	r3, d5118 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d50c6:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d50c8:	0798      	lsls	r0, r3, #30
   d50ca:	d509      	bpl.n	d50e0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d50cc:	89a0      	ldrh	r0, [r4, #12]
   d50ce:	9203      	str	r2, [sp, #12]
   d50d0:	2300      	movs	r3, #0
   d50d2:	f7ff fa41 	bl	d4558 <hal_ble_gatt_server_set_characteristic_value>
   d50d6:	2800      	cmp	r0, #0
   d50d8:	9a03      	ldr	r2, [sp, #12]
   d50da:	da03      	bge.n	d50e4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d50dc:	b005      	add	sp, #20
   d50de:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d50e0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d50e4:	6834      	ldr	r4, [r6, #0]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d50e6:	7923      	ldrb	r3, [r4, #4]
   d50e8:	06d9      	lsls	r1, r3, #27
   d50ea:	d509      	bpl.n	d5100 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   d50ec:	2f01      	cmp	r7, #1
   d50ee:	d007      	beq.n	d5100 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d50f0:	89a0      	ldrh	r0, [r4, #12]
   d50f2:	2300      	movs	r3, #0
   d50f4:	4629      	mov	r1, r5
}
   d50f6:	b005      	add	sp, #20
   d50f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d50fc:	f7ff ba5e 	b.w	d45bc <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d5100:	069b      	lsls	r3, r3, #26
   d5102:	d5eb      	bpl.n	d50dc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d5104:	2f02      	cmp	r7, #2
   d5106:	d0e9      	beq.n	d50dc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5108:	89a0      	ldrh	r0, [r4, #12]
   d510a:	2300      	movs	r3, #0
   d510c:	4629      	mov	r1, r5
}
   d510e:	b005      	add	sp, #20
   d5110:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5114:	f7ff ba5c 	b.w	d45d0 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d5118:	8860      	ldrh	r0, [r4, #2]
   d511a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d511e:	4288      	cmp	r0, r1
   d5120:	d01c      	beq.n	d515c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d5122:	7921      	ldrb	r1, [r4, #4]
   d5124:	074e      	lsls	r6, r1, #29
   d5126:	d501      	bpl.n	d512c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   d5128:	2f01      	cmp	r7, #1
   d512a:	d104      	bne.n	d5136 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d512c:	070b      	lsls	r3, r1, #28
   d512e:	d409      	bmi.n	d5144 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d5130:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d5134:	e7d2      	b.n	d50dc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d5136:	89a1      	ldrh	r1, [r4, #12]
   d5138:	9300      	str	r3, [sp, #0]
   d513a:	4613      	mov	r3, r2
   d513c:	462a      	mov	r2, r5
   d513e:	f7ff fa1f 	bl	d4580 <hal_ble_gatt_client_write_without_response>
   d5142:	e7cb      	b.n	d50dc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d5144:	2f02      	cmp	r7, #2
   d5146:	d0f3      	beq.n	d5130 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d5148:	2300      	movs	r3, #0
   d514a:	89a1      	ldrh	r1, [r4, #12]
   d514c:	9300      	str	r3, [sp, #0]
   d514e:	4613      	mov	r3, r2
   d5150:	462a      	mov	r2, r5
   d5152:	f7ff fa0b 	bl	d456c <hal_ble_gatt_client_write_with_response>
   d5156:	e7c1      	b.n	d50dc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d5158:	4802      	ldr	r0, [pc, #8]	; (d5164 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   d515a:	e7bf      	b.n	d50dc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   d515c:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d5160:	e7bc      	b.n	d50dc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d5162:	bf00      	nop
   d5164:	fffffef2 	.word	0xfffffef2

000d5168 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d5168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d516c:	2600      	movs	r6, #0
   d516e:	6006      	str	r6, [r0, #0]
   d5170:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5172:	2028      	movs	r0, #40	; 0x28
   d5174:	460c      	mov	r4, r1
   d5176:	f7fe ff8c 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d517a:	1e05      	subs	r5, r0, #0
   d517c:	f105 080c 	add.w	r8, r5, #12
   d5180:	d00f      	beq.n	d51a2 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   d5182:	2301      	movs	r3, #1
   d5184:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d5188:	4b08      	ldr	r3, [pc, #32]	; (d51ac <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   d518a:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   d518c:	4640      	mov	r0, r8
   d518e:	f7ff fe15 	bl	d4dbc <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   d5192:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   d5194:	622e      	str	r6, [r5, #32]
   d5196:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   d519a:	4646      	mov	r6, r8
   d519c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d519e:	6823      	ldr	r3, [r4, #0]
   d51a0:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   d51a2:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d51a6:	4638      	mov	r0, r7
   d51a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d51ac:	000d6b38 	.word	0x000d6b38

000d51b0 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d51b0:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d51b2:	2500      	movs	r5, #0
   d51b4:	6005      	str	r5, [r0, #0]
   d51b6:	4606      	mov	r6, r0
   d51b8:	2030      	movs	r0, #48	; 0x30
   d51ba:	f7fe ff6a 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d51be:	4604      	mov	r4, r0
   d51c0:	b188      	cbz	r0, d51e6 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   d51c2:	2301      	movs	r3, #1
   d51c4:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   d51c8:	4b09      	ldr	r3, [pc, #36]	; (d51f0 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   d51ca:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   d51cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d51d0:	8183      	strh	r3, [r0, #12]
   d51d2:	300e      	adds	r0, #14
   d51d4:	f7ff fde7 	bl	d4da6 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   d51d8:	e9c4 5506 	strd	r5, r5, [r4, #24]
   d51dc:	e9c4 5508 	strd	r5, r5, [r4, #32]
   d51e0:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   d51e4:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   d51e6:	6074      	str	r4, [r6, #4]
   d51e8:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   d51ea:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d51ec:	4630      	mov	r0, r6
   d51ee:	bd70      	pop	{r4, r5, r6, pc}
   d51f0:	000d6b54 	.word	0x000d6b54

000d51f4 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d51f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d51f6:	460d      	mov	r5, r1
   d51f8:	4604      	mov	r4, r0
    WiringBleLock lk;
   d51fa:	a801      	add	r0, sp, #4
   d51fc:	f7ff fda2 	bl	d4d44 <_ZN8particle3ble13WiringBleLockC1Ev>
    address_ = addr.address_;
   d5200:	682a      	ldr	r2, [r5, #0]
   d5202:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d5206:	6023      	str	r3, [r4, #0]
   d5208:	6853      	ldr	r3, [r2, #4]
   d520a:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   d520c:	a801      	add	r0, sp, #4
   d520e:	f7ff fda1 	bl	d4d54 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   d5212:	4620      	mov	r0, r4
   d5214:	b003      	add	sp, #12
   d5216:	bd30      	pop	{r4, r5, pc}

000d5218 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d5218:	b530      	push	{r4, r5, lr}
   d521a:	4605      	mov	r5, r0
   d521c:	b087      	sub	sp, #28
   d521e:	460c      	mov	r4, r1
    WiringBleLock lk;
   d5220:	a801      	add	r0, sp, #4
   d5222:	f7ff fd8f 	bl	d4d44 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d5226:	682a      	ldr	r2, [r5, #0]
   d5228:	6823      	ldr	r3, [r4, #0]
   d522a:	8812      	ldrh	r2, [r2, #0]
   d522c:	881b      	ldrh	r3, [r3, #0]
   d522e:	429a      	cmp	r2, r3
   d5230:	d10d      	bne.n	d524e <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   d5232:	4629      	mov	r1, r5
   d5234:	a802      	add	r0, sp, #8
   d5236:	f7ff ffdd 	bl	d51f4 <_ZNK8particle13BlePeerDevice7addressEv>
   d523a:	4621      	mov	r1, r4
   d523c:	a804      	add	r0, sp, #16
   d523e:	f7ff ffd9 	bl	d51f4 <_ZNK8particle13BlePeerDevice7addressEv>
   d5242:	a904      	add	r1, sp, #16
   d5244:	a802      	add	r0, sp, #8
   d5246:	f7ff fd9a 	bl	d4d7e <_ZNK8particle10BleAddresseqERKS0_>
   d524a:	4604      	mov	r4, r0
   d524c:	b900      	cbnz	r0, d5250 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   d524e:	2400      	movs	r4, #0
    WiringBleLock lk;
   d5250:	a801      	add	r0, sp, #4
   d5252:	f7ff fd7f 	bl	d4d54 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   d5256:	4620      	mov	r0, r4
   d5258:	b007      	add	sp, #28
   d525a:	bd30      	pop	{r4, r5, pc}

000d525c <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d525c:	b510      	push	{r4, lr}
   d525e:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d5260:	2054      	movs	r0, #84	; 0x54
   d5262:	f7fe ff16 	bl	d4092 <_Znwj>
   d5266:	4601      	mov	r1, r0
   d5268:	b160      	cbz	r0, d5284 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   d526a:	2300      	movs	r3, #0
   d526c:	e9c0 3300 	strd	r3, r3, [r0]
   d5270:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d5274:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d5278:	e9c0 3306 	strd	r3, r3, [r0, #24]
   d527c:	6203      	str	r3, [r0, #32]
   d527e:	62c3      	str	r3, [r0, #44]	; 0x2c
   d5280:	63c3      	str	r3, [r0, #60]	; 0x3c
   d5282:	64c3      	str	r3, [r0, #76]	; 0x4c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d5284:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d5286:	b919      	cbnz	r1, d5290 <_ZN8particle14BleLocalDeviceC1Ev+0x34>
        SPARK_ASSERT(false);
   d5288:	4a09      	ldr	r2, [pc, #36]	; (d52b0 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d528a:	200a      	movs	r0, #10
   d528c:	f7ff fa42 	bl	d4714 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d5290:	2000      	movs	r0, #0
   d5292:	f7ff f92d 	bl	d44f0 <hal_ble_stack_init>
   d5296:	b120      	cbz	r0, d52a2 <_ZN8particle14BleLocalDeviceC1Ev+0x46>
   d5298:	4a05      	ldr	r2, [pc, #20]	; (d52b0 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d529a:	2100      	movs	r1, #0
   d529c:	200a      	movs	r0, #10
   d529e:	f7ff fa39 	bl	d4714 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d52a2:	6821      	ldr	r1, [r4, #0]
   d52a4:	4803      	ldr	r0, [pc, #12]	; (d52b4 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d52a6:	2200      	movs	r2, #0
   d52a8:	f7ff f97e 	bl	d45a8 <hal_ble_set_callback_on_periph_link_events>
}
   d52ac:	4620      	mov	r0, r4
   d52ae:	bd10      	pop	{r4, pc}
   d52b0:	000d44d1 	.word	0x000d44d1
   d52b4:	000d5631 	.word	0x000d5631

000d52b8 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d52b8:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d52ba:	4c0b      	ldr	r4, [pc, #44]	; (d52e8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d52bc:	7823      	ldrb	r3, [r4, #0]
   d52be:	f3bf 8f5b 	dmb	ish
   d52c2:	07db      	lsls	r3, r3, #31
   d52c4:	d40e      	bmi.n	d52e4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d52c6:	4620      	mov	r0, r4
   d52c8:	f7fe fee7 	bl	d409a <__cxa_guard_acquire>
   d52cc:	b150      	cbz	r0, d52e4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d52ce:	4807      	ldr	r0, [pc, #28]	; (d52ec <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d52d0:	f7ff ffc4 	bl	d525c <_ZN8particle14BleLocalDeviceC1Ev>
   d52d4:	4620      	mov	r0, r4
   d52d6:	f7fe fee5 	bl	d40a4 <__cxa_guard_release>
   d52da:	4a05      	ldr	r2, [pc, #20]	; (d52f0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d52dc:	4905      	ldr	r1, [pc, #20]	; (d52f4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x3c>)
   d52de:	4803      	ldr	r0, [pc, #12]	; (d52ec <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d52e0:	f001 f8fc 	bl	d64dc <__aeabi_atexit>
    return instance;
}
   d52e4:	4801      	ldr	r0, [pc, #4]	; (d52ec <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d52e6:	bd10      	pop	{r4, pc}
   d52e8:	2003e774 	.word	0x2003e774
   d52ec:	2003e780 	.word	0x2003e780
   d52f0:	2003e710 	.word	0x2003e710
   d52f4:	000d54b1 	.word	0x000d54b1

000d52f8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d52f8:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   d52fa:	6803      	ldr	r3, [r0, #0]
   d52fc:	3b09      	subs	r3, #9
   d52fe:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d5300:	b08d      	sub	sp, #52	; 0x34
   d5302:	4604      	mov	r4, r0
   d5304:	460d      	mov	r5, r1
    switch (event->type) {
   d5306:	d811      	bhi.n	d532c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d5308:	f7ff ffd6 	bl	d52b8 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d530c:	88a1      	ldrh	r1, [r4, #4]
   d530e:	6800      	ldr	r0, [r0, #0]
   d5310:	f7ff feb8 	bl	d5084 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d5314:	4603      	mov	r3, r0
   d5316:	b958      	cbnz	r0, d5330 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d5318:	2220      	movs	r2, #32
   d531a:	e9cd 2004 	strd	r2, r0, [sp, #16]
   d531e:	4a0b      	ldr	r2, [pc, #44]	; (d534c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   d5320:	9200      	str	r2, [sp, #0]
   d5322:	490b      	ldr	r1, [pc, #44]	; (d5350 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   d5324:	aa04      	add	r2, sp, #16
   d5326:	2032      	movs	r0, #50	; 0x32
   d5328:	f7ff f9fc 	bl	d4724 <log_message>
}
   d532c:	b00d      	add	sp, #52	; 0x34
   d532e:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   d5330:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   d5332:	2a00      	cmp	r2, #0
   d5334:	d0fa      	beq.n	d532c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   d5336:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d533a:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   d533e:	e9cd 1203 	strd	r1, r2, [sp, #12]
   d5342:	6dac      	ldr	r4, [r5, #88]	; 0x58
   d5344:	aa04      	add	r2, sp, #16
   d5346:	a903      	add	r1, sp, #12
   d5348:	47a0      	blx	r4
}
   d534a:	e7ef      	b.n	d532c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   d534c:	000d6a47 	.word	0x000d6a47
   d5350:	000d6a20 	.word	0x000d6a20

000d5354 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d5354:	4608      	mov	r0, r1
   d5356:	b911      	cbnz	r1, d535e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d5358:	460a      	mov	r2, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d535a:	f7ff b8d1 	b.w	d4500 <hal_ble_gap_set_advertising_data>
   d535e:	6a09      	ldr	r1, [r1, #32]
   d5360:	2200      	movs	r2, #0
   d5362:	e7fa      	b.n	d535a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000d5364 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d5364:	b507      	push	{r0, r1, r2, lr}
    if (scanResponse == nullptr) {
   d5366:	4608      	mov	r0, r1
   d5368:	b929      	cbnz	r1, d5376 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d536a:	460a      	mov	r2, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   d536c:	b003      	add	sp, #12
   d536e:	f85d eb04 	ldr.w	lr, [sp], #4
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d5372:	f7ff b8cd 	b.w	d4510 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d5376:	2101      	movs	r1, #1
   d5378:	9001      	str	r0, [sp, #4]
   d537a:	f7ff fe47 	bl	d500c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d537e:	9801      	ldr	r0, [sp, #4]
   d5380:	2200      	movs	r2, #0
   d5382:	6a01      	ldr	r1, [r0, #32]
   d5384:	e7f2      	b.n	d536c <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x8>

000d5386 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d5386:	b538      	push	{r3, r4, r5, lr}
   d5388:	4604      	mov	r4, r0
   d538a:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   d538c:	f7ff ffe2 	bl	d5354 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d5390:	2800      	cmp	r0, #0
   d5392:	db0a      	blt.n	d53aa <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   d5394:	4629      	mov	r1, r5
   d5396:	4620      	mov	r0, r4
   d5398:	f7ff ffe4 	bl	d5364 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d539c:	2800      	cmp	r0, #0
   d539e:	db04      	blt.n	d53aa <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   d53a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   d53a4:	2000      	movs	r0, #0
   d53a6:	f7ff b8bb 	b.w	d4520 <hal_ble_gap_start_advertising>
}
   d53aa:	bd38      	pop	{r3, r4, r5, pc}

000d53ac <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   d53ac:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d53ae:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   d53b0:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d53b2:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d53b4:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   d53b6:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d53b8:	f7fe fe6b 	bl	d4092 <_Znwj>
   d53bc:	b118      	cbz	r0, d53c6 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d53be:	682b      	ldr	r3, [r5, #0]
   d53c0:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d53c2:	686b      	ldr	r3, [r5, #4]
   d53c4:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   d53c6:	4b03      	ldr	r3, [pc, #12]	; (d53d4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   d53c8:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   d53ca:	4b03      	ldr	r3, [pc, #12]	; (d53d8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d53cc:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   d53ce:	60a3      	str	r3, [r4, #8]
      }
   d53d0:	4620      	mov	r0, r4
   d53d2:	bd38      	pop	{r3, r4, r5, pc}
   d53d4:	000d4cdb 	.word	0x000d4cdb
   d53d8:	000d4c9d 	.word	0x000d4c9d

000d53dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d53dc:	680b      	ldr	r3, [r1, #0]
   d53de:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d53e0:	b113      	cbz	r3, d53e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d53e2:	685a      	ldr	r2, [r3, #4]
   d53e4:	3201      	adds	r2, #1
   d53e6:	605a      	str	r2, [r3, #4]
      }
   d53e8:	4770      	bx	lr

000d53ea <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d53ea:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d53ec:	f851 3b04 	ldr.w	r3, [r1], #4
   d53f0:	4604      	mov	r4, r0
   d53f2:	f840 3b04 	str.w	r3, [r0], #4
   d53f6:	f7ff fff1 	bl	d53dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   d53fa:	6823      	ldr	r3, [r4, #0]
   d53fc:	b90b      	cbnz	r3, d5402 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d53fe:	f7ff fc45 	bl	d4c8c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   d5402:	4620      	mov	r0, r4
   d5404:	bd10      	pop	{r4, pc}

000d5406 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d5406:	b510      	push	{r4, lr}
   d5408:	f851 3b04 	ldr.w	r3, [r1], #4
   d540c:	4604      	mov	r4, r0
   d540e:	f840 3b04 	str.w	r3, [r0], #4
   d5412:	f7ff ffe3 	bl	d53dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d5416:	4620      	mov	r0, r4
   d5418:	bd10      	pop	{r4, pc}

000d541a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d541a:	b510      	push	{r4, lr}
   d541c:	f851 3b04 	ldr.w	r3, [r1], #4
   d5420:	4604      	mov	r4, r0
   d5422:	f840 3b04 	str.w	r3, [r0], #4
   d5426:	f7ff ffd9 	bl	d53dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d542a:	4620      	mov	r0, r4
   d542c:	bd10      	pop	{r4, pc}

000d542e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d542e:	b510      	push	{r4, lr}
   d5430:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d5432:	6800      	ldr	r0, [r0, #0]
   d5434:	b128      	cbz	r0, d5442 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d5436:	6843      	ldr	r3, [r0, #4]
   d5438:	3b01      	subs	r3, #1
   d543a:	6043      	str	r3, [r0, #4]
   d543c:	b90b      	cbnz	r3, d5442 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d543e:	f7ff fb98 	bl	d4b72 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d5442:	4620      	mov	r0, r4
   d5444:	bd10      	pop	{r4, pc}

000d5446 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   d5446:	b510      	push	{r4, lr}
   d5448:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   d544a:	3004      	adds	r0, #4
   d544c:	f7ff ffef 	bl	d542e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5450:	4620      	mov	r0, r4
   d5452:	bd10      	pop	{r4, pc}

000d5454 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5454:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5456:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d545a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d545c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d5460:	42ae      	cmp	r6, r5
   d5462:	d004      	beq.n	d546e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d5464:	1d28      	adds	r0, r5, #4
   d5466:	f7ff ffe2 	bl	d542e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d546a:	3508      	adds	r5, #8
   d546c:	e7f8      	b.n	d5460 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d546e:	6820      	ldr	r0, [r4, #0]
   d5470:	f7ff fa26 	bl	d48c0 <free>
}
   d5474:	4620      	mov	r0, r4
   d5476:	bd70      	pop	{r4, r5, r6, pc}

000d5478 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5478:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d547a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d547e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d5480:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d5484:	42ae      	cmp	r6, r5
   d5486:	d004      	beq.n	d5492 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d5488:	1d28      	adds	r0, r5, #4
   d548a:	f7ff ffd0 	bl	d542e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d548e:	3508      	adds	r5, #8
   d5490:	e7f8      	b.n	d5484 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d5492:	6820      	ldr	r0, [r4, #0]
   d5494:	f7ff fa14 	bl	d48c0 <free>
}
   d5498:	4620      	mov	r0, r4
   d549a:	bd70      	pop	{r4, r5, r6, pc}

000d549c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d549c:	b510      	push	{r4, lr}
   d549e:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   d54a0:	3024      	adds	r0, #36	; 0x24
   d54a2:	f7ff ffe9 	bl	d5478 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d54a6:	f104 0018 	add.w	r0, r4, #24
   d54aa:	f7ff ffd3 	bl	d5454 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   d54ae:	bd10      	pop	{r4, pc}

000d54b0 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d54b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__ptr != nullptr)
   d54b2:	6804      	ldr	r4, [r0, #0]
   d54b4:	4606      	mov	r6, r0
   d54b6:	b324      	cbz	r4, d5502 <_ZN8particle14BleLocalDeviceD1Ev+0x52>
    class function<_Res(_ArgTypes...)>
   d54b8:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d54bc:	f7ff fc19 	bl	d4cf2 <_ZNSt14_Function_baseD1Ev>
   d54c0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d54c4:	f7ff fc15 	bl	d4cf2 <_ZNSt14_Function_baseD1Ev>
   d54c8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d54cc:	f7ff fc11 	bl	d4cf2 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   d54d0:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   d54d4:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (; p != end; ++p) {
   d54d8:	42af      	cmp	r7, r5
   d54da:	d004      	beq.n	d54e6 <_ZN8particle14BleLocalDeviceD1Ev+0x36>
      ~__shared_ptr() = default;
   d54dc:	1d28      	adds	r0, r5, #4
   d54de:	f7ff ffa6 	bl	d542e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d54e2:	3508      	adds	r5, #8
   d54e4:	e7f8      	b.n	d54d8 <_ZN8particle14BleLocalDeviceD1Ev+0x28>
    ::free(ptr);
   d54e6:	69a0      	ldr	r0, [r4, #24]
   d54e8:	f7ff f9ea 	bl	d48c0 <free>
    ~BleLocalDeviceImpl() = default;
   d54ec:	f104 000c 	add.w	r0, r4, #12
   d54f0:	f7ff ffc2 	bl	d5478 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d54f4:	4620      	mov	r0, r4
   d54f6:	f7ff ffad 	bl	d5454 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   d54fa:	2154      	movs	r1, #84	; 0x54
   d54fc:	4620      	mov	r0, r4
   d54fe:	f000 fff2 	bl	d64e6 <_ZdlPvj>
   d5502:	4630      	mov	r0, r6
   d5504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5506 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   d5506:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d5508:	b510      	push	{r4, lr}
      if (_M_empty())
   d550a:	b90a      	cbnz	r2, d5510 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   d550c:	f000 ffed 	bl	d64ea <_ZSt25__throw_bad_function_callv>
    }
   d5510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5514:	68c3      	ldr	r3, [r0, #12]
   d5516:	4718      	bx	r3

000d5518 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d5518:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d551a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d551c:	4604      	mov	r4, r0
   d551e:	460d      	mov	r5, r1
   d5520:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d5522:	d914      	bls.n	d554e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d5524:	4290      	cmp	r0, r2
   d5526:	d213      	bcs.n	d5550 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d5528:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d552c:	1a75      	subs	r5, r6, r1
   d552e:	f1a1 0708 	sub.w	r7, r1, #8
   d5532:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d5534:	42b7      	cmp	r7, r6
   d5536:	d018      	beq.n	d556a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d5538:	b11c      	cbz	r4, d5542 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d553a:	4631      	mov	r1, r6
   d553c:	4620      	mov	r0, r4
   d553e:	f7ff ff6c 	bl	d541a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d5542:	1d30      	adds	r0, r6, #4
   d5544:	f7ff ff73 	bl	d542e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d5548:	3e08      	subs	r6, #8
   d554a:	3c08      	subs	r4, #8
   d554c:	e7f2      	b.n	d5534 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d554e:	d00c      	beq.n	d556a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d5550:	42b5      	cmp	r5, r6
   d5552:	d00a      	beq.n	d556a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d5554:	b11c      	cbz	r4, d555e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d5556:	4629      	mov	r1, r5
   d5558:	4620      	mov	r0, r4
   d555a:	f7ff ff5e 	bl	d541a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d555e:	1d28      	adds	r0, r5, #4
   d5560:	f7ff ff65 	bl	d542e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d5564:	3508      	adds	r5, #8
   d5566:	3408      	adds	r4, #8
   d5568:	e7f2      	b.n	d5550 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d556a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d556c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d556c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d5570:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5574:	4605      	mov	r5, r0
   d5576:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d5578:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
        for (; p != end; ++p) {
   d557c:	42a7      	cmp	r7, r4
   d557e:	d103      	bne.n	d5588 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x1c>
        return false;
   d5580:	2600      	movs	r6, #0
}
   d5582:	4630      	mov	r0, r6
   d5584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (*p == value) {
   d5588:	4641      	mov	r1, r8
   d558a:	4620      	mov	r0, r4
   d558c:	f7ff fe44 	bl	d5218 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d5590:	4606      	mov	r6, r0
   d5592:	b908      	cbnz	r0, d5598 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>
        for (; p != end; ++p) {
   d5594:	3408      	adds	r4, #8
   d5596:	e7f1      	b.n	d557c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
    if (!p) {
   d5598:	2c00      	cmp	r4, #0
   d559a:	d0f1      	beq.n	d5580 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x14>
   d559c:	1d20      	adds	r0, r4, #4
   d559e:	f7ff ff46 	bl	d542e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   d55a2:	e9d5 3200 	ldrd	r3, r2, [r5]
   d55a6:	f104 0108 	add.w	r1, r4, #8
   d55aa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d55ae:	4620      	mov	r0, r4
   d55b0:	f7ff ffb2 	bl	d5518 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d55b4:	686b      	ldr	r3, [r5, #4]
   d55b6:	3b01      	subs	r3, #1
   d55b8:	606b      	str	r3, [r5, #4]
    return true;
   d55ba:	e7e2      	b.n	d5582 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x16>

000d55bc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d55bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d55be:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d55c0:	6846      	ldr	r6, [r0, #4]
   d55c2:	4668      	mov	r0, sp
   d55c4:	f7ff ff29 	bl	d541a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d55c8:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   d55cc:	429f      	cmp	r7, r3
   d55ce:	db12      	blt.n	d55f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   d55d0:	3701      	adds	r7, #1
        if (n > 0) {
   d55d2:	2f00      	cmp	r7, #0
   d55d4:	dd29      	ble.n	d562a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   d55d6:	00f8      	lsls	r0, r7, #3
   d55d8:	f7ff f96a 	bl	d48b0 <malloc>
            if (!d) {
   d55dc:	4605      	mov	r5, r0
   d55de:	b1f0      	cbz	r0, d561e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   d55e0:	e9d4 1200 	ldrd	r1, r2, [r4]
   d55e4:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d55e8:	f7ff ff96 	bl	d5518 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d55ec:	6820      	ldr	r0, [r4, #0]
   d55ee:	f7ff f967 	bl	d48c0 <free>
        data_ = d;
   d55f2:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d55f4:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   d55f6:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d55f8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d55fa:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   d55fe:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5602:	4631      	mov	r1, r6
   d5604:	f106 0008 	add.w	r0, r6, #8
   d5608:	f7ff ff86 	bl	d5518 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d560c:	b11e      	cbz	r6, d5616 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   d560e:	4669      	mov	r1, sp
   d5610:	4630      	mov	r0, r6
   d5612:	f7ff ff02 	bl	d541a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d5616:	6863      	ldr	r3, [r4, #4]
   d5618:	3301      	adds	r3, #1
   d561a:	6063      	str	r3, [r4, #4]
    return true;
   d561c:	2501      	movs	r5, #1
   d561e:	a801      	add	r0, sp, #4
   d5620:	f7ff ff05 	bl	d542e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5624:	4628      	mov	r0, r5
   d5626:	b003      	add	sp, #12
   d5628:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   d562a:	2500      	movs	r5, #0
   d562c:	e7de      	b.n	d55ec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>
	...

000d5630 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d5630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5634:	4605      	mov	r5, r0
   d5636:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   d5638:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d563a:	460c      	mov	r4, r1
        WiringBleLock lk;
   d563c:	f7ff fb82 	bl	d4d44 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d5640:	682e      	ldr	r6, [r5, #0]
   d5642:	2e04      	cmp	r6, #4
   d5644:	d06b      	beq.n	d571e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
   d5646:	d807      	bhi.n	d5658 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x28>
   d5648:	2e03      	cmp	r6, #3
   d564a:	d028      	beq.n	d569e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x6e>
        WiringBleLock lk;
   d564c:	a803      	add	r0, sp, #12
   d564e:	f7ff fb81 	bl	d4d54 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   d5652:	b00e      	add	sp, #56	; 0x38
   d5654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (event->type) {
   d5658:	f1a6 030c 	sub.w	r3, r6, #12
   d565c:	2b03      	cmp	r3, #3
   d565e:	d8f5      	bhi.n	d564c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d5660:	89a9      	ldrh	r1, [r5, #12]
   d5662:	4620      	mov	r0, r4
   d5664:	f7ff fd0e 	bl	d5084 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d5668:	4607      	mov	r7, r0
   d566a:	2800      	cmp	r0, #0
   d566c:	d0ee      	beq.n	d564c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                    if (impl->pairingEventCallback_) {
   d566e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   d5670:	2b00      	cmp	r3, #0
   d5672:	d0eb      	beq.n	d564c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        BlePairingEvent pairingEvent = {
   d5674:	2210      	movs	r2, #16
   d5676:	2100      	movs	r1, #0
   d5678:	a807      	add	r0, sp, #28
   d567a:	f001 f88f 	bl	d679c <memset>
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d567e:	2e0d      	cmp	r6, #13
                        };
   d5680:	9706      	str	r7, [sp, #24]
                            .type = static_cast<BlePairingEventType>(event->type)
   d5682:	f88d 601c 	strb.w	r6, [sp, #28]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d5686:	f040 8092 	bne.w	d57ae <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                            pairingEvent.payload.passkey = event->params.passkey_display.passkey;
   d568a:	686b      	ldr	r3, [r5, #4]
   d568c:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payloadLen = BLE_PAIRING_PASSKEY_LEN;
   d568e:	2306      	movs	r3, #6
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d5690:	9308      	str	r3, [sp, #32]
   d5692:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d5694:	a906      	add	r1, sp, #24
   d5696:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d569a:	4798      	blx	r3
   d569c:	e7d6      	b.n	d564c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice peer;
   d569e:	a804      	add	r0, sp, #16
   d56a0:	f7ff fd86 	bl	d51b0 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d56a4:	9b04      	ldr	r3, [sp, #16]
   d56a6:	89aa      	ldrh	r2, [r5, #12]
   d56a8:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   d56aa:	6869      	ldr	r1, [r5, #4]
   d56ac:	9804      	ldr	r0, [sp, #16]
   d56ae:	3108      	adds	r1, #8
   d56b0:	3002      	adds	r0, #2
   d56b2:	f7ff fb57 	bl	d4d64 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   d56b6:	a904      	add	r1, sp, #16
   d56b8:	a806      	add	r0, sp, #24
   d56ba:	f7ff feae 	bl	d541a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   d56be:	a906      	add	r1, sp, #24
   d56c0:	f104 0018 	add.w	r0, r4, #24
   d56c4:	f7ff ff7a 	bl	d55bc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d56c8:	4605      	mov	r5, r0
   d56ca:	a807      	add	r0, sp, #28
   d56cc:	f7ff feaf 	bl	d542e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d56d0:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d56d2:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   d56d4:	b98d      	cbnz	r5, d56fa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
                    LOG(ERROR, "Failed to append peer Central device.");
   d56d6:	4b3e      	ldr	r3, [pc, #248]	; (d57d0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a0>)
   d56d8:	493e      	ldr	r1, [pc, #248]	; (d57d4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d56da:	9300      	str	r3, [sp, #0]
   d56dc:	2032      	movs	r0, #50	; 0x32
   d56de:	462b      	mov	r3, r5
   d56e0:	aa06      	add	r2, sp, #24
   d56e2:	9507      	str	r5, [sp, #28]
   d56e4:	f7ff f81e 	bl	d4724 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d56e8:	9b04      	ldr	r3, [sp, #16]
   d56ea:	4629      	mov	r1, r5
   d56ec:	8818      	ldrh	r0, [r3, #0]
   d56ee:	f7fe ff1f 	bl	d4530 <hal_ble_gap_disconnect>
   d56f2:	a805      	add	r0, sp, #20
   d56f4:	f7ff fe9b 	bl	d542e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d56f8:	e7a8      	b.n	d564c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                LOG(TRACE, "Connected by Central device.");
   d56fa:	4a37      	ldr	r2, [pc, #220]	; (d57d8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   d56fc:	9200      	str	r2, [sp, #0]
   d56fe:	2300      	movs	r3, #0
   d5700:	4934      	ldr	r1, [pc, #208]	; (d57d4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d5702:	9307      	str	r3, [sp, #28]
   d5704:	aa06      	add	r2, sp, #24
   d5706:	2001      	movs	r0, #1
   d5708:	f7ff f80c 	bl	d4724 <log_message>
                if (impl->connectedCallback_) {
   d570c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d570e:	2b00      	cmp	r3, #0
   d5710:	d0ef      	beq.n	d56f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                    impl->connectedCallback_(peer);
   d5712:	a904      	add	r1, sp, #16
   d5714:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d5718:	f7ff fef5 	bl	d5506 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   d571c:	e7e9      	b.n	d56f2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d571e:	89a9      	ldrh	r1, [r5, #12]
   d5720:	4620      	mov	r0, r4
   d5722:	f7ff fcaf 	bl	d5084 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d5726:	4606      	mov	r6, r0
   d5728:	2800      	cmp	r0, #0
   d572a:	d08f      	beq.n	d564c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
        return impl_.get();
   d572c:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   d572e:	e9d5 3106 	ldrd	r3, r1, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d5732:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5736:	802a      	strh	r2, [r5, #0]
   d5738:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics()) {
   d573c:	4299      	cmp	r1, r3
   d573e:	d003      	beq.n	d5748 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x118>
        return impl_.get();
   d5740:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d5744:	8042      	strh	r2, [r0, #2]
        for (auto& characteristic : characteristics()) {
   d5746:	e7f9      	b.n	d573c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
    destruct(data_, data_ + size_);
   d5748:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   d574c:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d5750:	45b8      	cmp	r8, r7
   d5752:	d004      	beq.n	d575e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12e>
   d5754:	1d38      	adds	r0, r7, #4
   d5756:	f7ff fe6a 	bl	d542e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d575a:	3708      	adds	r7, #8
   d575c:	e7f8      	b.n	d5750 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x120>
    size_ = 0;
   d575e:	2300      	movs	r3, #0
   d5760:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   d5762:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   d5766:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d576a:	45b8      	cmp	r8, r7
   d576c:	d004      	beq.n	d5778 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x148>
   d576e:	1d38      	adds	r0, r7, #4
   d5770:	f7ff fe5d 	bl	d542e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5774:	3708      	adds	r7, #8
   d5776:	e7f8      	b.n	d576a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13a>
    size_ = 0;
   d5778:	2300      	movs	r3, #0
   d577a:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   d577c:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   d577e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d5780:	b123      	cbz	r3, d578c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x15c>
                        impl->disconnectedCallback_(*peer);
   d5782:	4631      	mov	r1, r6
   d5784:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d5788:	f7ff febd 	bl	d5506 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   d578c:	2300      	movs	r3, #0
   d578e:	2220      	movs	r2, #32
   d5790:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d5794:	4a11      	ldr	r2, [pc, #68]	; (d57dc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ac>)
   d5796:	9200      	str	r2, [sp, #0]
   d5798:	490e      	ldr	r1, [pc, #56]	; (d57d4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d579a:	aa06      	add	r2, sp, #24
   d579c:	2001      	movs	r0, #1
   d579e:	f7fe ffc1 	bl	d4724 <log_message>
                    impl->peers_.removeOne(*peer);
   d57a2:	4631      	mov	r1, r6
   d57a4:	f104 0018 	add.w	r0, r4, #24
   d57a8:	f7ff fee0 	bl	d556c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
   d57ac:	e74e      	b.n	d564c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   d57ae:	2e0f      	cmp	r6, #15
   d57b0:	f47f af6f 	bne.w	d5692 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x62>
                            pairingEvent.payload.status.status = event->params.pairing_status.status;
   d57b4:	686b      	ldr	r3, [r5, #4]
   d57b6:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d57b8:	7a2b      	ldrb	r3, [r5, #8]
   d57ba:	f003 0201 	and.w	r2, r3, #1
                            pairingEvent.payload.status.lesc = event->params.pairing_status.lesc;
   d57be:	f3c3 0340 	ubfx	r3, r3, #1, #1
   d57c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d57c6:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d57ca:	2308      	movs	r3, #8
   d57cc:	e760      	b.n	d5690 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x60>
   d57ce:	bf00      	nop
   d57d0:	000d6a5f 	.word	0x000d6a5f
   d57d4:	000d6a20 	.word	0x000d6a20
   d57d8:	000d6a85 	.word	0x000d6a85
   d57dc:	000d6aa2 	.word	0x000d6aa2

000d57e0 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>:
      operator=(__shared_ptr&& __r) noexcept
   d57e0:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   d57e2:	2300      	movs	r3, #0
      operator=(__shared_ptr&& __r) noexcept
   d57e4:	4604      	mov	r4, r0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d57e6:	e9d1 0200 	ldrd	r0, r2, [r1]
	__r._M_ptr = 0;
   d57ea:	e9c1 3300 	strd	r3, r3, [r1]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d57ee:	6823      	ldr	r3, [r4, #0]
   d57f0:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d57f2:	6020      	str	r0, [r4, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d57f4:	6863      	ldr	r3, [r4, #4]
	__r._M_pi = _M_pi;
   d57f6:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
   d57f8:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   d57fa:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   d57fc:	f7ff fe17 	bl	d542e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   d5800:	4620      	mov	r0, r4
   d5802:	b002      	add	sp, #8
   d5804:	bd10      	pop	{r4, pc}

000d5806 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d5806:	b513      	push	{r0, r1, r4, lr}
   d5808:	460b      	mov	r3, r1
   d580a:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d580c:	e9d0 0100 	ldrd	r0, r1, [r0]
   d5810:	466c      	mov	r4, sp
   d5812:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5816:	e893 0003 	ldmia.w	r3, {r0, r1}
   d581a:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d581e:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5822:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5826:	b002      	add	sp, #8
   d5828:	bd10      	pop	{r4, pc}

000d582a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   d582a:	b538      	push	{r3, r4, r5, lr}
   d582c:	4605      	mov	r5, r0
   d582e:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   d5830:	f7ff ffe9 	bl	d5806 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5834:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   d5836:	68a2      	ldr	r2, [r4, #8]
   d5838:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d583a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d583c:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   d583e:	68e2      	ldr	r2, [r4, #12]
   d5840:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5842:	60e3      	str	r3, [r4, #12]
      }
   d5844:	bd38      	pop	{r3, r4, r5, pc}

000d5846 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>:
      operator=(function&& __x) noexcept
   d5846:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _Function_base() : _M_manager(nullptr) { }
   d5848:	2300      	movs	r3, #0
      operator=(function&& __x) noexcept
   d584a:	4604      	mov	r4, r0
   d584c:	4608      	mov	r0, r1
	__x.swap(*this);
   d584e:	4669      	mov	r1, sp
    _Function_base() : _M_manager(nullptr) { }
   d5850:	9302      	str	r3, [sp, #8]
	__x.swap(*this);
   d5852:	f7ff ffea 	bl	d582a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   d5856:	4621      	mov	r1, r4
   d5858:	4668      	mov	r0, sp
   d585a:	f7ff ffe6 	bl	d582a <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   d585e:	4668      	mov	r0, sp
   d5860:	f7ff fa47 	bl	d4cf2 <_ZNSt14_Function_baseD1Ev>
      }
   d5864:	4620      	mov	r0, r4
   d5866:	b004      	add	sp, #16
   d5868:	bd10      	pop	{r4, pc}

000d586a <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   d586a:	b570      	push	{r4, r5, r6, lr}
   d586c:	460e      	mov	r6, r1
   d586e:	b088      	sub	sp, #32
   d5870:	4604      	mov	r4, r0
   d5872:	9201      	str	r2, [sp, #4]
   d5874:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   d5876:	f7ff fbe5 	bl	d5044 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   d587a:	7833      	ldrb	r3, [r6, #0]
        description_ = desc;
   d587c:	9901      	ldr	r1, [sp, #4]
        properties_ = properties;
   d587e:	7123      	strb	r3, [r4, #4]
        description_ = desc;
   d5880:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d5884:	f7ff f913 	bl	d4aae <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   d5888:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   d588c:	b185      	cbz	r5, d58b0 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x46>
   d588e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5890:	9502      	str	r5, [sp, #8]
   d5892:	a902      	add	r1, sp, #8
   d5894:	a804      	add	r0, sp, #16
   d5896:	9303      	str	r3, [sp, #12]
   d5898:	f7ff fd88 	bl	d53ac <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
   d589c:	a904      	add	r1, sp, #16
   d589e:	4630      	mov	r0, r6
   d58a0:	f7ff ffd1 	bl	d5846 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>
    class function<_Res(_ArgTypes...)>
   d58a4:	a804      	add	r0, sp, #16
   d58a6:	f7ff fa24 	bl	d4cf2 <_ZNSt14_Function_baseD1Ev>
    }
   d58aa:	4620      	mov	r0, r4
   d58ac:	b008      	add	sp, #32
   d58ae:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   d58b0:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   d58b2:	e7f3      	b.n	d589c <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x32>

000d58b4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d58b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d58b8:	b086      	sub	sp, #24
   d58ba:	4607      	mov	r7, r0
   d58bc:	461d      	mov	r5, r3
   d58be:	2068      	movs	r0, #104	; 0x68
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d58c0:	2300      	movs	r3, #0
   d58c2:	4689      	mov	r9, r1
   d58c4:	4692      	mov	sl, r2
   d58c6:	9304      	str	r3, [sp, #16]
   d58c8:	f7fe fbe3 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d58cc:	1e06      	subs	r6, r0, #0
   d58ce:	f106 080c 	add.w	r8, r6, #12
   d58d2:	d01d      	beq.n	d5910 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   d58d4:	2301      	movs	r3, #1
	: _M_impl(__a)
   d58d6:	4634      	mov	r4, r6
      : _M_use_count(1), _M_weak_count(1) { }
   d58d8:	e9c6 3301 	strd	r3, r3, [r6, #4]
	: _M_impl(__a)
   d58dc:	4b15      	ldr	r3, [pc, #84]	; (d5934 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x80>)
   d58de:	f844 3b20 	str.w	r3, [r4], #32
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
   d58e2:	f89a 3000 	ldrb.w	r3, [sl]
    value_ = flags.value_;
   d58e6:	f88d 300c 	strb.w	r3, [sp, #12]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   d58ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d58ec:	9300      	str	r3, [sp, #0]
   d58ee:	464a      	mov	r2, r9
   d58f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d58f2:	a903      	add	r1, sp, #12
   d58f4:	4640      	mov	r0, r8
   d58f6:	f7ff ffb8 	bl	d586a <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   d58fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d58fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d58fe:	682b      	ldr	r3, [r5, #0]
        svcUuid_ = svcUuid;
   d5900:	9d0e      	ldr	r5, [sp, #56]	; 0x38
        charUuid_ = charUuid;
   d5902:	6023      	str	r3, [r4, #0]
        svcUuid_ = svcUuid;
   d5904:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5906:	f106 0434 	add.w	r4, r6, #52	; 0x34
   d590a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d590c:	682b      	ldr	r3, [r5, #0]
   d590e:	6023      	str	r3, [r4, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   d5910:	a904      	add	r1, sp, #16
   d5912:	4638      	mov	r0, r7
	  __p = __pi->_M_ptr();
   d5914:	e9cd 8604 	strd	r8, r6, [sp, #16]
   d5918:	f7ff ff62 	bl	d57e0 <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>
      ~__shared_ptr() = default;
   d591c:	a805      	add	r0, sp, #20
   d591e:	f7ff fd86 	bl	d542e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   d5922:	6839      	ldr	r1, [r7, #0]
   d5924:	b919      	cbnz	r1, d592e <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x7a>
        SPARK_ASSERT(false);
   d5926:	4a04      	ldr	r2, [pc, #16]	; (d5938 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>)
   d5928:	200a      	movs	r0, #10
   d592a:	f7fe fef3 	bl	d4714 <panic_>
}
   d592e:	b006      	add	sp, #24
   d5930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5934:	000d6b1c 	.word	0x000d6b1c
   d5938:	000d44d1 	.word	0x000d44d1

000d593c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d593c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d593e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5940:	4604      	mov	r4, r0
   d5942:	460d      	mov	r5, r1
   d5944:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d5946:	d914      	bls.n	d5972 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d5948:	4290      	cmp	r0, r2
   d594a:	d213      	bcs.n	d5974 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d594c:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d5950:	1a75      	subs	r5, r6, r1
   d5952:	f1a1 0708 	sub.w	r7, r1, #8
   d5956:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d5958:	42b7      	cmp	r7, r6
   d595a:	d018      	beq.n	d598e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d595c:	b11c      	cbz	r4, d5966 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default;
   d595e:	4631      	mov	r1, r6
   d5960:	4620      	mov	r0, r4
   d5962:	f7ff fd50 	bl	d5406 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d5966:	1d30      	adds	r0, r6, #4
   d5968:	f7ff fd61 	bl	d542e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d596c:	3e08      	subs	r6, #8
   d596e:	3c08      	subs	r4, #8
   d5970:	e7f2      	b.n	d5958 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d5972:	d00c      	beq.n	d598e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d5974:	42b5      	cmp	r5, r6
   d5976:	d00a      	beq.n	d598e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d5978:	b11c      	cbz	r4, d5982 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d597a:	4629      	mov	r1, r5
   d597c:	4620      	mov	r0, r4
   d597e:	f7ff fd42 	bl	d5406 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d5982:	1d28      	adds	r0, r5, #4
   d5984:	f7ff fd53 	bl	d542e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d5988:	3508      	adds	r5, #8
   d598a:	3408      	adds	r4, #8
   d598c:	e7f2      	b.n	d5974 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d598e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5990 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d5990:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d5992:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d5994:	4605      	mov	r5, r0
        if (n > 0) {
   d5996:	dd11      	ble.n	d59bc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d5998:	00f0      	lsls	r0, r6, #3
   d599a:	f7fe ff89 	bl	d48b0 <malloc>
            if (!d) {
   d599e:	4604      	mov	r4, r0
   d59a0:	b158      	cbz	r0, d59ba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d59a2:	e9d5 1200 	ldrd	r1, r2, [r5]
   d59a6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d59aa:	f7ff ffc7 	bl	d593c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d59ae:	6828      	ldr	r0, [r5, #0]
   d59b0:	f7fe ff86 	bl	d48c0 <free>
        data_ = d;
   d59b4:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d59b6:	60ae      	str	r6, [r5, #8]
        return true;
   d59b8:	2001      	movs	r0, #1
    }
   d59ba:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d59bc:	2400      	movs	r4, #0
   d59be:	e7f6      	b.n	d59ae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d59c0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d59c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d59c2:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d59c4:	6845      	ldr	r5, [r0, #4]
   d59c6:	4668      	mov	r0, sp
   d59c8:	f7ff fd1d 	bl	d5406 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d59cc:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d59d0:	4299      	cmp	r1, r3
   d59d2:	da10      	bge.n	d59f6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d59d4:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d59d6:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d59d8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d59dc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d59e0:	4629      	mov	r1, r5
   d59e2:	f105 0008 	add.w	r0, r5, #8
   d59e6:	f7ff ffa9 	bl	d593c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d59ea:	b98d      	cbnz	r5, d5a10 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d59ec:	6863      	ldr	r3, [r4, #4]
   d59ee:	3301      	adds	r3, #1
   d59f0:	6063      	str	r3, [r4, #4]
    return true;
   d59f2:	2601      	movs	r6, #1
   d59f4:	e006      	b.n	d5a04 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d59f6:	3101      	adds	r1, #1
   d59f8:	4620      	mov	r0, r4
   d59fa:	f7ff ffc9 	bl	d5990 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d59fe:	4606      	mov	r6, r0
   d5a00:	2800      	cmp	r0, #0
   d5a02:	d1e7      	bne.n	d59d4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   d5a04:	a801      	add	r0, sp, #4
   d5a06:	f7ff fd12 	bl	d542e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5a0a:	4630      	mov	r0, r6
   d5a0c:	b002      	add	sp, #8
   d5a0e:	bd70      	pop	{r4, r5, r6, pc}
   d5a10:	4669      	mov	r1, sp
   d5a12:	4628      	mov	r0, r5
   d5a14:	f7ff fcf7 	bl	d5406 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d5a18:	e7e8      	b.n	d59ec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d5a1a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d5a1a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d5a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5a1e:	4604      	mov	r4, r0
   d5a20:	460d      	mov	r5, r1
   d5a22:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d5a24:	d914      	bls.n	d5a50 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d5a26:	4290      	cmp	r0, r2
   d5a28:	d213      	bcs.n	d5a52 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d5a2a:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d5a2e:	1a75      	subs	r5, r6, r1
   d5a30:	f1a1 0708 	sub.w	r7, r1, #8
   d5a34:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d5a36:	42b7      	cmp	r7, r6
   d5a38:	d018      	beq.n	d5a6c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d5a3a:	b11c      	cbz	r4, d5a44 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d5a3c:	4631      	mov	r1, r6
   d5a3e:	4620      	mov	r0, r4
   d5a40:	f7ff fcd3 	bl	d53ea <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5a44:	1d30      	adds	r0, r6, #4
   d5a46:	f7ff fcf2 	bl	d542e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d5a4a:	3e08      	subs	r6, #8
   d5a4c:	3c08      	subs	r4, #8
   d5a4e:	e7f2      	b.n	d5a36 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d5a50:	d00c      	beq.n	d5a6c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d5a52:	42b5      	cmp	r5, r6
   d5a54:	d00a      	beq.n	d5a6c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d5a56:	b11c      	cbz	r4, d5a60 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d5a58:	4629      	mov	r1, r5
   d5a5a:	4620      	mov	r0, r4
   d5a5c:	f7ff fcc5 	bl	d53ea <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5a60:	1d28      	adds	r0, r5, #4
   d5a62:	f7ff fce4 	bl	d542e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d5a66:	3508      	adds	r5, #8
   d5a68:	3408      	adds	r4, #8
   d5a6a:	e7f2      	b.n	d5a52 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d5a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5a6e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d5a6e:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d5a70:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d5a72:	4605      	mov	r5, r0
        if (n > 0) {
   d5a74:	dd11      	ble.n	d5a9a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d5a76:	00f0      	lsls	r0, r6, #3
   d5a78:	f7fe ff1a 	bl	d48b0 <malloc>
            if (!d) {
   d5a7c:	4604      	mov	r4, r0
   d5a7e:	b158      	cbz	r0, d5a98 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d5a80:	e9d5 1200 	ldrd	r1, r2, [r5]
   d5a84:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5a88:	f7ff ffc7 	bl	d5a1a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d5a8c:	6828      	ldr	r0, [r5, #0]
   d5a8e:	f7fe ff17 	bl	d48c0 <free>
        data_ = d;
   d5a92:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d5a94:	60ae      	str	r6, [r5, #8]
        return true;
   d5a96:	2001      	movs	r0, #1
    }
   d5a98:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d5a9a:	2400      	movs	r4, #0
   d5a9c:	e7f6      	b.n	d5a8c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d5a9e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5a9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5aa0:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d5aa2:	6845      	ldr	r5, [r0, #4]
   d5aa4:	4668      	mov	r0, sp
   d5aa6:	f7ff fca0 	bl	d53ea <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5aaa:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d5aae:	4299      	cmp	r1, r3
   d5ab0:	da10      	bge.n	d5ad4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d5ab2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5ab4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d5ab6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d5aba:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5abe:	4629      	mov	r1, r5
   d5ac0:	f105 0008 	add.w	r0, r5, #8
   d5ac4:	f7ff ffa9 	bl	d5a1a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5ac8:	b98d      	cbnz	r5, d5aee <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d5aca:	6863      	ldr	r3, [r4, #4]
   d5acc:	3301      	adds	r3, #1
   d5ace:	6063      	str	r3, [r4, #4]
    return true;
   d5ad0:	2601      	movs	r6, #1
   d5ad2:	e006      	b.n	d5ae2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5ad4:	3101      	adds	r1, #1
   d5ad6:	4620      	mov	r0, r4
   d5ad8:	f7ff ffc9 	bl	d5a6e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d5adc:	4606      	mov	r6, r0
   d5ade:	2800      	cmp	r0, #0
   d5ae0:	d1e7      	bne.n	d5ab2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   d5ae2:	a801      	add	r0, sp, #4
   d5ae4:	f7ff fca3 	bl	d542e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5ae8:	4630      	mov	r0, r6
   d5aea:	b002      	add	sp, #8
   d5aec:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   d5aee:	4669      	mov	r1, sp
   d5af0:	4628      	mov	r0, r5
   d5af2:	f7ff fc7a 	bl	d53ea <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5af6:	e7e8      	b.n	d5aca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d5af8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d5af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5afc:	4617      	mov	r7, r2
   d5afe:	b0a1      	sub	sp, #132	; 0x84
   d5b00:	4680      	mov	r8, r0
    WiringBleLock lk;
   d5b02:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d5b04:	460e      	mov	r6, r1
    WiringBleLock lk;
   d5b06:	f7ff f91d 	bl	d4d44 <_ZN8particle3ble13WiringBleLockC1Ev>
   d5b0a:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d5b0c:	7923      	ldrb	r3, [r4, #4]
   d5b0e:	b953      	cbnz	r3, d5b26 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   d5b10:	4639      	mov	r1, r7
   d5b12:	4640      	mov	r0, r8
   d5b14:	f7ff fc69 	bl	d53ea <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   d5b18:	a80a      	add	r0, sp, #40	; 0x28
   d5b1a:	f7ff f91b 	bl	d4d54 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d5b1e:	4640      	mov	r0, r8
   d5b20:	b021      	add	sp, #132	; 0x84
   d5b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d5b26:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   d5b28:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   d5b2c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   d5b30:	9303      	str	r3, [sp, #12]
   d5b32:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   d5b36:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   d5b3a:	9b03      	ldr	r3, [sp, #12]
   d5b3c:	429d      	cmp	r5, r3
   d5b3e:	d021      	beq.n	d5b84 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   d5b40:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   d5b44:	4658      	mov	r0, fp
   d5b46:	f109 0114 	add.w	r1, r9, #20
   d5b4a:	f7ff f9b4 	bl	d4eb6 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   d5b4e:	b1b8      	cbz	r0, d5b80 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   d5b50:	f109 0128 	add.w	r1, r9, #40	; 0x28
   d5b54:	4650      	mov	r0, sl
   d5b56:	f7ff f9ae 	bl	d4eb6 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   d5b5a:	b188      	cbz	r0, d5b80 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   d5b5c:	6823      	ldr	r3, [r4, #0]
   d5b5e:	f8d9 2000 	ldr.w	r2, [r9]
   d5b62:	4053      	eors	r3, r2
   d5b64:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   d5b68:	d10a      	bne.n	d5b80 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d5b6a:	2220      	movs	r2, #32
   d5b6c:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   d5b70:	4a5e      	ldr	r2, [pc, #376]	; (d5cec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   d5b72:	9200      	str	r2, [sp, #0]
   d5b74:	aa15      	add	r2, sp, #84	; 0x54
   d5b76:	495e      	ldr	r1, [pc, #376]	; (d5cf0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   d5b78:	2032      	movs	r0, #50	; 0x32
   d5b7a:	f7fe fdd3 	bl	d4724 <log_message>
   d5b7e:	e7c7      	b.n	d5b10 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   d5b80:	3508      	adds	r5, #8
   d5b82:	e7da      	b.n	d5b3a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   d5b84:	4650      	mov	r0, sl
   d5b86:	f7ff f961 	bl	d4e4c <_ZNK8particle7BleUuid7isValidEv>
   d5b8a:	b960      	cbnz	r0, d5ba6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        return *this = BleUuid(uuid);
   d5b8c:	4959      	ldr	r1, [pc, #356]	; (d5cf4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   d5b8e:	2201      	movs	r2, #1
   d5b90:	a815      	add	r0, sp, #84	; 0x54
   d5b92:	ad15      	add	r5, sp, #84	; 0x54
   d5b94:	f7ff f931 	bl	d4dfa <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d5b98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5b9a:	46d4      	mov	ip, sl
   d5b9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   d5ba0:	682b      	ldr	r3, [r5, #0]
   d5ba2:	f8cc 3000 	str.w	r3, [ip]
   d5ba6:	6833      	ldr	r3, [r6, #0]
   d5ba8:	e9d3 5300 	ldrd	r5, r3, [r3]
   d5bac:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   d5bb0:	455d      	cmp	r5, fp
   d5bb2:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   d5bb4:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   d5bb6:	d06e      	beq.n	d5c96 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d5bb8:	f855 0b08 	ldr.w	r0, [r5], #8
   d5bbc:	f7ff f97b 	bl	d4eb6 <_ZNK8particle7BleUuideqERKS0_>
   d5bc0:	2800      	cmp	r0, #0
   d5bc2:	d0f5      	beq.n	d5bb0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   d5bc4:	f104 0a14 	add.w	sl, r4, #20
   d5bc8:	4650      	mov	r0, sl
   d5bca:	f7ff f93f 	bl	d4e4c <_ZNK8particle7BleUuid7isValidEv>
   d5bce:	b988      	cbnz	r0, d5bf4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   d5bd0:	4b49      	ldr	r3, [pc, #292]	; (d5cf8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d5bd2:	4948      	ldr	r1, [pc, #288]	; (d5cf4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   d5bd4:	881a      	ldrh	r2, [r3, #0]
   d5bd6:	3201      	adds	r2, #1
   d5bd8:	b292      	uxth	r2, r2
   d5bda:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d5bdc:	a815      	add	r0, sp, #84	; 0x54
   d5bde:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   d5be0:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d5be2:	f7ff f929 	bl	d4e38 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d5be6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5be8:	46d4      	mov	ip, sl
   d5bea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   d5bee:	682b      	ldr	r3, [r5, #0]
   d5bf0:	f8cc 3000 	str.w	r3, [ip]
    hal_ble_char_init_t charInit = {};
   d5bf4:	2228      	movs	r2, #40	; 0x28
   d5bf6:	2100      	movs	r1, #0
   d5bf8:	a816      	add	r0, sp, #88	; 0x58
   d5bfa:	f000 fdcf 	bl	d679c <memset>
    charInit.version = BLE_API_VERSION;
   d5bfe:	4b3f      	ldr	r3, [pc, #252]	; (d5cfc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   d5c00:	9315      	str	r3, [sp, #84]	; 0x54
    charInit.uuid = charImpl->charUUID().halUUID();
   d5c02:	4651      	mov	r1, sl
   d5c04:	a804      	add	r0, sp, #16
   d5c06:	f7ff f933 	bl	d4e70 <_ZN8particle7BleUuid7halUUIDEv>
   d5c0a:	ab04      	add	r3, sp, #16
   d5c0c:	aa18      	add	r2, sp, #96	; 0x60
   d5c0e:	f10d 0c20 	add.w	ip, sp, #32
   d5c12:	6818      	ldr	r0, [r3, #0]
   d5c14:	6859      	ldr	r1, [r3, #4]
   d5c16:	4615      	mov	r5, r2
   d5c18:	c503      	stmia	r5!, {r0, r1}
   d5c1a:	3308      	adds	r3, #8
   d5c1c:	4563      	cmp	r3, ip
   d5c1e:	462a      	mov	r2, r5
   d5c20:	d1f7      	bne.n	d5c12 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   d5c22:	6818      	ldr	r0, [r3, #0]
   d5c24:	6028      	str	r0, [r5, #0]
    charInit.properties = charImpl->properties().value();
   d5c26:	7923      	ldrb	r3, [r4, #4]
   d5c28:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   d5c2c:	f8d9 3000 	ldr.w	r3, [r9]
   d5c30:	8a9b      	ldrh	r3, [r3, #20]
   d5c32:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   d5c36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d5c38:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   d5c3a:	4b31      	ldr	r3, [pc, #196]	; (d5d00 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d5c3c:	2200      	movs	r2, #0
   d5c3e:	1da1      	adds	r1, r4, #6
   d5c40:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   d5c42:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d5c46:	f7fe fca5 	bl	d4594 <hal_ble_gatt_server_add_characteristic>
   d5c4a:	2800      	cmp	r0, #0
   d5c4c:	f47f af60 	bne.w	d5b10 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   d5c50:	2301      	movs	r3, #1
   d5c52:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   d5c54:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   d5c56:	4639      	mov	r1, r7
        return characteristics_;
   d5c58:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   d5c5a:	a80d      	add	r0, sp, #52	; 0x34
   d5c5c:	f7ff fbc5 	bl	d53ea <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5c60:	4620      	mov	r0, r4
   d5c62:	a90d      	add	r1, sp, #52	; 0x34
   d5c64:	f7ff ff1b 	bl	d5a9e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d5c68:	4604      	mov	r4, r0
   d5c6a:	a80e      	add	r0, sp, #56	; 0x38
   d5c6c:	f7ff fbdf 	bl	d542e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5c70:	2c00      	cmp	r4, #0
   d5c72:	f47f af4d 	bne.w	d5b10 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   d5c76:	2320      	movs	r3, #32
   d5c78:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   d5c7c:	4b21      	ldr	r3, [pc, #132]	; (d5d04 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   d5c7e:	9300      	str	r3, [sp, #0]
   d5c80:	aa0d      	add	r2, sp, #52	; 0x34
   d5c82:	4623      	mov	r3, r4
   d5c84:	e777      	b.n	d5b76 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   d5c86:	4639      	mov	r1, r7
   d5c88:	4640      	mov	r0, r8
   d5c8a:	f7ff fbae 	bl	d53ea <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5c8e:	a80c      	add	r0, sp, #48	; 0x30
   d5c90:	f7ff fbcd 	bl	d542e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5c94:	e740      	b.n	d5b18 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   d5c96:	a80b      	add	r0, sp, #44	; 0x2c
   d5c98:	f7ff fa66 	bl	d5168 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   d5c9c:	4651      	mov	r1, sl
   d5c9e:	a815      	add	r0, sp, #84	; 0x54
   d5ca0:	f7ff f8e6 	bl	d4e70 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d5ca4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d5ca6:	2300      	movs	r3, #0
   d5ca8:	3214      	adds	r2, #20
   d5caa:	a915      	add	r1, sp, #84	; 0x54
   d5cac:	2001      	movs	r0, #1
   d5cae:	f7fe fc49 	bl	d4544 <hal_ble_gatt_server_add_service>
   d5cb2:	2800      	cmp	r0, #0
   d5cb4:	d1e7      	bne.n	d5c86 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   d5cb6:	6835      	ldr	r5, [r6, #0]
   d5cb8:	a90b      	add	r1, sp, #44	; 0x2c
   d5cba:	a80d      	add	r0, sp, #52	; 0x34
   d5cbc:	f7ff fba3 	bl	d5406 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   d5cc0:	4628      	mov	r0, r5
   d5cc2:	a90d      	add	r1, sp, #52	; 0x34
   d5cc4:	f7ff fe7c 	bl	d59c0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d5cc8:	4605      	mov	r5, r0
   d5cca:	a80e      	add	r0, sp, #56	; 0x38
   d5ccc:	f7ff fbaf 	bl	d542e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5cd0:	2d00      	cmp	r5, #0
   d5cd2:	d0d8      	beq.n	d5c86 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   d5cd4:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   d5cd6:	6853      	ldr	r3, [r2, #4]
   d5cd8:	6812      	ldr	r2, [r2, #0]
   d5cda:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   d5cde:	3b01      	subs	r3, #1
   d5ce0:	a80c      	add	r0, sp, #48	; 0x30
   d5ce2:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   d5ce6:	f7ff fba2 	bl	d542e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5cea:	e76b      	b.n	d5bc4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   d5cec:	000d6ac1 	.word	0x000d6ac1
   d5cf0:	000d6a20 	.word	0x000d6a20
   d5cf4:	000d6b80 	.word	0x000d6b80
   d5cf8:	2003e778 	.word	0x2003e778
   d5cfc:	002c0001 	.word	0x002c0001
   d5d00:	000d52f9 	.word	0x000d52f9
   d5d04:	000d6aec 	.word	0x000d6aec

000d5d08 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d5d08:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d5d0a:	4c06      	ldr	r4, [pc, #24]	; (d5d24 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5d0c:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d5d0e:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d5d10:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d5d12:	f7fe fc67 	bl	d45e4 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d5d16:	4620      	mov	r0, r4
   d5d18:	4a03      	ldr	r2, [pc, #12]	; (d5d28 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5d1a:	4904      	ldr	r1, [pc, #16]	; (d5d2c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d5d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d5d20:	f000 bbdc 	b.w	d64dc <__aeabi_atexit>
   d5d24:	2003e77c 	.word	0x2003e77c
   d5d28:	2003e710 	.word	0x2003e710
   d5d2c:	000d4b93 	.word	0x000d4b93

000d5d30 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5d32:	4606      	mov	r6, r0
   d5d34:	460d      	mov	r5, r1
  size_t n = 0;
   d5d36:	188f      	adds	r7, r1, r2
   d5d38:	2400      	movs	r4, #0
  while (size--) {
   d5d3a:	42bd      	cmp	r5, r7
   d5d3c:	d00c      	beq.n	d5d58 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5d3e:	6833      	ldr	r3, [r6, #0]
   d5d40:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5d44:	689b      	ldr	r3, [r3, #8]
   d5d46:	4630      	mov	r0, r6
   d5d48:	4798      	blx	r3
     if (chunk>=0)
   d5d4a:	1e03      	subs	r3, r0, #0
   d5d4c:	db01      	blt.n	d5d52 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5d4e:	441c      	add	r4, r3
  while (size--) {
   d5d50:	e7f3      	b.n	d5d3a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5d52:	2c00      	cmp	r4, #0
   d5d54:	bf08      	it	eq
   d5d56:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5d58:	4620      	mov	r0, r4
   d5d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5d5c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5d5c:	b513      	push	{r0, r1, r4, lr}
   d5d5e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d5d60:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5d62:	b159      	cbz	r1, d5d7c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5d64:	9101      	str	r1, [sp, #4]
   d5d66:	f000 fd4f 	bl	d6808 <strlen>
   d5d6a:	6823      	ldr	r3, [r4, #0]
   d5d6c:	9901      	ldr	r1, [sp, #4]
   d5d6e:	68db      	ldr	r3, [r3, #12]
   d5d70:	4602      	mov	r2, r0
   d5d72:	4620      	mov	r0, r4
    }
   d5d74:	b002      	add	sp, #8
   d5d76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5d7a:	4718      	bx	r3
    }
   d5d7c:	b002      	add	sp, #8
   d5d7e:	bd10      	pop	{r4, pc}

000d5d80 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5d80:	6803      	ldr	r3, [r0, #0]
   d5d82:	689b      	ldr	r3, [r3, #8]
   d5d84:	4718      	bx	r3

000d5d86 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5d86:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5d88:	210d      	movs	r1, #13
{
   d5d8a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5d8c:	f7ff fff8 	bl	d5d80 <_ZN5Print5printEc>
  n += print('\n');
   d5d90:	210a      	movs	r1, #10
  size_t n = print('\r');
   d5d92:	4604      	mov	r4, r0
  n += print('\n');
   d5d94:	4628      	mov	r0, r5
   d5d96:	f7ff fff3 	bl	d5d80 <_ZN5Print5printEc>
  return n;
}
   d5d9a:	4420      	add	r0, r4
   d5d9c:	bd38      	pop	{r3, r4, r5, pc}

000d5d9e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d5d9e:	b538      	push	{r3, r4, r5, lr}
   d5da0:	4605      	mov	r5, r0
  return write(str);
   d5da2:	f7ff ffdb 	bl	d5d5c <_ZN5Print5writeEPKc>
   d5da6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d5da8:	4628      	mov	r0, r5
   d5daa:	f7ff ffec 	bl	d5d86 <_ZN5Print7printlnEv>
  return n;
}
   d5dae:	4420      	add	r0, r4
   d5db0:	bd38      	pop	{r3, r4, r5, pc}

000d5db2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5db2:	b530      	push	{r4, r5, lr}
   d5db4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5db6:	2300      	movs	r3, #0
   d5db8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5dbc:	2a01      	cmp	r2, #1
   d5dbe:	bf98      	it	ls
   d5dc0:	220a      	movls	r2, #10
   d5dc2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5dc4:	460d      	mov	r5, r1
   d5dc6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5dca:	fb01 5312 	mls	r3, r1, r2, r5
   d5dce:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5dd2:	2b09      	cmp	r3, #9
   d5dd4:	bf94      	ite	ls
   d5dd6:	3330      	addls	r3, #48	; 0x30
   d5dd8:	3337      	addhi	r3, #55	; 0x37
   d5dda:	b2db      	uxtb	r3, r3
  } while(n);
   d5ddc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5dde:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5de2:	d9ef      	bls.n	d5dc4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5de4:	4621      	mov	r1, r4
   d5de6:	f7ff ffb9 	bl	d5d5c <_ZN5Print5writeEPKc>
}
   d5dea:	b00b      	add	sp, #44	; 0x2c
   d5dec:	bd30      	pop	{r4, r5, pc}

000d5dee <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d5dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5df2:	b086      	sub	sp, #24
   d5df4:	af00      	add	r7, sp, #0
   d5df6:	4605      	mov	r5, r0
   d5df8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d5dfa:	1d38      	adds	r0, r7, #4
   d5dfc:	2114      	movs	r1, #20
{
   d5dfe:	4614      	mov	r4, r2
    va_copy(args2, args);
   d5e00:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d5e02:	f7fe fd6d 	bl	d48e0 <vsnprintf>

    if (n<bufsize)
   d5e06:	2813      	cmp	r0, #19
   d5e08:	d80e      	bhi.n	d5e28 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d5e0a:	1d39      	adds	r1, r7, #4
   d5e0c:	4628      	mov	r0, r5
   d5e0e:	f7ff ffa5 	bl	d5d5c <_ZN5Print5writeEPKc>
   d5e12:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d5e14:	b11e      	cbz	r6, d5e1e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d5e16:	4628      	mov	r0, r5
   d5e18:	f7ff ffb5 	bl	d5d86 <_ZN5Print7printlnEv>
   d5e1c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d5e1e:	4620      	mov	r0, r4
   d5e20:	3718      	adds	r7, #24
   d5e22:	46bd      	mov	sp, r7
   d5e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d5e28:	f100 0308 	add.w	r3, r0, #8
   d5e2c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d5e30:	46e8      	mov	r8, sp
        char bigger[n+1];
   d5e32:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d5e36:	4622      	mov	r2, r4
   d5e38:	1c41      	adds	r1, r0, #1
   d5e3a:	683b      	ldr	r3, [r7, #0]
   d5e3c:	4668      	mov	r0, sp
   d5e3e:	f7fe fd4f 	bl	d48e0 <vsnprintf>
  return write(str);
   d5e42:	4669      	mov	r1, sp
   d5e44:	4628      	mov	r0, r5
   d5e46:	f7ff ff89 	bl	d5d5c <_ZN5Print5writeEPKc>
   d5e4a:	4604      	mov	r4, r0
   d5e4c:	46c5      	mov	sp, r8
   d5e4e:	e7e1      	b.n	d5e14 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d5e50 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5e50:	2300      	movs	r3, #0
   d5e52:	6840      	ldr	r0, [r0, #4]
   d5e54:	461a      	mov	r2, r3
   d5e56:	4619      	mov	r1, r3
   d5e58:	f7fe bcc2 	b.w	d47e0 <network_on>

000d5e5c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5e5c:	4b01      	ldr	r3, [pc, #4]	; (d5e64 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5e5e:	4a02      	ldr	r2, [pc, #8]	; (d5e68 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5e60:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d5e62:	4770      	bx	lr
   d5e64:	2003e784 	.word	0x2003e784
   d5e68:	000d6ba0 	.word	0x000d6ba0

000d5e6c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5e6c:	4b02      	ldr	r3, [pc, #8]	; (d5e78 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5e6e:	681a      	ldr	r2, [r3, #0]
   d5e70:	4b02      	ldr	r3, [pc, #8]	; (d5e7c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5e72:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5e74:	4770      	bx	lr
   d5e76:	bf00      	nop
   d5e78:	2003e6a8 	.word	0x2003e6a8
   d5e7c:	2003e788 	.word	0x2003e788

000d5e80 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5e80:	2100      	movs	r1, #0
   d5e82:	f7fe bc5f 	b.w	d4744 <system_delay_ms>

000d5e86 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5e86:	b510      	push	{r4, lr}
   d5e88:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   d5e8a:	f7fe ff32 	bl	d4cf2 <_ZNSt14_Function_baseD1Ev>
   d5e8e:	4620      	mov	r0, r4
   d5e90:	bd10      	pop	{r4, pc}
	...

000d5e94 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d5e94:	4803      	ldr	r0, [pc, #12]	; (d5ea4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5e96:	4a04      	ldr	r2, [pc, #16]	; (d5ea8 <_GLOBAL__sub_I_RGB+0x14>)
   d5e98:	4904      	ldr	r1, [pc, #16]	; (d5eac <_GLOBAL__sub_I_RGB+0x18>)
   d5e9a:	2300      	movs	r3, #0
   d5e9c:	6083      	str	r3, [r0, #8]
   d5e9e:	f000 bb1d 	b.w	d64dc <__aeabi_atexit>
   d5ea2:	bf00      	nop
   d5ea4:	2003e78c 	.word	0x2003e78c
   d5ea8:	2003e710 	.word	0x2003e710
   d5eac:	000d5e87 	.word	0x000d5e87

000d5eb0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5eb0:	4b01      	ldr	r3, [pc, #4]	; (d5eb8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d5eb2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5eb4:	4770      	bx	lr
   d5eb6:	bf00      	nop
   d5eb8:	2003e6ac 	.word	0x2003e6ac

000d5ebc <serialEventRun>:
{
   d5ebc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5ebe:	4b0b      	ldr	r3, [pc, #44]	; (d5eec <serialEventRun+0x30>)
   d5ec0:	b143      	cbz	r3, d5ed4 <serialEventRun+0x18>
   d5ec2:	f000 f95b 	bl	d617c <_Z16_fetch_usbserialv>
   d5ec6:	6803      	ldr	r3, [r0, #0]
   d5ec8:	691b      	ldr	r3, [r3, #16]
   d5eca:	4798      	blx	r3
   d5ecc:	2800      	cmp	r0, #0
   d5ece:	dd01      	ble.n	d5ed4 <serialEventRun+0x18>
        serialEvent();
   d5ed0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5ed4:	4b06      	ldr	r3, [pc, #24]	; (d5ef0 <serialEventRun+0x34>)
   d5ed6:	b143      	cbz	r3, d5eea <serialEventRun+0x2e>
   d5ed8:	f000 f9ce 	bl	d6278 <_Z22__fetch_global_Serial1v>
   d5edc:	6803      	ldr	r3, [r0, #0]
   d5ede:	691b      	ldr	r3, [r3, #16]
   d5ee0:	4798      	blx	r3
   d5ee2:	2800      	cmp	r0, #0
   d5ee4:	dd01      	ble.n	d5eea <serialEventRun+0x2e>
        serialEvent1();
   d5ee6:	f3af 8000 	nop.w
}
   d5eea:	bd08      	pop	{r3, pc}
	...

000d5ef4 <_post_loop>:
{
   d5ef4:	b508      	push	{r3, lr}
	serialEventRun();
   d5ef6:	f7ff ffe1 	bl	d5ebc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d5efa:	f7fe faf1 	bl	d44e0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d5efe:	4b01      	ldr	r3, [pc, #4]	; (d5f04 <_post_loop+0x10>)
   d5f00:	6018      	str	r0, [r3, #0]
}
   d5f02:	bd08      	pop	{r3, pc}
   d5f04:	2003e7ec 	.word	0x2003e7ec

000d5f08 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5f08:	4802      	ldr	r0, [pc, #8]	; (d5f14 <_Z33system_initialize_user_backup_ramv+0xc>)
   d5f0a:	4a03      	ldr	r2, [pc, #12]	; (d5f18 <_Z33system_initialize_user_backup_ramv+0x10>)
   d5f0c:	4903      	ldr	r1, [pc, #12]	; (d5f1c <_Z33system_initialize_user_backup_ramv+0x14>)
   d5f0e:	1a12      	subs	r2, r2, r0
   d5f10:	f000 bc1c 	b.w	d674c <memcpy>
   d5f14:	2003f400 	.word	0x2003f400
   d5f18:	2003f404 	.word	0x2003f404
   d5f1c:	000d6dd0 	.word	0x000d6dd0

000d5f20 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5f20:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5f22:	2300      	movs	r3, #0
   d5f24:	9300      	str	r3, [sp, #0]
   d5f26:	461a      	mov	r2, r3
   d5f28:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5f2c:	f7fe fc24 	bl	d4778 <system_ctrl_set_result>
}
   d5f30:	b003      	add	sp, #12
   d5f32:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5f38 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d5f38:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5f3a:	8843      	ldrh	r3, [r0, #2]
   d5f3c:	2b0a      	cmp	r3, #10
   d5f3e:	d008      	beq.n	d5f52 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5f40:	2b50      	cmp	r3, #80	; 0x50
   d5f42:	d10b      	bne.n	d5f5c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5f44:	4b09      	ldr	r3, [pc, #36]	; (d5f6c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5f46:	681b      	ldr	r3, [r3, #0]
   d5f48:	b14b      	cbz	r3, d5f5e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d5f4a:	b003      	add	sp, #12
   d5f4c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5f50:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d5f52:	f7ff ffe5 	bl	d5f20 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d5f56:	b003      	add	sp, #12
   d5f58:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5f5c:	2300      	movs	r3, #0
   d5f5e:	9300      	str	r3, [sp, #0]
   d5f60:	461a      	mov	r2, r3
   d5f62:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5f66:	f7fe fc07 	bl	d4778 <system_ctrl_set_result>
}
   d5f6a:	e7f4      	b.n	d5f56 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5f6c:	2003e7a0 	.word	0x2003e7a0

000d5f70 <module_user_init_hook>:
{
   d5f70:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5f72:	4c12      	ldr	r4, [pc, #72]	; (d5fbc <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5f74:	4812      	ldr	r0, [pc, #72]	; (d5fc0 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5f76:	4d13      	ldr	r5, [pc, #76]	; (d5fc4 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5f78:	2100      	movs	r1, #0
   d5f7a:	f7fe fcc1 	bl	d4900 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5f7e:	6823      	ldr	r3, [r4, #0]
   d5f80:	42ab      	cmp	r3, r5
   d5f82:	4b11      	ldr	r3, [pc, #68]	; (d5fc8 <module_user_init_hook+0x58>)
   d5f84:	bf0c      	ite	eq
   d5f86:	2201      	moveq	r2, #1
   d5f88:	2200      	movne	r2, #0
   d5f8a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5f8c:	d002      	beq.n	d5f94 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d5f8e:	f7ff ffbb 	bl	d5f08 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5f92:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5f94:	f7fe fa94 	bl	d44c0 <HAL_RNG_GetRandomNumber>
   d5f98:	4604      	mov	r4, r0
    srand(seed);
   d5f9a:	f000 fc07 	bl	d67ac <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5f9e:	4b0b      	ldr	r3, [pc, #44]	; (d5fcc <module_user_init_hook+0x5c>)
   d5fa0:	b113      	cbz	r3, d5fa8 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d5fa2:	4620      	mov	r0, r4
   d5fa4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5fa8:	2100      	movs	r1, #0
   d5faa:	4808      	ldr	r0, [pc, #32]	; (d5fcc <module_user_init_hook+0x5c>)
   d5fac:	f7fe fc78 	bl	d48a0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5fb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5fb4:	4806      	ldr	r0, [pc, #24]	; (d5fd0 <module_user_init_hook+0x60>)
   d5fb6:	2100      	movs	r1, #0
   d5fb8:	f7fe bbd4 	b.w	d4764 <system_ctrl_set_app_request_handler>
   d5fbc:	2003f400 	.word	0x2003f400
   d5fc0:	000d5eb1 	.word	0x000d5eb1
   d5fc4:	9a271c1e 	.word	0x9a271c1e
   d5fc8:	2003e79c 	.word	0x2003e79c
   d5fcc:	00000000 	.word	0x00000000
   d5fd0:	000d5f39 	.word	0x000d5f39

000d5fd4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5fd4:	4770      	bx	lr

000d5fd6 <_ZN9IPAddressD0Ev>:
   d5fd6:	b510      	push	{r4, lr}
   d5fd8:	2118      	movs	r1, #24
   d5fda:	4604      	mov	r4, r0
   d5fdc:	f000 fa83 	bl	d64e6 <_ZdlPvj>
   d5fe0:	4620      	mov	r0, r4
   d5fe2:	bd10      	pop	{r4, pc}

000d5fe4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5fe6:	7d03      	ldrb	r3, [r0, #20]
   d5fe8:	2b06      	cmp	r3, #6
{
   d5fea:	b08d      	sub	sp, #52	; 0x34
   d5fec:	460e      	mov	r6, r1
   d5fee:	f100 0704 	add.w	r7, r0, #4
   d5ff2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5ff6:	d012      	beq.n	d601e <_ZNK9IPAddress7printToER5Print+0x3a>
   d5ff8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5ffc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6000:	220a      	movs	r2, #10
   d6002:	4630      	mov	r0, r6
   d6004:	f7ff fed5 	bl	d5db2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6008:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d600a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d600c:	d019      	beq.n	d6042 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d600e:	2c00      	cmp	r4, #0
   d6010:	d0f4      	beq.n	d5ffc <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d6012:	212e      	movs	r1, #46	; 0x2e
   d6014:	4630      	mov	r0, r6
   d6016:	f7ff feb3 	bl	d5d80 <_ZN5Print5printEc>
   d601a:	4404      	add	r4, r0
   d601c:	e7ee      	b.n	d5ffc <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d601e:	232f      	movs	r3, #47	; 0x2f
   d6020:	466a      	mov	r2, sp
   d6022:	4639      	mov	r1, r7
   d6024:	200a      	movs	r0, #10
		buf[0] = 0;
   d6026:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d602a:	f7fe fafb 	bl	d4624 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d602e:	4668      	mov	r0, sp
   d6030:	f000 fbea 	bl	d6808 <strlen>
   d6034:	6833      	ldr	r3, [r6, #0]
   d6036:	4602      	mov	r2, r0
   d6038:	68db      	ldr	r3, [r3, #12]
   d603a:	4669      	mov	r1, sp
   d603c:	4630      	mov	r0, r6
   d603e:	4798      	blx	r3
   d6040:	4604      	mov	r4, r0
    }
    return n;
}
   d6042:	4620      	mov	r0, r4
   d6044:	b00d      	add	sp, #52	; 0x34
   d6046:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6048 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d6048:	b510      	push	{r4, lr}
   d604a:	4b05      	ldr	r3, [pc, #20]	; (d6060 <_ZN9IPAddressC1Ev+0x18>)
   d604c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d604e:	2211      	movs	r2, #17
   d6050:	f840 3b04 	str.w	r3, [r0], #4
   d6054:	2100      	movs	r1, #0
   d6056:	f000 fba1 	bl	d679c <memset>
}
   d605a:	4620      	mov	r0, r4
   d605c:	bd10      	pop	{r4, pc}
   d605e:	bf00      	nop
   d6060:	000d6bc8 	.word	0x000d6bc8

000d6064 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d6064:	4603      	mov	r3, r0
   d6066:	4a07      	ldr	r2, [pc, #28]	; (d6084 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6068:	b510      	push	{r4, lr}
   d606a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d606e:	f101 0210 	add.w	r2, r1, #16
   d6072:	f851 4b04 	ldr.w	r4, [r1], #4
   d6076:	f843 4b04 	str.w	r4, [r3], #4
   d607a:	4291      	cmp	r1, r2
   d607c:	d1f9      	bne.n	d6072 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d607e:	780a      	ldrb	r2, [r1, #0]
   d6080:	701a      	strb	r2, [r3, #0]
}
   d6082:	bd10      	pop	{r4, pc}
   d6084:	000d6bc8 	.word	0x000d6bc8

000d6088 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d6088:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d608a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d608e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6092:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6096:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d609a:	2304      	movs	r3, #4
   d609c:	6041      	str	r1, [r0, #4]
   d609e:	7503      	strb	r3, [r0, #20]
}
   d60a0:	bd10      	pop	{r4, pc}
	...

000d60a4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d60a4:	b513      	push	{r0, r1, r4, lr}
   d60a6:	4b05      	ldr	r3, [pc, #20]	; (d60bc <_ZN9IPAddressC1EPKh+0x18>)
   d60a8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d60aa:	78cb      	ldrb	r3, [r1, #3]
   d60ac:	9300      	str	r3, [sp, #0]
   d60ae:	788b      	ldrb	r3, [r1, #2]
   d60b0:	784a      	ldrb	r2, [r1, #1]
   d60b2:	7809      	ldrb	r1, [r1, #0]
   d60b4:	f7ff ffe8 	bl	d6088 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d60b8:	b002      	add	sp, #8
   d60ba:	bd10      	pop	{r4, pc}
   d60bc:	000d6bc8 	.word	0x000d6bc8

000d60c0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d60c0:	7441      	strb	r1, [r0, #17]
}
   d60c2:	4770      	bx	lr

000d60c4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d60c4:	4770      	bx	lr

000d60c6 <_ZN9USBSerial4readEv>:
{
   d60c6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d60c8:	2100      	movs	r1, #0
   d60ca:	7c00      	ldrb	r0, [r0, #16]
   d60cc:	f7fe fb0a 	bl	d46e4 <HAL_USB_USART_Receive_Data>
}
   d60d0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d60d4:	bd08      	pop	{r3, pc}

000d60d6 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d60d6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d60d8:	2101      	movs	r1, #1
   d60da:	7c00      	ldrb	r0, [r0, #16]
   d60dc:	f7fe fb02 	bl	d46e4 <HAL_USB_USART_Receive_Data>
}
   d60e0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d60e4:	bd08      	pop	{r3, pc}

000d60e6 <_ZN9USBSerial17availableForWriteEv>:
{
   d60e6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d60e8:	7c00      	ldrb	r0, [r0, #16]
   d60ea:	f7fe faf3 	bl	d46d4 <HAL_USB_USART_Available_Data_For_Write>
}
   d60ee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d60f2:	bd08      	pop	{r3, pc}

000d60f4 <_ZN9USBSerial9availableEv>:
{
   d60f4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d60f6:	7c00      	ldrb	r0, [r0, #16]
   d60f8:	f7fe fae4 	bl	d46c4 <HAL_USB_USART_Available_Data>
}
   d60fc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6100:	bd08      	pop	{r3, pc}

000d6102 <_ZN9USBSerial5writeEh>:
{
   d6102:	b513      	push	{r0, r1, r4, lr}
   d6104:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6106:	7c00      	ldrb	r0, [r0, #16]
{
   d6108:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d610a:	f7fe fae3 	bl	d46d4 <HAL_USB_USART_Available_Data_For_Write>
   d610e:	2800      	cmp	r0, #0
   d6110:	9901      	ldr	r1, [sp, #4]
   d6112:	dc01      	bgt.n	d6118 <_ZN9USBSerial5writeEh+0x16>
   d6114:	7c60      	ldrb	r0, [r4, #17]
   d6116:	b120      	cbz	r0, d6122 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6118:	7c20      	ldrb	r0, [r4, #16]
   d611a:	f7fe faeb 	bl	d46f4 <HAL_USB_USART_Send_Data>
   d611e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d6122:	b002      	add	sp, #8
   d6124:	bd10      	pop	{r4, pc}

000d6126 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d6126:	7c00      	ldrb	r0, [r0, #16]
   d6128:	f7fe baec 	b.w	d4704 <HAL_USB_USART_Flush_Data>

000d612c <_ZN9USBSerialD0Ev>:
   d612c:	b510      	push	{r4, lr}
   d612e:	2114      	movs	r1, #20
   d6130:	4604      	mov	r4, r0
   d6132:	f000 f9d8 	bl	d64e6 <_ZdlPvj>
   d6136:	4620      	mov	r0, r4
   d6138:	bd10      	pop	{r4, pc}
	...

000d613c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d613c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d613e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6142:	4604      	mov	r4, r0
   d6144:	4608      	mov	r0, r1
   d6146:	2100      	movs	r1, #0
   d6148:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d614c:	4b04      	ldr	r3, [pc, #16]	; (d6160 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d614e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d6150:	2301      	movs	r3, #1
  _serial = serial;
   d6152:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6154:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d6156:	4611      	mov	r1, r2
   d6158:	f7fe faa4 	bl	d46a4 <HAL_USB_USART_Init>
}
   d615c:	4620      	mov	r0, r4
   d615e:	bd10      	pop	{r4, pc}
   d6160:	000d6bdc 	.word	0x000d6bdc

000d6164 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6164:	7c00      	ldrb	r0, [r0, #16]
   d6166:	2200      	movs	r2, #0
   d6168:	f7fe baa4 	b.w	d46b4 <HAL_USB_USART_Begin>

000d616c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d616c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d616e:	2214      	movs	r2, #20
{
   d6170:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6172:	2100      	movs	r1, #0
   d6174:	f000 fb12 	bl	d679c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6178:	4620      	mov	r0, r4
   d617a:	bd10      	pop	{r4, pc}

000d617c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d617c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d617e:	4c10      	ldr	r4, [pc, #64]	; (d61c0 <_Z16_fetch_usbserialv+0x44>)
{
   d6180:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6182:	a803      	add	r0, sp, #12
   d6184:	f7ff fff2 	bl	d616c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6188:	7821      	ldrb	r1, [r4, #0]
   d618a:	f3bf 8f5b 	dmb	ish
   d618e:	f011 0101 	ands.w	r1, r1, #1
   d6192:	d111      	bne.n	d61b8 <_Z16_fetch_usbserialv+0x3c>
   d6194:	4620      	mov	r0, r4
   d6196:	9101      	str	r1, [sp, #4]
   d6198:	f7fd ff7f 	bl	d409a <__cxa_guard_acquire>
   d619c:	9901      	ldr	r1, [sp, #4]
   d619e:	b158      	cbz	r0, d61b8 <_Z16_fetch_usbserialv+0x3c>
   d61a0:	aa03      	add	r2, sp, #12
   d61a2:	4808      	ldr	r0, [pc, #32]	; (d61c4 <_Z16_fetch_usbserialv+0x48>)
   d61a4:	f7ff ffca 	bl	d613c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d61a8:	4620      	mov	r0, r4
   d61aa:	f7fd ff7b 	bl	d40a4 <__cxa_guard_release>
   d61ae:	4a06      	ldr	r2, [pc, #24]	; (d61c8 <_Z16_fetch_usbserialv+0x4c>)
   d61b0:	4906      	ldr	r1, [pc, #24]	; (d61cc <_Z16_fetch_usbserialv+0x50>)
   d61b2:	4804      	ldr	r0, [pc, #16]	; (d61c4 <_Z16_fetch_usbserialv+0x48>)
   d61b4:	f000 f992 	bl	d64dc <__aeabi_atexit>
	return _usbserial;
}
   d61b8:	4802      	ldr	r0, [pc, #8]	; (d61c4 <_Z16_fetch_usbserialv+0x48>)
   d61ba:	b008      	add	sp, #32
   d61bc:	bd10      	pop	{r4, pc}
   d61be:	bf00      	nop
   d61c0:	2003e7a4 	.word	0x2003e7a4
   d61c4:	2003e7a8 	.word	0x2003e7a8
   d61c8:	2003e710 	.word	0x2003e710
   d61cc:	000d60c5 	.word	0x000d60c5

000d61d0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d61d0:	4770      	bx	lr

000d61d2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d61d2:	7441      	strb	r1, [r0, #17]
}
   d61d4:	4770      	bx	lr

000d61d6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d61d6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d61d8:	7c00      	ldrb	r0, [r0, #16]
   d61da:	f7fe fa5b 	bl	d4694 <hal_usart_available_data_for_write>
}
   d61de:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d61e2:	bd08      	pop	{r3, pc}

000d61e4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d61e4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d61e6:	7c00      	ldrb	r0, [r0, #16]
   d61e8:	f7fe fa34 	bl	d4654 <hal_usart_available>
}
   d61ec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d61f0:	bd08      	pop	{r3, pc}

000d61f2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d61f2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d61f4:	7c00      	ldrb	r0, [r0, #16]
   d61f6:	f7fe fa3d 	bl	d4674 <hal_usart_peek>
}
   d61fa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d61fe:	bd08      	pop	{r3, pc}

000d6200 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6200:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d6202:	7c00      	ldrb	r0, [r0, #16]
   d6204:	f7fe fa2e 	bl	d4664 <hal_usart_read>
}
   d6208:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d620c:	bd08      	pop	{r3, pc}

000d620e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d620e:	7c00      	ldrb	r0, [r0, #16]
   d6210:	f7fe ba38 	b.w	d4684 <hal_usart_flush>

000d6214 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6214:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6216:	7c45      	ldrb	r5, [r0, #17]
{
   d6218:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d621a:	b12d      	cbz	r5, d6228 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d621c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d621e:	b003      	add	sp, #12
   d6220:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d6224:	f7fe ba0e 	b.w	d4644 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6228:	7c00      	ldrb	r0, [r0, #16]
   d622a:	9101      	str	r1, [sp, #4]
   d622c:	f7fe fa32 	bl	d4694 <hal_usart_available_data_for_write>
   d6230:	2800      	cmp	r0, #0
   d6232:	9901      	ldr	r1, [sp, #4]
   d6234:	dcf2      	bgt.n	d621c <_ZN11USARTSerial5writeEh+0x8>
}
   d6236:	4628      	mov	r0, r5
   d6238:	b003      	add	sp, #12
   d623a:	bd30      	pop	{r4, r5, pc}

000d623c <_ZN11USARTSerialD0Ev>:
   d623c:	b510      	push	{r4, lr}
   d623e:	2114      	movs	r1, #20
   d6240:	4604      	mov	r4, r0
   d6242:	f000 f950 	bl	d64e6 <_ZdlPvj>
   d6246:	4620      	mov	r0, r4
   d6248:	bd10      	pop	{r4, pc}
	...

000d624c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d624c:	b510      	push	{r4, lr}
   d624e:	f04f 0c00 	mov.w	ip, #0
   d6252:	4604      	mov	r4, r0
   d6254:	4608      	mov	r0, r1
   d6256:	4611      	mov	r1, r2
   d6258:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d625c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d6260:	4a04      	ldr	r2, [pc, #16]	; (d6274 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d6262:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6264:	2201      	movs	r2, #1
  _serial = serial;
   d6266:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6268:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d626a:	461a      	mov	r2, r3
   d626c:	f7fe f9e2 	bl	d4634 <hal_usart_init>
}
   d6270:	4620      	mov	r0, r4
   d6272:	bd10      	pop	{r4, pc}
   d6274:	000d6c0c 	.word	0x000d6c0c

000d6278 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6278:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d627a:	4c1b      	ldr	r4, [pc, #108]	; (d62e8 <_Z22__fetch_global_Serial1v+0x70>)
   d627c:	6826      	ldr	r6, [r4, #0]
   d627e:	b94e      	cbnz	r6, d6294 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
   d6280:	2084      	movs	r0, #132	; 0x84
   d6282:	f7fd ff06 	bl	d4092 <_Znwj>
   d6286:	4605      	mov	r5, r0
   d6288:	b118      	cbz	r0, d6292 <_Z22__fetch_global_Serial1v+0x1a>
   d628a:	2284      	movs	r2, #132	; 0x84
   d628c:	4631      	mov	r1, r6
   d628e:	f000 fa85 	bl	d679c <memset>
   d6292:	6025      	str	r5, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d6294:	4d15      	ldr	r5, [pc, #84]	; (d62ec <_Z22__fetch_global_Serial1v+0x74>)
   d6296:	682f      	ldr	r7, [r5, #0]
   d6298:	b94f      	cbnz	r7, d62ae <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
   d629a:	2084      	movs	r0, #132	; 0x84
   d629c:	f7fd fef9 	bl	d4092 <_Znwj>
   d62a0:	4606      	mov	r6, r0
   d62a2:	b118      	cbz	r0, d62ac <_Z22__fetch_global_Serial1v+0x34>
   d62a4:	2284      	movs	r2, #132	; 0x84
   d62a6:	4639      	mov	r1, r7
   d62a8:	f000 fa78 	bl	d679c <memset>
   d62ac:	602e      	str	r6, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d62ae:	4e10      	ldr	r6, [pc, #64]	; (d62f0 <_Z22__fetch_global_Serial1v+0x78>)
   d62b0:	7831      	ldrb	r1, [r6, #0]
   d62b2:	f3bf 8f5b 	dmb	ish
   d62b6:	f011 0101 	ands.w	r1, r1, #1
   d62ba:	d112      	bne.n	d62e2 <_Z22__fetch_global_Serial1v+0x6a>
   d62bc:	4630      	mov	r0, r6
   d62be:	9101      	str	r1, [sp, #4]
   d62c0:	f7fd feeb 	bl	d409a <__cxa_guard_acquire>
   d62c4:	9901      	ldr	r1, [sp, #4]
   d62c6:	b160      	cbz	r0, d62e2 <_Z22__fetch_global_Serial1v+0x6a>
   d62c8:	6822      	ldr	r2, [r4, #0]
   d62ca:	682b      	ldr	r3, [r5, #0]
   d62cc:	4809      	ldr	r0, [pc, #36]	; (d62f4 <_Z22__fetch_global_Serial1v+0x7c>)
   d62ce:	f7ff ffbd 	bl	d624c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d62d2:	4630      	mov	r0, r6
   d62d4:	f7fd fee6 	bl	d40a4 <__cxa_guard_release>
   d62d8:	4a07      	ldr	r2, [pc, #28]	; (d62f8 <_Z22__fetch_global_Serial1v+0x80>)
   d62da:	4908      	ldr	r1, [pc, #32]	; (d62fc <_Z22__fetch_global_Serial1v+0x84>)
   d62dc:	4805      	ldr	r0, [pc, #20]	; (d62f4 <_Z22__fetch_global_Serial1v+0x7c>)
   d62de:	f000 f8fd 	bl	d64dc <__aeabi_atexit>
#endif
	return serial1;
}
   d62e2:	4804      	ldr	r0, [pc, #16]	; (d62f4 <_Z22__fetch_global_Serial1v+0x7c>)
   d62e4:	b003      	add	sp, #12
   d62e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d62e8:	2003e7c0 	.word	0x2003e7c0
   d62ec:	2003e7c4 	.word	0x2003e7c4
   d62f0:	2003e7bc 	.word	0x2003e7bc
   d62f4:	2003e7c8 	.word	0x2003e7c8
   d62f8:	2003e710 	.word	0x2003e710
   d62fc:	000d61d1 	.word	0x000d61d1

000d6300 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d6300:	2200      	movs	r2, #0
   d6302:	6840      	ldr	r0, [r0, #4]
   d6304:	4611      	mov	r1, r2
   d6306:	f7fe ba63 	b.w	d47d0 <network_ready>

000d630a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d630a:	2200      	movs	r2, #0
   d630c:	6840      	ldr	r0, [r0, #4]
   d630e:	4611      	mov	r1, r2
   d6310:	f7fe ba7e 	b.w	d4810 <network_listening>

000d6314 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6314:	2200      	movs	r2, #0
   d6316:	6840      	ldr	r0, [r0, #4]
   d6318:	4611      	mov	r1, r2
   d631a:	f7fe ba99 	b.w	d4850 <network_get_listen_timeout>

000d631e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d631e:	6840      	ldr	r0, [r0, #4]
   d6320:	2200      	movs	r2, #0
   d6322:	f7fe ba8d 	b.w	d4840 <network_set_listen_timeout>

000d6326 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6326:	6840      	ldr	r0, [r0, #4]
   d6328:	2200      	movs	r2, #0
   d632a:	f081 0101 	eor.w	r1, r1, #1
   d632e:	f7fe ba67 	b.w	d4800 <network_listen>

000d6332 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6332:	2300      	movs	r3, #0
   d6334:	6840      	ldr	r0, [r0, #4]
   d6336:	461a      	mov	r2, r3
   d6338:	4619      	mov	r1, r3
   d633a:	f7fe ba59 	b.w	d47f0 <network_off>

000d633e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d633e:	2200      	movs	r2, #0
   d6340:	6840      	ldr	r0, [r0, #4]
   d6342:	4611      	mov	r1, r2
   d6344:	f7fe ba34 	b.w	d47b0 <network_connecting>

000d6348 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6348:	6840      	ldr	r0, [r0, #4]
   d634a:	2200      	movs	r2, #0
   d634c:	2102      	movs	r1, #2
   d634e:	f7fe ba37 	b.w	d47c0 <network_disconnect>

000d6352 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6352:	2300      	movs	r3, #0
   d6354:	6840      	ldr	r0, [r0, #4]
   d6356:	461a      	mov	r2, r3
   d6358:	f7fe ba22 	b.w	d47a0 <network_connect>

000d635c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d635c:	4b02      	ldr	r3, [pc, #8]	; (d6368 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d635e:	2204      	movs	r2, #4
   d6360:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6362:	4a02      	ldr	r2, [pc, #8]	; (d636c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6364:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d6366:	4770      	bx	lr
   d6368:	2003e7dc 	.word	0x2003e7dc
   d636c:	000d6c3c 	.word	0x000d6c3c

000d6370 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6370:	2300      	movs	r3, #0
   d6372:	6840      	ldr	r0, [r0, #4]
   d6374:	461a      	mov	r2, r3
   d6376:	f7fe ba13 	b.w	d47a0 <network_connect>

000d637a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d637a:	6840      	ldr	r0, [r0, #4]
   d637c:	2200      	movs	r2, #0
   d637e:	2102      	movs	r1, #2
   d6380:	f7fe ba1e 	b.w	d47c0 <network_disconnect>

000d6384 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6384:	2200      	movs	r2, #0
   d6386:	6840      	ldr	r0, [r0, #4]
   d6388:	4611      	mov	r1, r2
   d638a:	f7fe ba11 	b.w	d47b0 <network_connecting>

000d638e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d638e:	2200      	movs	r2, #0
   d6390:	6840      	ldr	r0, [r0, #4]
   d6392:	4611      	mov	r1, r2
   d6394:	f7fe ba1c 	b.w	d47d0 <network_ready>

000d6398 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6398:	2300      	movs	r3, #0
   d639a:	6840      	ldr	r0, [r0, #4]
   d639c:	461a      	mov	r2, r3
   d639e:	4619      	mov	r1, r3
   d63a0:	f7fe ba1e 	b.w	d47e0 <network_on>

000d63a4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d63a4:	2300      	movs	r3, #0
   d63a6:	6840      	ldr	r0, [r0, #4]
   d63a8:	461a      	mov	r2, r3
   d63aa:	4619      	mov	r1, r3
   d63ac:	f7fe ba20 	b.w	d47f0 <network_off>

000d63b0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d63b0:	6840      	ldr	r0, [r0, #4]
   d63b2:	2100      	movs	r1, #0
   d63b4:	f7fe ba54 	b.w	d4860 <network_is_on>

000d63b8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d63b8:	6840      	ldr	r0, [r0, #4]
   d63ba:	2100      	movs	r1, #0
   d63bc:	f7fe ba58 	b.w	d4870 <network_is_off>

000d63c0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d63c0:	6840      	ldr	r0, [r0, #4]
   d63c2:	2200      	movs	r2, #0
   d63c4:	f081 0101 	eor.w	r1, r1, #1
   d63c8:	f7fe ba1a 	b.w	d4800 <network_listen>

000d63cc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d63cc:	6840      	ldr	r0, [r0, #4]
   d63ce:	2200      	movs	r2, #0
   d63d0:	f7fe ba36 	b.w	d4840 <network_set_listen_timeout>

000d63d4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d63d4:	2200      	movs	r2, #0
   d63d6:	6840      	ldr	r0, [r0, #4]
   d63d8:	4611      	mov	r1, r2
   d63da:	f7fe ba39 	b.w	d4850 <network_get_listen_timeout>

000d63de <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d63de:	2200      	movs	r2, #0
   d63e0:	6840      	ldr	r0, [r0, #4]
   d63e2:	4611      	mov	r1, r2
   d63e4:	f7fe ba14 	b.w	d4810 <network_listening>

000d63e8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d63e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d63ec:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d63ee:	b095      	sub	sp, #84	; 0x54
   d63f0:	4616      	mov	r6, r2
   d63f2:	460d      	mov	r5, r1
   d63f4:	4607      	mov	r7, r0
    IPAddress addr;
   d63f6:	f7ff fe27 	bl	d6048 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d63fa:	4621      	mov	r1, r4
   d63fc:	2218      	movs	r2, #24
   d63fe:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d6400:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6402:	f000 f9cb 	bl	d679c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6406:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d6408:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d640c:	4621      	mov	r1, r4
   d640e:	466b      	mov	r3, sp
   d6410:	aa0c      	add	r2, sp, #48	; 0x30
   d6412:	4630      	mov	r0, r6
   d6414:	f7fe f84c 	bl	d44b0 <netdb_getaddrinfo>
    if (!r) {
   d6418:	4604      	mov	r4, r0
   d641a:	2800      	cmp	r0, #0
   d641c:	d14c      	bne.n	d64b8 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d641e:	4602      	mov	r2, r0
   d6420:	2101      	movs	r1, #1
   d6422:	6868      	ldr	r0, [r5, #4]
   d6424:	f7fe f9d4 	bl	d47d0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6428:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d642a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d642c:	4622      	mov	r2, r4
   d642e:	6868      	ldr	r0, [r5, #4]
   d6430:	f7fe f9ce 	bl	d47d0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6434:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6436:	4681      	mov	r9, r0
        bool ok = false;
   d6438:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d643a:	2e00      	cmp	r6, #0
   d643c:	d03c      	beq.n	d64b8 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d643e:	2900      	cmp	r1, #0
   d6440:	d13a      	bne.n	d64b8 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6442:	6873      	ldr	r3, [r6, #4]
   d6444:	2b02      	cmp	r3, #2
   d6446:	d003      	beq.n	d6450 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d6448:	2b0a      	cmp	r3, #10
   d644a:	d011      	beq.n	d6470 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d644c:	69f6      	ldr	r6, [r6, #28]
   d644e:	e7f4      	b.n	d643a <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d6450:	f1b8 0f00 	cmp.w	r8, #0
   d6454:	d00a      	beq.n	d646c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6456:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d6458:	a806      	add	r0, sp, #24
   d645a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d645c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d645e:	f7ff fe21 	bl	d60a4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d6462:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6464:	1d3c      	adds	r4, r7, #4
   d6466:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6468:	682b      	ldr	r3, [r5, #0]
   d646a:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d646c:	4641      	mov	r1, r8
   d646e:	e7ed      	b.n	d644c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6470:	f1b9 0f00 	cmp.w	r9, #0
   d6474:	d101      	bne.n	d647a <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d6476:	4649      	mov	r1, r9
   d6478:	e7e8      	b.n	d644c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d647a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d647c:	2210      	movs	r2, #16
   d647e:	a801      	add	r0, sp, #4
   d6480:	f000 f98c 	bl	d679c <memset>
                    a.v = 6;
   d6484:	2306      	movs	r3, #6
   d6486:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d648a:	ad01      	add	r5, sp, #4
   d648c:	f104 0308 	add.w	r3, r4, #8
   d6490:	3418      	adds	r4, #24
   d6492:	6818      	ldr	r0, [r3, #0]
   d6494:	6859      	ldr	r1, [r3, #4]
   d6496:	462a      	mov	r2, r5
   d6498:	c203      	stmia	r2!, {r0, r1}
   d649a:	3308      	adds	r3, #8
   d649c:	42a3      	cmp	r3, r4
   d649e:	4615      	mov	r5, r2
   d64a0:	d1f7      	bne.n	d6492 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d64a2:	a901      	add	r1, sp, #4
   d64a4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d64a6:	ad07      	add	r5, sp, #28
   d64a8:	f7ff fddc 	bl	d6064 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d64ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d64ae:	1d3c      	adds	r4, r7, #4
   d64b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d64b2:	682b      	ldr	r3, [r5, #0]
   d64b4:	7023      	strb	r3, [r4, #0]
   d64b6:	e7de      	b.n	d6476 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d64b8:	9800      	ldr	r0, [sp, #0]
   d64ba:	f7fd fff1 	bl	d44a0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d64be:	4638      	mov	r0, r7
   d64c0:	b015      	add	sp, #84	; 0x54
   d64c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d64c8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d64c8:	4b02      	ldr	r3, [pc, #8]	; (d64d4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d64ca:	4a03      	ldr	r2, [pc, #12]	; (d64d8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d64cc:	601a      	str	r2, [r3, #0]
   d64ce:	2200      	movs	r2, #0
   d64d0:	605a      	str	r2, [r3, #4]

} // spark
   d64d2:	4770      	bx	lr
   d64d4:	2003e7e4 	.word	0x2003e7e4
   d64d8:	000d6c78 	.word	0x000d6c78

000d64dc <__aeabi_atexit>:
   d64dc:	460b      	mov	r3, r1
   d64de:	4601      	mov	r1, r0
   d64e0:	4618      	mov	r0, r3
   d64e2:	f000 b917 	b.w	d6714 <__cxa_atexit>

000d64e6 <_ZdlPvj>:
   d64e6:	f7fd bdd6 	b.w	d4096 <_ZdlPv>

000d64ea <_ZSt25__throw_bad_function_callv>:
   d64ea:	b508      	push	{r3, lr}
   d64ec:	f7fe fa00 	bl	d48f0 <abort>

000d64f0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d64f0:	4901      	ldr	r1, [pc, #4]	; (d64f8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d64f2:	f000 b8f9 	b.w	d66e8 <_ZNKSt9type_infoeqERKS_>
   d64f6:	bf00      	nop
   d64f8:	000d6cc4 	.word	0x000d6cc4

000d64fc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d64fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d64fe:	2400      	movs	r4, #0
   d6500:	2310      	movs	r3, #16
   d6502:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d6506:	6803      	ldr	r3, [r0, #0]
   d6508:	9400      	str	r4, [sp, #0]
   d650a:	699e      	ldr	r6, [r3, #24]
   d650c:	f88d 4004 	strb.w	r4, [sp, #4]
   d6510:	4615      	mov	r5, r2
   d6512:	466b      	mov	r3, sp
   d6514:	6812      	ldr	r2, [r2, #0]
   d6516:	47b0      	blx	r6
   d6518:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d651c:	f003 0306 	and.w	r3, r3, #6
   d6520:	2b06      	cmp	r3, #6
   d6522:	bf03      	ittte	eq
   d6524:	9b00      	ldreq	r3, [sp, #0]
   d6526:	602b      	streq	r3, [r5, #0]
   d6528:	2001      	moveq	r0, #1
   d652a:	4620      	movne	r0, r4
   d652c:	b004      	add	sp, #16
   d652e:	bd70      	pop	{r4, r5, r6, pc}

000d6530 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d6530:	9800      	ldr	r0, [sp, #0]
   d6532:	4290      	cmp	r0, r2
   d6534:	bf14      	ite	ne
   d6536:	2001      	movne	r0, #1
   d6538:	2006      	moveq	r0, #6
   d653a:	4770      	bx	lr

000d653c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d653c:	b510      	push	{r4, lr}
   d653e:	4b03      	ldr	r3, [pc, #12]	; (d654c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d6540:	6003      	str	r3, [r0, #0]
   d6542:	4604      	mov	r4, r0
   d6544:	f000 f8cd 	bl	d66e2 <_ZNSt9type_infoD1Ev>
   d6548:	4620      	mov	r0, r4
   d654a:	bd10      	pop	{r4, pc}
   d654c:	000d6d04 	.word	0x000d6d04

000d6550 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d6550:	b510      	push	{r4, lr}
   d6552:	4604      	mov	r4, r0
   d6554:	f7ff fff2 	bl	d653c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d6558:	4620      	mov	r0, r4
   d655a:	2108      	movs	r1, #8
   d655c:	f7ff ffc3 	bl	d64e6 <_ZdlPvj>
   d6560:	4620      	mov	r0, r4
   d6562:	bd10      	pop	{r4, pc}

000d6564 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d6564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6568:	461f      	mov	r7, r3
   d656a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d656e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d6572:	4598      	cmp	r8, r3
   d6574:	4606      	mov	r6, r0
   d6576:	4615      	mov	r5, r2
   d6578:	d107      	bne.n	d658a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d657a:	9907      	ldr	r1, [sp, #28]
   d657c:	f000 f8b4 	bl	d66e8 <_ZNKSt9type_infoeqERKS_>
   d6580:	b118      	cbz	r0, d658a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d6582:	7165      	strb	r5, [r4, #5]
   d6584:	2000      	movs	r0, #0
   d6586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d658a:	4639      	mov	r1, r7
   d658c:	4630      	mov	r0, r6
   d658e:	f000 f8ab 	bl	d66e8 <_ZNKSt9type_infoeqERKS_>
   d6592:	2800      	cmp	r0, #0
   d6594:	d0f6      	beq.n	d6584 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d6596:	2301      	movs	r3, #1
   d6598:	f8c4 8000 	str.w	r8, [r4]
   d659c:	7125      	strb	r5, [r4, #4]
   d659e:	71a3      	strb	r3, [r4, #6]
   d65a0:	e7f0      	b.n	d6584 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d65a2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d65a2:	b538      	push	{r3, r4, r5, lr}
   d65a4:	4615      	mov	r5, r2
   d65a6:	461c      	mov	r4, r3
   d65a8:	f000 f89e 	bl	d66e8 <_ZNKSt9type_infoeqERKS_>
   d65ac:	b120      	cbz	r0, d65b8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d65ae:	2308      	movs	r3, #8
   d65b0:	60e3      	str	r3, [r4, #12]
   d65b2:	2306      	movs	r3, #6
   d65b4:	6025      	str	r5, [r4, #0]
   d65b6:	7123      	strb	r3, [r4, #4]
   d65b8:	bd38      	pop	{r3, r4, r5, pc}

000d65ba <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d65ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d65bc:	4605      	mov	r5, r0
   d65be:	460c      	mov	r4, r1
   d65c0:	9201      	str	r2, [sp, #4]
   d65c2:	461e      	mov	r6, r3
   d65c4:	f000 f890 	bl	d66e8 <_ZNKSt9type_infoeqERKS_>
   d65c8:	b950      	cbnz	r0, d65e0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d65ca:	2e03      	cmp	r6, #3
   d65cc:	d808      	bhi.n	d65e0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d65ce:	6823      	ldr	r3, [r4, #0]
   d65d0:	9a01      	ldr	r2, [sp, #4]
   d65d2:	695b      	ldr	r3, [r3, #20]
   d65d4:	4629      	mov	r1, r5
   d65d6:	4620      	mov	r0, r4
   d65d8:	b002      	add	sp, #8
   d65da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d65de:	4718      	bx	r3
   d65e0:	b002      	add	sp, #8
   d65e2:	bd70      	pop	{r4, r5, r6, pc}

000d65e4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d65e4:	b510      	push	{r4, lr}
   d65e6:	4b03      	ldr	r3, [pc, #12]	; (d65f4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d65e8:	6003      	str	r3, [r0, #0]
   d65ea:	4604      	mov	r4, r0
   d65ec:	f7ff ffa6 	bl	d653c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d65f0:	4620      	mov	r0, r4
   d65f2:	bd10      	pop	{r4, pc}
   d65f4:	000d6d64 	.word	0x000d6d64

000d65f8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d65f8:	b510      	push	{r4, lr}
   d65fa:	4604      	mov	r4, r0
   d65fc:	f7ff fff2 	bl	d65e4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d6600:	4620      	mov	r0, r4
   d6602:	210c      	movs	r1, #12
   d6604:	f7ff ff6f 	bl	d64e6 <_ZdlPvj>
   d6608:	4620      	mov	r0, r4
   d660a:	bd10      	pop	{r4, pc}

000d660c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d660c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d660e:	9f08      	ldr	r7, [sp, #32]
   d6610:	4297      	cmp	r7, r2
   d6612:	4605      	mov	r5, r0
   d6614:	460e      	mov	r6, r1
   d6616:	4614      	mov	r4, r2
   d6618:	d00a      	beq.n	d6630 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d661a:	68a8      	ldr	r0, [r5, #8]
   d661c:	6802      	ldr	r2, [r0, #0]
   d661e:	9708      	str	r7, [sp, #32]
   d6620:	6a15      	ldr	r5, [r2, #32]
   d6622:	4631      	mov	r1, r6
   d6624:	4622      	mov	r2, r4
   d6626:	46ac      	mov	ip, r5
   d6628:	b003      	add	sp, #12
   d662a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d662e:	4760      	bx	ip
   d6630:	4619      	mov	r1, r3
   d6632:	9301      	str	r3, [sp, #4]
   d6634:	f000 f858 	bl	d66e8 <_ZNKSt9type_infoeqERKS_>
   d6638:	9b01      	ldr	r3, [sp, #4]
   d663a:	2800      	cmp	r0, #0
   d663c:	d0ed      	beq.n	d661a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d663e:	2006      	movs	r0, #6
   d6640:	b003      	add	sp, #12
   d6642:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6644 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d6644:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6648:	460d      	mov	r5, r1
   d664a:	4619      	mov	r1, r3
   d664c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d6650:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d6654:	4681      	mov	r9, r0
   d6656:	4617      	mov	r7, r2
   d6658:	4698      	mov	r8, r3
   d665a:	f000 f845 	bl	d66e8 <_ZNKSt9type_infoeqERKS_>
   d665e:	b190      	cbz	r0, d6686 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d6660:	2d00      	cmp	r5, #0
   d6662:	6034      	str	r4, [r6, #0]
   d6664:	7137      	strb	r7, [r6, #4]
   d6666:	db09      	blt.n	d667c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d6668:	1961      	adds	r1, r4, r5
   d666a:	458a      	cmp	sl, r1
   d666c:	bf0c      	ite	eq
   d666e:	2106      	moveq	r1, #6
   d6670:	2101      	movne	r1, #1
   d6672:	71b1      	strb	r1, [r6, #6]
   d6674:	2000      	movs	r0, #0
   d6676:	b001      	add	sp, #4
   d6678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d667c:	3502      	adds	r5, #2
   d667e:	d1f9      	bne.n	d6674 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d6680:	2301      	movs	r3, #1
   d6682:	71b3      	strb	r3, [r6, #6]
   d6684:	e7f6      	b.n	d6674 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d6686:	4554      	cmp	r4, sl
   d6688:	d106      	bne.n	d6698 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d668a:	4659      	mov	r1, fp
   d668c:	4648      	mov	r0, r9
   d668e:	f000 f82b 	bl	d66e8 <_ZNKSt9type_infoeqERKS_>
   d6692:	b108      	cbz	r0, d6698 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d6694:	7177      	strb	r7, [r6, #5]
   d6696:	e7ed      	b.n	d6674 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d6698:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d669c:	6803      	ldr	r3, [r0, #0]
   d669e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d66a2:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d66a6:	69dc      	ldr	r4, [r3, #28]
   d66a8:	463a      	mov	r2, r7
   d66aa:	4643      	mov	r3, r8
   d66ac:	4629      	mov	r1, r5
   d66ae:	46a4      	mov	ip, r4
   d66b0:	b001      	add	sp, #4
   d66b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d66b6:	4760      	bx	ip

000d66b8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d66b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d66bc:	4607      	mov	r7, r0
   d66be:	460c      	mov	r4, r1
   d66c0:	4615      	mov	r5, r2
   d66c2:	461e      	mov	r6, r3
   d66c4:	f7ff ff6d 	bl	d65a2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d66c8:	b948      	cbnz	r0, d66de <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d66ca:	68b8      	ldr	r0, [r7, #8]
   d66cc:	6803      	ldr	r3, [r0, #0]
   d66ce:	699f      	ldr	r7, [r3, #24]
   d66d0:	462a      	mov	r2, r5
   d66d2:	4633      	mov	r3, r6
   d66d4:	4621      	mov	r1, r4
   d66d6:	46bc      	mov	ip, r7
   d66d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d66dc:	4760      	bx	ip
   d66de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d66e2 <_ZNSt9type_infoD1Ev>:
   d66e2:	4770      	bx	lr

000d66e4 <_ZNKSt9type_info14__is_pointer_pEv>:
   d66e4:	2000      	movs	r0, #0
   d66e6:	4770      	bx	lr

000d66e8 <_ZNKSt9type_infoeqERKS_>:
   d66e8:	4281      	cmp	r1, r0
   d66ea:	b508      	push	{r3, lr}
   d66ec:	d00e      	beq.n	d670c <_ZNKSt9type_infoeqERKS_+0x24>
   d66ee:	6840      	ldr	r0, [r0, #4]
   d66f0:	7803      	ldrb	r3, [r0, #0]
   d66f2:	2b2a      	cmp	r3, #42	; 0x2a
   d66f4:	d00c      	beq.n	d6710 <_ZNKSt9type_infoeqERKS_+0x28>
   d66f6:	6849      	ldr	r1, [r1, #4]
   d66f8:	780b      	ldrb	r3, [r1, #0]
   d66fa:	2b2a      	cmp	r3, #42	; 0x2a
   d66fc:	bf08      	it	eq
   d66fe:	3101      	addeq	r1, #1
   d6700:	f000 f878 	bl	d67f4 <strcmp>
   d6704:	fab0 f080 	clz	r0, r0
   d6708:	0940      	lsrs	r0, r0, #5
   d670a:	bd08      	pop	{r3, pc}
   d670c:	2001      	movs	r0, #1
   d670e:	e7fc      	b.n	d670a <_ZNKSt9type_infoeqERKS_+0x22>
   d6710:	2000      	movs	r0, #0
   d6712:	e7fa      	b.n	d670a <_ZNKSt9type_infoeqERKS_+0x22>

000d6714 <__cxa_atexit>:
   d6714:	b510      	push	{r4, lr}
   d6716:	4c05      	ldr	r4, [pc, #20]	; (d672c <__cxa_atexit+0x18>)
   d6718:	4613      	mov	r3, r2
   d671a:	b12c      	cbz	r4, d6728 <__cxa_atexit+0x14>
   d671c:	460a      	mov	r2, r1
   d671e:	4601      	mov	r1, r0
   d6720:	2002      	movs	r0, #2
   d6722:	f3af 8000 	nop.w
   d6726:	bd10      	pop	{r4, pc}
   d6728:	4620      	mov	r0, r4
   d672a:	e7fc      	b.n	d6726 <__cxa_atexit+0x12>
   d672c:	00000000 	.word	0x00000000

000d6730 <memcmp>:
   d6730:	b530      	push	{r4, r5, lr}
   d6732:	3901      	subs	r1, #1
   d6734:	2400      	movs	r4, #0
   d6736:	42a2      	cmp	r2, r4
   d6738:	d101      	bne.n	d673e <memcmp+0xe>
   d673a:	2000      	movs	r0, #0
   d673c:	e005      	b.n	d674a <memcmp+0x1a>
   d673e:	5d03      	ldrb	r3, [r0, r4]
   d6740:	3401      	adds	r4, #1
   d6742:	5d0d      	ldrb	r5, [r1, r4]
   d6744:	42ab      	cmp	r3, r5
   d6746:	d0f6      	beq.n	d6736 <memcmp+0x6>
   d6748:	1b58      	subs	r0, r3, r5
   d674a:	bd30      	pop	{r4, r5, pc}

000d674c <memcpy>:
   d674c:	440a      	add	r2, r1
   d674e:	4291      	cmp	r1, r2
   d6750:	f100 33ff 	add.w	r3, r0, #4294967295
   d6754:	d100      	bne.n	d6758 <memcpy+0xc>
   d6756:	4770      	bx	lr
   d6758:	b510      	push	{r4, lr}
   d675a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d675e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6762:	4291      	cmp	r1, r2
   d6764:	d1f9      	bne.n	d675a <memcpy+0xe>
   d6766:	bd10      	pop	{r4, pc}

000d6768 <memmove>:
   d6768:	4288      	cmp	r0, r1
   d676a:	b510      	push	{r4, lr}
   d676c:	eb01 0402 	add.w	r4, r1, r2
   d6770:	d902      	bls.n	d6778 <memmove+0x10>
   d6772:	4284      	cmp	r4, r0
   d6774:	4623      	mov	r3, r4
   d6776:	d807      	bhi.n	d6788 <memmove+0x20>
   d6778:	1e43      	subs	r3, r0, #1
   d677a:	42a1      	cmp	r1, r4
   d677c:	d008      	beq.n	d6790 <memmove+0x28>
   d677e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6782:	f803 2f01 	strb.w	r2, [r3, #1]!
   d6786:	e7f8      	b.n	d677a <memmove+0x12>
   d6788:	4402      	add	r2, r0
   d678a:	4601      	mov	r1, r0
   d678c:	428a      	cmp	r2, r1
   d678e:	d100      	bne.n	d6792 <memmove+0x2a>
   d6790:	bd10      	pop	{r4, pc}
   d6792:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d6796:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d679a:	e7f7      	b.n	d678c <memmove+0x24>

000d679c <memset>:
   d679c:	4402      	add	r2, r0
   d679e:	4603      	mov	r3, r0
   d67a0:	4293      	cmp	r3, r2
   d67a2:	d100      	bne.n	d67a6 <memset+0xa>
   d67a4:	4770      	bx	lr
   d67a6:	f803 1b01 	strb.w	r1, [r3], #1
   d67aa:	e7f9      	b.n	d67a0 <memset+0x4>

000d67ac <srand>:
   d67ac:	b538      	push	{r3, r4, r5, lr}
   d67ae:	4b0d      	ldr	r3, [pc, #52]	; (d67e4 <srand+0x38>)
   d67b0:	681d      	ldr	r5, [r3, #0]
   d67b2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d67b4:	4604      	mov	r4, r0
   d67b6:	b97b      	cbnz	r3, d67d8 <srand+0x2c>
   d67b8:	2018      	movs	r0, #24
   d67ba:	f7fe f879 	bl	d48b0 <malloc>
   d67be:	4a0a      	ldr	r2, [pc, #40]	; (d67e8 <srand+0x3c>)
   d67c0:	4b0a      	ldr	r3, [pc, #40]	; (d67ec <srand+0x40>)
   d67c2:	63a8      	str	r0, [r5, #56]	; 0x38
   d67c4:	e9c0 2300 	strd	r2, r3, [r0]
   d67c8:	4b09      	ldr	r3, [pc, #36]	; (d67f0 <srand+0x44>)
   d67ca:	6083      	str	r3, [r0, #8]
   d67cc:	230b      	movs	r3, #11
   d67ce:	8183      	strh	r3, [r0, #12]
   d67d0:	2201      	movs	r2, #1
   d67d2:	2300      	movs	r3, #0
   d67d4:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d67d8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d67da:	2200      	movs	r2, #0
   d67dc:	611c      	str	r4, [r3, #16]
   d67de:	615a      	str	r2, [r3, #20]
   d67e0:	bd38      	pop	{r3, r4, r5, pc}
   d67e2:	bf00      	nop
   d67e4:	2003e6ac 	.word	0x2003e6ac
   d67e8:	abcd330e 	.word	0xabcd330e
   d67ec:	e66d1234 	.word	0xe66d1234
   d67f0:	0005deec 	.word	0x0005deec

000d67f4 <strcmp>:
   d67f4:	f810 2b01 	ldrb.w	r2, [r0], #1
   d67f8:	f811 3b01 	ldrb.w	r3, [r1], #1
   d67fc:	2a01      	cmp	r2, #1
   d67fe:	bf28      	it	cs
   d6800:	429a      	cmpcs	r2, r3
   d6802:	d0f7      	beq.n	d67f4 <strcmp>
   d6804:	1ad0      	subs	r0, r2, r3
   d6806:	4770      	bx	lr

000d6808 <strlen>:
   d6808:	4603      	mov	r3, r0
   d680a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d680e:	2a00      	cmp	r2, #0
   d6810:	d1fb      	bne.n	d680a <strlen+0x2>
   d6812:	1a18      	subs	r0, r3, r0
   d6814:	3801      	subs	r0, #1
   d6816:	4770      	bx	lr

000d6818 <strncpy>:
   d6818:	b510      	push	{r4, lr}
   d681a:	3901      	subs	r1, #1
   d681c:	4603      	mov	r3, r0
   d681e:	b132      	cbz	r2, d682e <strncpy+0x16>
   d6820:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d6824:	f803 4b01 	strb.w	r4, [r3], #1
   d6828:	3a01      	subs	r2, #1
   d682a:	2c00      	cmp	r4, #0
   d682c:	d1f7      	bne.n	d681e <strncpy+0x6>
   d682e:	441a      	add	r2, r3
   d6830:	2100      	movs	r1, #0
   d6832:	4293      	cmp	r3, r2
   d6834:	d100      	bne.n	d6838 <strncpy+0x20>
   d6836:	bd10      	pop	{r4, pc}
   d6838:	f803 1b01 	strb.w	r1, [r3], #1
   d683c:	e7f9      	b.n	d6832 <strncpy+0x1a>

000d683e <strnlen>:
   d683e:	b510      	push	{r4, lr}
   d6840:	4602      	mov	r2, r0
   d6842:	4401      	add	r1, r0
   d6844:	428a      	cmp	r2, r1
   d6846:	4613      	mov	r3, r2
   d6848:	d101      	bne.n	d684e <strnlen+0x10>
   d684a:	1a18      	subs	r0, r3, r0
   d684c:	bd10      	pop	{r4, pc}
   d684e:	781c      	ldrb	r4, [r3, #0]
   d6850:	3201      	adds	r2, #1
   d6852:	2c00      	cmp	r4, #0
   d6854:	d1f6      	bne.n	d6844 <strnlen+0x6>
   d6856:	e7f8      	b.n	d684a <strnlen+0xc>

000d6858 <dynalib_user>:
   d6858:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d6868:	0000 0000 5353 4449 6920 2073 6f74 206f     ....SSID is too 
   d6878:	6f6c 676e 5300 7465 7720 6669 2069 5353     long.Set wifi SS
   d6888:	4449 203a 7325 000a 6150 7373 6f77 6472     ID: %s..Password
   d6898:	6920 2073 6f74 206f 6f6c 676e 5300 7465      is too long.Set
   d68a8:	7720 6669 2069 6170 7373 203a 7325 000a      wifi pass: %s..
   d68b8:	6146 6c69 6465 7420 206f 6c63 6165 2072     Failed to clear 
   d68c8:	6957 6966 6320 6572 6564 746e 6169 736c     Wifi credentials
   d68d8:	4600 6961 656c 2064 6f74 7320 7465 5720     .Failed to set W
   d68e8:	6669 2069 7263 6465 6e65 6974 6c61 0073     ifi credentials.
   d68f8:	6957 6946 6320 6572 6564 746e 6169 736c     WiFi credentials
   d6908:	7320 7465 4200 454c 5720 4669 2069 6553      set.BLE WiFi Se
   d6918:	7574 2070 7572 6e6e 6e69 0067 6150 7472     tup running.Part
   d6928:	6369 656c 6320 6e6f 656e 7463 6465 3500     icle connected.5
   d6938:	3163 3962 3061 2d64 3562 6562 342d 3461     c1b9a0d-b5be-4a4
   d6948:	2d30 6638 6137 362d 6236 3633 3064 3561     0-8f7a-66b36d0a5
   d6958:	3731 0036 6466 6663 3030 3130 332d 6566     176.fdcf0001-3fe
   d6968:	2d64 6534 3264 382d 6534 2d36 3430 6262     d-4ed2-84e6-04bb
   d6978:	3962 6561 3430 3464 6600 6364 3066 3030     b9ae04d4.fdcf000
   d6988:	2d32 6633 6465 342d 6465 2d32 3438 3665     2-3fed-4ed2-84e6
   d6998:	302d 6234 6262 6139 3065 6434 0034 6573     -04bbb9ae04d4.se
   d69a8:	5774 6669 5369 4953 0044 6466 6663 3030     tWifiSSID.fdcf00
   d69b8:	3330 332d 6566 2d64 6534 3264 382d 6534     03-3fed-4ed2-84e
   d69c8:	2d36 3430 6262 3962 6561 3430 3464 7300     6-04bbb9ae04d4.s
   d69d8:	7465 6957 6966 6150 7373 0000               etWifiPass..

000d69e4 <_ZTVN5spark13EthernetClassE>:
	...
   d69ec:	496f 000d 4965 000d 495b 000d 4951 000d     oI..eI..[I..QI..
   d69fc:	4945 000d 4939 000d 63b1 000d 63b9 000d     EI..9I...c...c..
   d6a0c:	492d 000d 4925 000d 491b 000d 4911 000d     -I..%I...I...I..
   d6a1c:	63e9 000d 6977 6972 676e 622e 656c 5300     .c..wiring.ble.S
   d6a2c:	6174 7472 6420 7369 6f63 6576 6972 676e     tart discovering
   d6a3c:	7320 7265 6976 6563 2e73 5000 6565 2072      services..Peer 
   d6a4c:	6564 6976 6563 6920 2073 696d 7373 6e69     device is missin
   d6a5c:	2167 4600 6961 656c 2064 6f74 6120 7070     g!.Failed to app
   d6a6c:	6e65 2064 6570 7265 4320 6e65 7274 6c61     end peer Central
   d6a7c:	6420 7665 6369 2e65 4300 6e6f 656e 7463      device..Connect
   d6a8c:	6465 6220 2079 6543 746e 6172 206c 6564     ed by Central de
   d6a9c:	6976 6563 002e 6944 6373 6e6f 656e 7463     vice..Disconnect
   d6aac:	6465 6220 2079 6572 6f6d 6574 6420 7665     ed by remote dev
   d6abc:	6369 2e65 4400 7075 696c 6163 6574 2064     ice..Duplicated 
   d6acc:	6863 7261 6361 6574 6972 7473 6369 6320     characteristic c
   d6adc:	6e61 6f6e 2074 6562 6120 6464 6465 002e     annot be added..
   d6aec:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   d6afc:	6c20 636f 6c61 6320 6168 6172 7463 7265      local character
   d6b0c:	7369 6974 2e63 0000                         istic...

000d6b14 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d6b1c:	4ad9 000d 4b3d 000d 4d05 000d 4b67 000d     .J..=K...M..gK..
   d6b2c:	4add 000d                                   .J..

000d6b30 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d6b38:	4ad5 000d 4b4b 000d 4ad7 000d 4b6b 000d     .J..KK...J..kK..
   d6b48:	4afd 000d                                   .J..

000d6b4c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d6b54:	4ad3 000d 4b59 000d 549d 000d 4b6f 000d     .J..YK...T..oK..
   d6b64:	4b1d 000d                                   .K..

000d6b68 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   d6b70:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............

000d6b80 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   d6b80:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000d6b90 <_ZN8particle7BleUuid9BASE_UUIDE>:
   d6b90:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
   d6ba0:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   d6bb0:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d6bc0 <_ZTV9IPAddress>:
	...
   d6bc8:	5fe5 000d 5fd5 000d 5fd7 000d               ._..._..._..

000d6bd4 <_ZTV9USBSerial>:
	...
   d6bdc:	60c5 000d 612d 000d 6103 000d 5d31 000d     .`..-a...a..1]..
   d6bec:	60f5 000d 60c7 000d 60d7 000d 6127 000d     .`...`...`..'a..
   d6bfc:	60e7 000d 60c1 000d                         .`...`..

000d6c04 <_ZTV11USARTSerial>:
	...
   d6c0c:	61d1 000d 623d 000d 6215 000d 5d31 000d     .a..=b...b..1]..
   d6c1c:	61e5 000d 6201 000d 61f3 000d 620f 000d     .a...b...a...b..
   d6c2c:	61d3 000d 61d7 000d                         .a...a..

000d6c34 <_ZTVN5spark9WiFiClassE>:
	...
   d6c3c:	6353 000d 6349 000d 633f 000d 6301 000d     Sc..Ic..?c...c..
   d6c4c:	5e51 000d 6333 000d 63b1 000d 63b9 000d     Q^..3c...c...c..
   d6c5c:	6327 000d 631f 000d 6315 000d 630b 000d     'c...c...c...c..
   d6c6c:	63e9 000d                                   .c..

000d6c70 <_ZTVN5spark12NetworkClassE>:
	...
   d6c78:	6371 000d 637b 000d 6385 000d 638f 000d     qc..{c...c...c..
   d6c88:	6399 000d 63a5 000d 63b1 000d 63b9 000d     .c...c...c...c..
   d6c98:	63c1 000d 63cd 000d 63d5 000d 63df 000d     .c...c...c...c..
   d6ca8:	63e9 000d                                   .c..

000d6cac <_ZTSSt19_Sp_make_shared_tag>:
   d6cac:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   d6cbc:	6572 5f64 6174 0067                         red_tag.

000d6cc4 <_ZTISt19_Sp_make_shared_tag>:
   d6cc4:	6d04 000d 6cac 000d                         .m...l..

000d6ccc <_ZTIN10__cxxabiv117__class_type_infoE>:
   d6ccc:	6d64 000d 6cd8 000d 6d88 000d               dm...l...m..

000d6cd8 <_ZTSN10__cxxabiv117__class_type_infoE>:
   d6cd8:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   d6ce8:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   d6cf8:	0045 0000                                   E...

000d6cfc <_ZTVN10__cxxabiv117__class_type_infoE>:
   d6cfc:	0000 0000 6ccc 000d 653d 000d 6551 000d     .....l..=e..Qe..
   d6d0c:	66e5 000d 66e5 000d 65bb 000d 64fd 000d     .f...f...e...d..
   d6d1c:	65a3 000d 6565 000d 6531 000d               .e..ee..1e..

000d6d28 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d6d28:	6d64 000d 6d34 000d 6ccc 000d               dm..4m...l..

000d6d34 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d6d34:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   d6d44:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   d6d54:	666e 456f 0000 0000                         nfoE....

000d6d5c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d6d5c:	0000 0000 6d28 000d 65e5 000d 65f9 000d     ....(m...e...e..
   d6d6c:	66e5 000d 66e5 000d 65bb 000d 64fd 000d     .f...f...e...d..
   d6d7c:	66b9 000d 6645 000d 660d 000d               .f..Ef...f..

000d6d88 <_ZTISt9type_info>:
   d6d88:	6d04 000d 6d90 000d                         .m...m..

000d6d90 <_ZTSSt9type_info>:
   d6d90:	7453 7439 7079 5f65 6e69 6f66                St9type_info.

000d6d9d <link_const_variable_data_end>:
   d6d9d:	00          	.byte	0x00
	...

000d6da0 <link_constructors_location>:
   d6da0:	000d4351 	.word	0x000d4351
   d6da4:	000d4979 	.word	0x000d4979
   d6da8:	000d49b5 	.word	0x000d49b5
   d6dac:	000d5d09 	.word	0x000d5d09
   d6db0:	000d5e5d 	.word	0x000d5e5d
   d6db4:	000d5e6d 	.word	0x000d5e6d
   d6db8:	000d5e95 	.word	0x000d5e95
   d6dbc:	000d635d 	.word	0x000d635d
   d6dc0:	000d64c9 	.word	0x000d64c9

000d6dc4 <link_constructors_end>:
	...
